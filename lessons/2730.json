{"lesson":{"id":2730,"name":"The to_s Method","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5737,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113331,"text":"true","isCorrect":true,"properties":{}},{"id":113332,"text":"false","isCorrect":false,"properties":{}}],"question":"The to_s method can be called by any object.","textContent":"[h1]The to_s Method[/h1]\r\n\r\nThe [b]to_s[/b] method comes built-in with all classes. It gets called when you output the object.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1068\"]class Person\r\n#some code\r\nend\r\np = Person.new\r\n[b]puts p[/b]\r\n# outputs \"#<Person:0x0000000272e140>\"[/code]\r\nWhen we call [b]puts p[/b], Ruby automatically calls the [b]to_s [/b]method for the object [b]p[/b], so [b]puts p[/b] is the same as [b]puts p.to_s[/b].\r\n[note]By default, the [b]to_s [/b]method prints the object's class and an encoding of the object id.[/note]"},{"id":5738,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113335,"text":"#{x}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to include the object \"x\" in the output.\r\n[!raw!]\r\nclass X\r\nend\r\nx = X.new\r\nputs \"Object data: {0}\"","textContent":"[h1]The to_s Method[/h1]\r\n\r\nWe can define our own [b]to_s [/b]method for a class and add custom implementation to it.\r\nFor example, we can generate an informative, formatted output for our Person class:[code format=\"rb\" codeId=\"1069\"]class Person\r\n  def initialize(n, a)\r\n    @name = n\r\n    @age = a\r\n  end\r\n  def [b]to_s[/b]\r\n    \"#{@name} is #{@age} years old.\"\r\n  end\r\nend\r\np = Person.new(\"David\", 28)\r\nputs p\r\n# outputs: \"David is 28 years old.\"[/code]\r\nThe [b]to_s [/b]method also gets called when the object is used as a value in a string, like [b]\"#{p}\"[/b]\r\n[note]Defining the [b]to_s [/b]method makes it easier and shorter to output the information of an object in the format needed, as opposed to defining a custom method and calling it from an object.\r\nWhen you define the [b]to_s [/b]method you call puts on your object ([b]puts obj[/b]), where with a custom method you have to explicitly call it from the object ([b]puts obj.info[/b]).[/note]"}]}}