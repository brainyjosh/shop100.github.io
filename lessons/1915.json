{"lesson":{"id":1915,"name":"Function Templates with Multiple Parameters","type":0,"mode":1,"videoID":"SeleR7PDs5Q","tags":"templates","quizzes":[{"id":3794,"number":1,"videoStart":5.0,"videoEnd":163.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95241,"text":"template","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95242,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare the template function's template parameters list. The template specification has two parameters, named ''T'' and ''U''.\r\n[!raw!]\r\n{0} <class T, {1} U>","textContent":"[h1]Function Templates[/h1]\r\n\r\nFunction templates also make it possible to work with [b]multiple [/b]generic data types. Define the data types using a comma-separated list.\r\nLet's create a function that compares arguments of varying data types (an [b]int [/b]and a [b]double[/b]), and prints the smaller one.[code format=\"cpp\"]template <[b]class T, class U[/b]>[/code]\r\n[note]As you can see, this template declares two different generic data types, [b]T[/b] and [b]U[/b].[/note]"},{"id":3795,"number":2,"videoStart":165.0,"videoEnd":223.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95243,"text":"template","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95244,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95245,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a template function ''smaller'' taking two arguments and returning the smaller one. Arguments are of template types ''F'' and ''S'', respectively.\r\n[!raw!]\r\n{0} <class F, {1} S>\r\nF smaller(F a, S b)\r\n{  \r\n   {2} (a < b ? a : b); \r\n}","textContent":"[h1]Function Templates[/h1]\r\n\r\nNow we can continue with our function declaration: [code format=\"cpp\"]template <class T, class U>\r\nT smaller(T a, U b) {\r\n  return (a < b ? a : b);\r\n}[/code]\r\n[note]The ternary operator checks the a<b condition and returns the corresponding result. The expression (a < b ? a : b) is equivalent to the expression if [b]a[/b] is smaller than [b]b[/b], return [b]a[/b], else, return [b]b[/b].[/note]"},{"id":3796,"number":3,"videoStart":224.0,"videoEnd":341.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97891,"text":"double","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97892,"text":"smaller","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare an integer variable and a double variable, and pass them to the template function ''smaller''. Print the returned value to the screen.\r\n[!raw!]\r\nint main()\r\n{\r\n  int a = 12;\r\n  {0} b = 23.7;\r\n  cout << {1}(a, b) << endl;\r\n}","textContent":"[h1]Function Templates [/h1]\r\n\r\nIn our main, we can use the function for different data types:[code format=\"cpp\" codeId=\"278\"]template <class T, class U>\r\nT smaller(T a, U b) {\r\n  return (a < b ? a : b);\r\n}\r\n\r\nint main () {\r\n  int x=72;\r\n  double y=15.34;\r\n  cout << smaller(x, y) << endl;\r\n}\r\n\r\n// Outputs 15[/code]\r\n[note]The output converts to an [b]integer[/b], because we specified the function template's return type to be of the same type as the first parameter (T), which is an integer.[/note]"},{"id":3797,"number":4,"videoStart":342.0,"videoEnd":400.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78770,"text":"Templates allow us to write program without code","isCorrect":false,"properties":{}},{"id":78771,"text":"Templates allow us to declare generic types of data","isCorrect":true,"properties":{}},{"id":78772,"text":"Templates are protected members","isCorrect":false,"properties":{}}],"question":"Which statement about templates is true?","textContent":"[h1]Function Templates[/h1]\r\n\r\n[b]T[/b] is short for Type, and is a widely used name for type parameters. \r\nIt's not necessary to use [b]T[/b], however; you can declare your type parameters using any identifiers that work for you. The only terms you need to avoid are C++ keywords.\r\n[note]Remember that when you declare a template parameter, you absolutely [b]must [/b]use it in your function definition. Otherwise, the compiler will complain![/note]"}]}}