{"lesson":{"id":2676,"name":"Operator Overloading","type":0,"mode":1,"videoID":null,"tags":"operator-overloading","quizzes":[{"id":5548,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103857,"text":"defining custom actions for operators","isCorrect":true,"properties":{}},{"id":103858,"text":"defining constructors","isCorrect":false,"properties":{}},{"id":103859,"text":"defining constant members of a class","isCorrect":false,"properties":{}}],"question":"Operator overloading means:","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nMost operators in C# can be [b]overloaded[/b], meaning they can be redefined for custom actions.\r\nFor example, you can redefine the action of the plus (+) operator in a custom class.\r\nConsider the [b]Box [/b]class that has [b]Height [/b]and [b]Width [/b]properties: [code format=\"cs\" ]class Box {\r\n  public int Height {get; set;}\r\n  public int Width {get; set;}\r\n  public Box(int h, int w) {\r\n    Height = h;\r\n    Width = w;\r\n  }\r\n}\r\nstatic void Main(string[] args) {\r\n  Box b1 = new Box(14, 3);\r\n  Box b2 = new Box(5, 7);\r\n}[/code]\r\nWe would like to add these two Box objects, which would result in a new, bigger Box.\r\nSo, basically, we would like the following code to work: [code format=\"cs\" ] Box b3 = b1 + b2;[/code]\r\nThe Height and Width properties of object b3 should be equal to the sum of the corresponding properties of the b1 and b2 objects.\r\n[note]This is achieved through [b]operator overloading[/b]. Tap next to learn more![/note]"},{"id":5549,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106288,"text":"bool","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106289,"text":">","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106290,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to overload the greater than operator for the Box class.\r\n[!raw!]\r\npublic static {0} operator{1}(Box a,Box b) {\r\n  if (a.Height*a.Width > b.Height*b.Width)\r\n    {2} true;\r\n  else\r\n    return false;\r\n}","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nOverloaded operators are methods with special names, where the keyword [b]operator [/b]is followed by the symbol for the operator being defined. \r\nSimilar to any other method, an overloaded operator has a return type and a parameter list.\r\nFor example, for our [b]Box [/b]class, we overload the + operator: [code format=\"cs\" ]public static Box [b]operator+[/b] (Box a, Box b) {\r\n  int h = a.Height + b.Height;\r\n  int w = a.Width + b.Width;\r\n  Box res = new Box(h, w);\r\n  return res;\r\n}[/code]\r\nThe method above defines an overloaded [b]operator +[/b] with two Box object parameters and returning a new Box object whose Height and Width properties equal the sum of its parameter's corresponding properties.\r\nAdditionally, the overloaded operator must be [b]static[/b].\r\nPutting it all together: [code format=\"cs\" codeId=\"894\"]class Box {\r\n  public int Height { get; set; }\r\n  public int Width { get; set; }\r\n  public Box(int h, int w) {\r\n    Height = h;\r\n    Width = w;\r\n  }\r\n  public static Box operator+(Box a, Box b) {\r\n    int h = a.Height + b.Height;\r\n    int w = a.Width + b.Width;\r\n    Box res = new Box(h, w);\r\n    return res;\r\n  }\r\n}\r\nstatic void Main(string[] args) {\r\n  Box b1 = new Box(14, 3);\r\n  Box b2 = new Box(5, 7);\r\n  Box b3 = b1 + b2;\r\n\r\n  Console.WriteLine(b3.Height); //19\r\n  Console.WriteLine(b3.Width); //10\r\n}[/code]\r\n[note]All arithmetic and comparison operators can be overloaded. For instance, you could define greater than and less than operators for the boxes that would compare the Boxes and return a [b]boolean [/b]result. Just keep in mind that when overloading the greater than operator, the less than operator should also be defined.[/note]"}]}}