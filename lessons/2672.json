{"lesson":{"id":2672,"name":"Static Classes","type":0,"mode":1,"videoID":null,"tags":"static","quizzes":[{"id":5542,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103821,"text":"only static members","isCorrect":true,"properties":{}},{"id":103822,"text":"at least one static member","isCorrect":false,"properties":{}}],"question":"A static class contains:","textContent":"[h1]Static Classes[/h1]\r\n\r\nAn entire class can be declared as [b]static[/b].\r\nA [b]static class[/b] can contain only static members. \r\nYou cannot instantiate an object of a static class, as only one instance of the static class can exist in a program.\r\nStatic classes are useful for combining logical properties and methods. A good example of this is the [b]Math [/b]class.\r\nIt contains various useful properties and methods for mathematical operations. \r\nFor example, the [b]Pow [/b]method raises a number to a power: [code format=\"cs\" codeId=\"890\"]Console.WriteLine([b]Math.Pow(2, 3)[/b]);\r\n//Outputs 8[/code]\r\nYou access all members of the Math class using the class name, without declaring an object.\r\n[note]Tap next to learn about the available methods of the Math class.[/note]"},{"id":5543,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106285,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nint[] arr = { 9, 4, 10, 42 };\r\nArray.Sort(arr);\r\ndouble x = Math.Sqrt(arr[1]);\r\nConsole.WriteLine(x);","textContent":"[h1]Static Classes[/h1]\r\n\r\nThere are a number of useful static methods and properties available in C#: \r\n\r\n[h2]Math[/h2]\r\nMath.[b]PI [/b]the constant PI.\r\nMath.[b]E [/b]represents the natural logarithmic base e.\r\nMath.[b]Max[/b]() returns the larger of its two arguments.\r\nMath.[b]Min[/b]() returns the smaller of its two arguments.\r\nMath.[b]Abs[/b]() returns the absolute value of its argument.\r\nMath.[b]Sin[/b]() returns the sine of the specified angle.\r\nMath.[b]Cos[/b]() returns the cosine of the specified angle.\r\nMath.[b]Pow[/b]() returns a specified number raised to the specified power.\r\nMath.[b]Round[/b]() rounds the decimal number to its nearest integral value.\r\nMath.[b]Sqrt[/b]() returns the square root of a specified number.\r\n\r\n[h2]Array[/h2]\r\nThe [b]Array [/b]class includes some static methods for manipulating arrays: [code format=\"cs\" ]int[] arr = {1, 2, 3, 4};\r\n\r\n[b]Array.Reverse[/b](arr);\r\n//arr = {4, 3, 2, 1}\r\n\r\n[b]Array.Sort[/b](arr);\r\n//arr = {1, 2, 3, 4}[/code]\r\n[h2]String[/h2] \r\n[code format=\"cs\" ]string s1 = \"some text\";\r\nstring s2 = \"another text\";\r\n\r\nString.[b]Concat[/b](s1, s2); // combines the two strings\r\n\r\nString.[b]Equals[/b](s1, s2); // returns false[/code]\r\n[h2]DateTime[/h2]\r\nThe [b]DateTime [/b]structure allows you to work with dates. [code format=\"cs\" codeId=\"891\"]DateTime.[b]Now[/b]; // represents the current date & time\r\nDateTime.[b]Today[/b]; // represents the current day\r\n\r\nDateTime.[b]DaysInMonth[/b](2016, 2); \r\n//return the number of days in the specified month [/code]\r\n[note]The [b]Console [/b]class is also an example of a static class. We use its static [b]WriteLine()[/b] method to output to the screen, or the static [b]ReadLine[/b]() method to get user input. \r\nThe [b]Convert [/b]class used to convert value types is also a static class.[/note]"}]}}