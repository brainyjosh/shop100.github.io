{"lesson":{"id":2361,"name":"Initialization","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":4834,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96738,"text":"One","isCorrect":false,"properties":{}},{"id":96739,"text":"None","isCorrect":false,"properties":{}},{"id":96740,"text":"As many as you define","isCorrect":true,"properties":{}}],"question":"How many initializers can a class have?","textContent":"[h1]Initialization[/h1]\r\n\r\n[b][/b]The process of preparing an instance of a class, structure, or enumeration for use is called [b]initialization[/b]. It involves setting an initial value for each property stored in that instance and performing any other setup or initialization that is required before the new instance is ready for use.\r\nClasses and structures [b]must [/b]set all of their stored properties to an appropriate initial value prior to creation of an instance.\r\n[b]Initializers [/b]are called to create a new instance of a particular type. In its simplest form, an initializer is like an instance method with no parameters, and is written using the [b]init [/b]keyword: [code format=\"swift\"]struct Fahrenheit {\r\n   var temp: Double\r\n   [b]init()[/b] {\r\n     temp = 32.0\r\n   }\r\n}\r\nvar f = Fahrenheit()[/code]\r\nAs part of an initializer's definition, initialization parameters define the types and names of values that customize the initialization process.[code format=\"swift\"]struct Celsius {\r\n  var tempInCelsius: Double\r\n  [b]init[/b](fromFahrenheit fahrenheit: Double) {\r\n    tempInCelsius = (fahrenheit - 32.0) / 1.8\r\n  }\r\n  [b]init[/b](fromKelvin kelvin: Double) {\r\n    tempInCelsius = kelvin - 273.15\r\n  }\r\n}\r\nlet boilingPoint = Celsius(fromFahrenheit: 212.0)\r\nlet freezingPoint = Celsius(fromKelvin: 273.15)\r\n[/code]\r\nThe example above defines a structure called [b]Celsius[/b], which implements two custom initializers called [b]init(fromFahrenheit:)[/b] and [b]init(fromKelvin:)[/b]. This initializes a new instance of the structure with a value from a different temperature scale.\r\n[note]When you assign a default value to a stored property, or set its initial value within an initializer, the value of that property is set directly, without calling any property observers.[/note]"},{"id":4835,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96741,"text":"init","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96742,"text":"a:","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96743,"text":"22","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define an initializer for the class Person, and then declare two instances, one 18 years old, another one 22:\r\n[!raw!]\r\nclass Person {\r\n  var age:Int\r\n  {0} (a:Int) {\r\n    age = a\r\n  }\r\n}\r\nlet p1 = Person({1}18)\r\nlet p2 = Person(a:{2})","textContent":"[h1]Initializers[/h1]\r\n\r\nIn the case of structure types that have no defined custom initializers, Swift automatically provides a [b]memberwise initializer[/b], even if the structure types have stored properties that do not have default values.\r\nThe [i]Size [/i]structure automatically receives an [b]init(width:height:)[/b] memberwise initializer, which you can use to initialize a new Size instance: [code format=\"swift\"]struct Size {\r\n  var width = 0.0, height = 0.0\r\n}\r\nlet twoByTwo = Size(width: 2.0, height: 2.0)[/code]\r\n[h2]Class Initialization[/h2]\r\n\r\nAll stored properties of a class - including any properties inherited from its superclass - [b]must [/b]be assigned an initial value during initialization. In other words, assign a default value or create an initializer for the properties of the class.\r\nThe structure from the above example would have the following form as a class with an initializer: [code format=\"swift\"]class Size {\r\n  var width:Double, height:Double\r\n  init(w:Double, h:Double) {\r\n    width = w\r\n    height = h\r\n  }\r\n}\r\nlet twoByTwo = Size(w: 2.0, h: 2.0)[/code]"},{"id":4836,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96744,"text":"required","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Define an initializer so that every subclass of the class is required to implement it.\r\n[!raw!]\r\nclass SomeClass {\r\n   {0} init() {\r\n     print(\"Init\")\r\n   }\r\n}","textContent":"[h1]Required Initializers[/h1]\r\n\r\nWrite the [b]required [/b]modifier before the definition of a class initializer to indicate that every subclass of the class must implement that initializer: [code format=\"swift\"]class SomeClass {\r\n   [b]required [/b]init() {\r\n     // initializer implementation goes here\r\n   }\r\n}[/code]\r\nYou must also insert the [b]required [/b]modifier before every subclass implementation of a required initializer. This indicates that the initializer requirement applies to further subclasses along the chain. Do not write the [i]override [/i]modifier when overriding a required designated initializer:[code format=\"swift\"]class SomeSubclass: SomeClass {\r\n   [b]required [/b]init() {\r\n     // subclass implementation goes here\r\n   }\r\n}[/code]\r\n[note]It's not necessary to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initializer.[/note]"}]}}