{"lesson":{"id":2678,"name":"Inheritance","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":5557,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103887,"text":"The Base class","isCorrect":true,"properties":{}},{"id":103888,"text":"The Derived class","isCorrect":false,"properties":{}},{"id":103889,"text":"The Main class","isCorrect":false,"properties":{}}],"question":"Assume the Employee class inherits the members of the Person class. What is the Person class called?","textContent":"[h1]Inheritance[/h1]\r\n\r\n[b]Inheritance[/b] allows us to define a class based on another class. This makes creating and maintaining an application easy.\r\nThe class whose properties are inherited by another class is called the [b]Base [/b]class. The class which inherits the properties is called the [b]Derived [/b]class.\r\nFor example, base class [b]Animal[/b] can be used to derive [b]Cat[/b] and [b]Dog[/b] classes.\r\nThe derived class inherits all the features from the base class, and can have its own additional features. [img id=\"2465\" width=\"100%\"]"},{"id":5558,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103898,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103899,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to derive Cat from Animal:\r\n[!raw!]\r\n{0} Cat {1} Animal {\r\n  // some code\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nLet's define our base class [b]Animal[/b]: [code format=\"cs\" ]class Animal {\r\n  public int Legs {get; set;}\r\n  public int Age {get; set;}\r\n}[/code]\r\nNow we can derive class [b]Dog[/b] from it: [code format=\"cs\" ]class Dog [b]:[/b] Animal {\r\n  public Dog() {\r\n    Legs = 4;\r\n  }\r\n  public void Bark() {\r\n    Console.Write(\"Woof\");\r\n  }\r\n}[/code]\r\nNote the syntax for a derived class. A [b]colon[/b] and the name of the [b]base[/b] class follow the name of the derived class.\r\nAll public members of [b]Animal[/b] become public members of [b]Dog[/b]. That is why we can access the [b]Legs[/b] member in the [b]Dog[/b] constructor.\r\nNow we can instantiate an object of type [b]Dog[/b] and access the inherited members as well as call its own [b]Bark[/b] method.[code format=\"cs\" codeId=\"895\"]static void Main(string[] args) {\r\n  Dog d = new Dog();\r\n  Console.WriteLine([b]d.Legs[/b]);\r\n  // Outputs 4\r\n\r\n  [b]d.Bark()[/b];\r\n  //Outputs \"Woof\"\r\n}[/code]\r\nA base class can have multiple derived classes. For example, a [b]Cat[/b] class can inherit from [b]Animal[/b].\r\n[note]Inheritance allows the derived class to reuse the code in the base class without having to rewrite it. And the derived class can be customized by adding more members. In this manner, the derived class extends the functionality of the base class.[/note]"},{"id":5559,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103906,"text":"one","isCorrect":true,"properties":{}},{"id":103907,"text":"multiple","isCorrect":false,"properties":{}},{"id":103908,"text":"two","isCorrect":false,"properties":{}}],"question":"How many base classes can one class have?","textContent":"[h1]Inheritance[/h1]\r\n\r\nA derived class inherits all the members of the base class, including its methods. \r\n[b]For example:[/b] [code format=\"cs\" codeId=\"896\"]class Person {\r\n  public void Speak() {\r\n    Console.WriteLine(\"Hi there\");\r\n  }\r\n}\r\nclass Student : Person {\r\n  int number;\r\n}\r\nstatic void Main(string[] args) {\r\n  Student s = new Student();\r\n[b]  s.Speak()[/b];\r\n  //Outputs \"Hi there\"\r\n}[/code]\r\nWe created a [b]Student [/b]object and called the [b]Speak [/b]method, which was declared in the base class [b]Person[/b].\r\n[note]C# does not support multiple inheritance, so you cannot inherit from multiple classes.\r\nHowever, you can use [b]interfaces [/b]to implement multiple inheritance. You will learn more about [b]interfaces [/b]in the coming lessons.[/note]"}]}}