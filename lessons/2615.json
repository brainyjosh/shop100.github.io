{"lesson":{"id":2615,"name":"Encapsulation","type":0,"mode":1,"videoID":null,"tags":"encapsulation","quizzes":[{"id":5454,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103443,"text":"Hide details of a class realization","isCorrect":true,"properties":{}},{"id":103444,"text":"Declare a method","isCorrect":false,"properties":{}},{"id":103445,"text":"Assign values to variables","isCorrect":false,"properties":{}}],"question":"Encapsulation allows you to:","textContent":"[h1]Encapsulation[/h1]\r\n\r\nPart of the meaning of the word [b]encapsulation [/b]is the idea of \"surrounding\" an entity, not just to keep what's inside together, but also to protect it.\r\nIn programming, encapsulation means more than simply combining members together within a class; it also means restricting access to the inner workings of that class.\r\nEncapsulation is implemented by using [b]access modifiers[/b]. An access modifier defines the scope and visibility of a class member.\r\n[note]Encapsulation is also called[b] information hiding[/b].[/note]"},{"id":5455,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103454,"text":"private","isCorrect":false,"properties":{}},{"id":103455,"text":"protected","isCorrect":false,"properties":{}},{"id":103456,"text":"closed","isCorrect":true,"properties":{}},{"id":103457,"text":"internal","isCorrect":false,"properties":{}}],"question":"Which one is NOT an access modifier in C#?","textContent":"[h1]Encapsulation[/h1]\r\n\r\nC# supports the following access modifiers: [b]public[/b], [b]private[/b], [b]protected[/b], [b]internal[/b], [b]protected internal[/b].\r\nAs seen in the previous examples, the [b]public [/b]access modifier makes the member accessible from the outside of the class. \r\nThe [b]private [/b]access modifier makes members accessible only from within the class and hides them from the outside.\r\n[note][b]protected [/b]will be discussed later in the course.[/note]"},{"id":5456,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103479,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103480,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103481,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a Person class, hide the age member, and make it accessible through the GetAge method.\r\n[!raw!]\r\n{0} Person {\r\n  private int age;\r\n  {1} int GetAge() {\r\n    {2} age;\r\n  }\r\n  public void SetAge(int n) {\r\n    age = n;\r\n  }\r\n}","textContent":"[h1]Encapsulation[/h1]\r\n\r\nTo show encapsulation in action, letâ€™s consider the following example: [code format=\"cs\" codeId=\"868\"]class BankAccount\r\n{\r\n  [b]private [/b]double balance=0;\r\n  [b]public [/b]void Deposit(double n)\r\n  {\r\n    balance += n;\r\n  }\r\n  [b]public [/b]void Withdraw(double n)\r\n  {\r\n    balance -= n;\r\n  }\r\n  public double GetBalance()\r\n  {\r\n    return balance;\r\n  }\r\n}[/code]\r\nWe used encapsulation to hide the [b]balance [/b]member from the outside code. Then we provided restricted access to it using public methods. The class data can be read through the [b]GetBalance [/b]method and modified only through the [b]Deposit [/b]and [b]Withdraw [/b]methods.\r\nYou cannot directly change the [b]balance [/b]variable. You can only view its value using the public method. This helps maintain data integrity.\r\nWe could add different verification and checking mechanisms to the methods to provide additional security and prevent errors.\r\n[note]In summary, the benefits of encapsulation are:\r\n- Control the way data is accessed or modified.\r\n- Code is more flexible and easy to change with new requirements.\r\n- Change one part of code without affecting other parts of code.[/note]"}]}}