{"lesson":{"id":2338,"name":"Basic Operators: Part 2","type":0,"mode":1,"videoID":null,"tags":"operators","quizzes":[{"id":4741,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96531,"text":"b != a","isCorrect":false,"properties":{}},{"id":96532,"text":"b > a","isCorrect":false,"properties":{}},{"id":96533,"text":"a <= a","isCorrect":false,"properties":{}},{"id":96534,"text":"b <= a","isCorrect":true,"properties":{}}],"question":"Which of the following statements returns FALSE, if a = 1 and b = 2?","textContent":"[h1]Comparison Operators[/h1]\r\n\r\nSwift supports all of the standard comparison operators in C:\r\nEqual to (a == b)\r\nNot equal to (a != b)\r\nGreater than (a > b)\r\nLess than (a < b)\r\nGreater than or equal to (a >= b)\r\nLess than or equal to (a <= b)\r\n\r\nEach of the comparison operators returns a [b]Bool [/b]value indicating whether or not the statement is true:[code format=\"swift\"]1 == 1   // true, because 1 is equal to 1\r\n2 != 1   // true, because 2 is not equal to 1\r\n2 > 1    // true, because 2 is greater than 1\r\n1 < 2    // true, because 1 is less than 2\r\n1 >= 1   // true, because 1 is greater than or equal to 1\r\n2 <= 1   // false, because 2 is not less than or equal to 1[/code]\r\n[note]Swift also provides two identity operators, === and !==, which test whether two object references both refer to the same object instance.[/note]"},{"id":4742,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104396,"text":"90","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Guess the value stored in the \"rowHeight\" variable value of the following code:\r\nlet height = 40 \r\nlet isCheck = true \r\nlet rowHeight = height + (isCheck ? 50 : 20)","textContent":"[h1]Ternary Conditional Operator[/h1]\r\n\r\nThe ternary conditional operator is a special operator with three parts, taking the form[b] (question ? answer1 : answer2)[/b].\r\n\r\nThis operator acts as a shortcut in evaluating one of two expressions, based on whether the question is true or false. For a true question, it evaluates [b]answer1 [/b]and returns its value; otherwise, it evaluates [b]answer2 [/b]and returns its value. [code format=\"swift\"]gender == 0 ? print(\"male\") : print(\"female\")[/code]\r\n[note]The example above will evaluate the expression [b]gender == 0[/b]. If true, it prints \"male\". Otherwise, it prints \"female\".[/note]"},{"id":4743,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96536,"text":"1...5","isCorrect":false,"properties":{}},{"id":96537,"text":"1..<5","isCorrect":true,"properties":{}},{"id":96538,"text":"1...4","isCorrect":true,"properties":{}},{"id":96539,"text":"1..<4","isCorrect":false,"properties":{}}],"question":"Which of the following operators return the numbers 1 to 4?","textContent":"[h1]Range Operators[/h1]\r\n\r\nSwift offers two range operators, which are shortcuts for expressing a range of values.\r\n\r\nThe [b]closed range[/b] [b]operator[/b] (a...b) defines a range running from [b]a[/b] to [b]b[/b], and includes the values [b]a[/b] and [b]b[/b]. The value of [b]a[/b] must not be greater than that of [b]b[/b].[code format=\"swift\"]1...3 //1, 2, 3[/code]\r\nThe [b]half-open range[/b] [b]operator[/b] (a..<b) defines a range that runs from [b]a[/b] to [b]b[/b], but does not include [b]b[/b]. It is said to be half-open because it contains its first value, but not its final value. As with the closed range operator, the value of [b]a[/b] must not be greater than that of [b]b[/b].[code format=\"swift\"]1..<3 //1, 2[/code]\r\n[note]You will understand the functions of range operators in the upcoming lessons.[/note]"},{"id":4744,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":62114,"text":"Fail","isCorrect":true,"properties":{}},{"id":62115,"text":"Success","isCorrect":false,"properties":{}},{"id":62116,"text":"Undefined","isCorrect":false,"properties":{}}],"question":"Name the output value of the following expression, if name = true, pass = false?\r\nname && pass ? print(\"Success\") : print(\"Fail\")","textContent":"[h1]Logical Operators[/h1]\r\n\r\nLogical operators modify or combine the Boolean logic values [b]true [/b]and [b]false[/b]. Swift supports the three standard logical operators found in C-based languages:\r\n\r\nLogical [b]NOT [/b]operator (!a): Inverts a Boolean value so that true becomes false and false becomes true.\r\n\r\nLogical [b]AND [/b]operator (a && b): Creates logical expressions in which both values must be true for the overall expression to be true.\r\n\r\nLogical [b]OR [/b]operator (a || b): An infixed operator made from two adjacent pipe characters. It creates logical expressions in which only one of the two values has to be true for the overall expression to be true.\r\n[note]Multiple logical operators can be combined to create longer compound expressions.\r\nThe logical operators && and || are left-associative, meaning that compound expressions with multiple logical operators evaluate the leftmost subexpression before the right.[/note]"}]}}