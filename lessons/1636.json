{"lesson":{"id":1636,"name":"Function Parameters","type":0,"mode":1,"videoID":"-87KQS-rZCA","tags":"functions","quizzes":[{"id":2896,"number":1,"videoStart":4.0,"videoEnd":53.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94930,"text":"x","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94931,"text":"x","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing parts of the following code to define a function printValue() which takes one parameter named x and prints its value.\r\n[!raw!]\r\nvoid printValue(int {0})\r\n{\r\n  cout << {1} << endl;\r\n}","textContent":"[h1]Function Parameters[/h1]\r\n\r\nFor a function to use [b]arguments[/b], it must declare formal [b]parameters[/b], which are variables that accept the argument's values.\r\n\r\nFor example: [code format=\"cpp\"]void printSomething([b]int x[/b]) \r\n{\r\n   cout << x;\r\n}[/code]\r\nThis defines a function that takes one [b]integer [/b]parameter and prints its value.\r\n[note]Formal parameters behave within the function similarly to other local variables. They are created upon entering the function, and are destroyed upon exiting the function.[/note]"},{"id":2897,"number":2,"videoStart":52.5,"videoEnd":228.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97746,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97747,"text":"20","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function printValue with one parameter of type int, and call that function from main passing 20 to it as its parameter.\r\n[!raw!]\r\nvoid printValue({0} x) {\r\n  cout << x << endl;\r\n}\r\nint main()\r\n{\r\n  printValue({1});\r\n  return 0;\r\n}","textContent":"[h1]Function Parameters[/h1]\r\n\r\nOnce parameters have been defined, you can pass the corresponding arguments when the function is called.\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"234\"]#include <iostream>\r\nusing namespace std;\r\n\r\nvoid printSomething(int x) {\r\n  cout << x;\r\n}\r\n\r\nint main() {\r\n[b]  [/b]printSomething[b](42);[/b]\r\n}\r\n\r\n// Outputs 42[/code]\r\nThe value 42 is passed to the function as an [b]argument[/b], and is assigned to the formal [b]parameter [/b]of the function: [b]x[/b].\r\n[note]Making changes to the parameter within the function does not alter the argument.[/note]"},{"id":2899,"number":3,"videoStart":229.0,"videoEnd":295.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97751,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97752,"text":"5","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97753,"text":"6","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Call the printValue function from main 3 times, passing 4, 5, and 6 values to it.\r\n[!raw!]\r\nint main()\r\n{\r\n  printValue({0});\r\n  printValue({1});\r\n  printValue({2});\r\n  return 0;\r\n}","textContent":"[h1]Function Parameters[/h1]\r\n\r\nYou can pass different arguments to the same function.\r\n For example: [code format=\"cpp\" ]int timesTwo(int x) {\r\n   return x*2;\r\n}[/code]\r\nThe function defined above takes one integer parameter and returns its value, multiplied by 2.\r\n\r\nWe can now use that function with different arguments. [code format=\"cpp\" codeId=\"235\"]int main() {\r\n  cout << timesTwo(8);\r\n  // Outputs 16\r\n\r\n  cout <<timesTwo(5);\r\n  // Outputs 10\r\n\r\n  cout <<timesTwo(42);\r\n  // Outputs 84\r\n}[/code]"}]}}