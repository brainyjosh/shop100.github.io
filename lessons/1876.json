{"lesson":{"id":1876,"name":"Selection Operator","type":0,"mode":1,"videoID":"2RP4f9beidc","tags":"classes","quizzes":[{"id":3669,"number":1,"videoStart":50.0,"videoEnd":136.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95049,"text":"Makes programs run faster","isCorrect":false,"properties":{}},{"id":95050,"text":"They prevent a header file from being included more than once within one file","isCorrect":true,"properties":{}},{"id":95051,"text":"They are needed by std namespace","isCorrect":false,"properties":{}}],"question":"What is the purpose of #ifndef #define directives in header files?","textContent":"[h1]#ifndef & #define[/h1]\r\n\r\nWe created separate header and source files for our class, which resulted in this header file.[code format=\"cpp\"][b]#ifndef [/b]MYCLASS_H\r\n[b]#define [/b]MYCLASS_H\r\n\r\nclass MyClass\r\n{\r\n  public:\r\n  MyClass();\r\n  protected:\r\n  private:\r\n};\r\n\r\n[b]#endif [/b]// MYCLASS_H [/code]\r\n[b]ifndef [/b]stands for \"if not defined\". The first pair of statements tells the program to define the [b]MyClass [/b]header file if it has not been defined already.\r\n[b]endif [/b]ends the condition.\r\n[note]This prevents a header file from being included more than once within one file.[/note]"},{"id":3670,"number":2,"videoStart":142.0,"videoEnd":250.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95052,"text":"class ","isCorrect":true,"properties":{}},{"id":95053,"text":"public","isCorrect":true,"properties":{}},{"id":95054,"text":"myPrint","isCorrect":true,"properties":{}},{"id":95055,"text":"prototype","isCorrect":false,"properties":{}},{"id":95056,"text":"function","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to prototype the myPrint function in Sally class declaration.\r\n[!raw!]\r\n{0} Sally {\r\n{1}:\r\n Sally();\r\n void {2}();\r\n};","textContent":"[h1]Member Functions[/h1]\r\n\r\nLet's create a sample function called [b]myPrint()[/b] in our class. \r\n[b]MyClass.h[/b] [code format=\"cpp\"]class MyClass\r\n{\r\n  public:\r\n   MyClass();\r\n   [b]void myPrint();[/b]\r\n};[/code]\r\n[b]MyClass.cpp[/b] [code format=\"cpp\"]#include \"MyClass.h\"\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nMyClass::MyClass() {\r\n}\r\n\r\n[b]void MyClass::myPrint() {\r\n  cout <<\"Hello\"<<endl;\r\n}[/b][/code]\r\n[note]Since [b]myPrint()[/b] is a regular member function, it's necessary to specify its [b]return type[/b] in both the declaration and the definition.[/note]"},{"id":3671,"number":3,"videoStart":251.5,"videoEnd":320.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97817,"text":"Sally","isCorrect":true,"properties":{}},{"id":97818,"text":"obj","isCorrect":true,"properties":{}},{"id":97819,"text":"myPrint()","isCorrect":true,"properties":{}},{"id":97820,"text":"dot","isCorrect":false,"properties":{}},{"id":97821,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare an object of class Sally in the main function, and call its myPrint member function using the . (dot) operator.\r\n[!raw!]\r\nint main() {\r\n {0} obj;\r\n {1}.{2};\r\n}","textContent":"[h1]Dot Operator[/h1]\r\n\r\nNext, we'll create an object of the type [b]MyClass[/b], and call its [b]myPrint()[/b] function using the dot (.) operator:[code format=\"cpp\" codeId=\"259\"]#include \"MyClass.h\"\r\n\r\nint main() {\r\n  MyClass obj;\r\n  [b]obj.myPrint();[/b]\r\n}\r\n\r\n// Outputs \"Hello\"[/code]"},{"id":3672,"number":4,"videoStart":321.0,"videoEnd":371.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95062,"text":"*","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95063,"text":"&","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a pointer to ''obj'':\r\n[!raw!]\r\nSally obj;\r\nSally {0}sallyPtr = {1}obj;","textContent":"[h1]Pointers [/h1]\r\n\r\nWe can also use a [b]pointer [/b]to access the object's members. \r\nThe following pointer points to the [b]obj [/b]object:[code format=\"cpp\"]MyClass obj;\r\n[b]MyClass *ptr = &obj;[/b][/code]\r\n[note]The type of the pointer is [b]MyClass[/b],[b] [/b]as it points to an object of that type.[/note]"},{"id":3673,"number":5,"videoStart":379.0,"videoEnd":412.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97822,"text":"->","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing arrow member selection operator to call myPrint() function via sallyPtr.\r\n[!raw!]\r\nSally obj;\r\nSally *sallyPtr = &obj;\r\nsallyPtr{0}myPrint();","textContent":"[h1]Selection Operator[/h1]\r\n\r\nThe [b]arrow member selection operator (->)[/b] is used to access an object's members with a pointer.[code format=\"cpp\" codeId=\"260\"]MyClass obj;\r\nMyClass *ptr = &obj;\r\n[b]ptr->myPrint();[/b][/code]\r\n[note]When working with an object, use the [b]dot [/b]member selection operator (.).\r\nWhen working with a pointer to the object, use the [b]arrow [/b]member selection operator (->).[/note]"}]}}