{"lesson":{"id":2694,"name":"Generic Classes","type":0,"mode":1,"videoID":null,"tags":"generics","quizzes":[{"id":5600,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104292,"text":"<T>","isCorrect":true,"properties":{}},{"id":104293,"text":"T","isCorrect":true,"properties":{}},{"id":104294,"text":"public","isCorrect":true,"properties":{}},{"id":104295,"text":"template","isCorrect":false,"properties":{}},{"id":104296,"text":"~Store","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a generic Store class with a generic data member x, which is initialized in the constructor.\r\n[!raw!]\r\nclass Store{0} {\r\n  {1} x;\r\n  {2} Store(T val) {\r\n    x = val;\r\n  }\r\n}","textContent":"[h1]Generic Classes[/h1]\r\n\r\nGeneric types can also be used with classes.\r\nThe most common use for generic classes is with collections of items, where operations such as adding and removing items from the collection are performed in basically the same way regardless of the type of data being stored. One type of collection is called a stack. Items are \"pushed\", or added to the collection, and \"popped\", or removed from the collection. A stack is sometimes called a Last In First Out (LIFO) data structure.\r\n[b]For example: [/b][code format=\"cs\" ]class Stack[b]<T> [/b]{\r\n  int index=0;\r\n  [b]T[/b][] innerArray = new [b]T[/b][100];\r\n  public void Push([b]T[/b] item) {\r\n    innerArray[index++] = item; \r\n  }\r\n  public [b]T[/b] Pop() {\r\n    return innerArray[--index]; \r\n  }\r\n  public [b]T[/b] Get(int k) { return innerArray[k]; }\r\n}[/code]\r\nThe generic class stores elements in an array. As you can see, the generic type [b]T[/b] is used as the type of the array, the parameter type for the [b]Push [/b]method, and the return type for the [b]Pop [/b]and [b]Get [/b]methods.\r\nNow we can create objects of our generic class: [code format=\"cs\" ]Stack[b]<int>[/b] intStack = new Stack[b]<int>[/b]();\r\nStack[b]<string>[/b] strStack = new Stack[b]<string>[/b]();\r\nStack[b]<Person>[/b] PersonStack = new Stack[b]<Person>[/b]();[/code]\r\nWe can also use the generic class with custom types, such as the custom defined [b]Person [/b]type.\r\n[note]In a generic class we do not need to define the generic type for its methods, because the generic type is already defined on the class level.[/note]"},{"id":5601,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104300,"text":"Yes","isCorrect":true,"properties":{}},{"id":104301,"text":"No","isCorrect":false,"properties":{}},{"id":104302,"text":"Only if it is abstract","isCorrect":false,"properties":{}}],"question":"Can a custom class be used as the type for the generic class?","textContent":"[h1]Generic Classes[/h1]\r\n\r\nGeneric class methods are called the same as for any other object: [code format=\"cs\" codeId=\"917\"]Stack<int> intStack = new Stack<int>();\r\nintStack.Push(3);\r\nintStack.Push(6);\r\nintStack.Push(7);\r\n            \r\nConsole.WriteLine(intStack.Get(1));\r\n//Outputs 6[/code]"}]}}