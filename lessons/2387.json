{"lesson":{"id":2387,"name":"Modifying an Array","type":0,"mode":1,"videoID":null,"tags":"arrays","quizzes":[{"id":4769,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96594,"text":"+=","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96595,"text":"count","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to append the additional items to the array and print the item count. \r\n[!raw!]\r\nvar myList = [\"A\", \"B\"]\r\nmyList {0} [\"C\", \"D\", \"E\"]\r\nprint(myList.{1})","textContent":"[h1]Modifying an Array[/h1]\r\n\r\nAn array's [b]append [/b]method allows you to add a new item at the array's end.[code format=\"swift\"]shoppingList.[b]append[/b](\"Flour\")[/code]\r\nAlternatively, add an array of one or more compatible items using the [b]addition assignment operator[/b] (+=):[code format=\"swift\"]shoppingList [b]+=[/b] [\"Juice\"]\r\nshoppingList [b]+=[/b] [\"Chocolate\", \"Cheese\"][/code]\r\n[h2]Accessing an Array[/h2]\r\n\r\nUsing subscript syntax, you can retrieve a value from the array, inserting the [b]index [/b]of the value you want to retrieve within [b]square brackets[/b] immediately after the name of the array:[code format=\"swift\"]var firstItem = shoppingList[b][0][/b][/code]\r\n[note]Arrays in Swift are always zero-indexed, meaning that the first item's index is [b]0[/b], rather than 1, as you might expect.\r\nAccessing or modifying a value for an index that is outside of an array's existing bounds triggers a runtime error. Check the validity of an index prior to using it by comparing it with the array's [b]count [/b]property.[/note]"},{"id":4770,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96596,"text":"True","isCorrect":true,"properties":{}},{"id":96597,"text":"False","isCorrect":false,"properties":{}}],"question":"The subscript syntax is used to replace values in an array. This works even with replacement sets of values of different lengths from the range to be replaced.","textContent":"[h1]Modifying an Array[/h1]\r\n\r\nUse subscript syntax to change an existing value at a given index:[code format=\"swift\"]shoppingList[0] = \"Two apples\"[/code]\r\nSubscript syntax also changes a range of values all at once. This will even work with a replacement set of values with a length that is different from the original range. \r\nIn the following example, the elements with index 4, 5, 6 are replaced with two new values.[code format=\"swift\"]shoppingList[4...6] = [\"Bananas\", \"Oranges\"][/code]\r\n[note]Don't use subscript syntax to append a new item to an array.[/note]"},{"id":4771,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96598,"text":"removeLast()","isCorrect":true,"properties":{}},{"id":96599,"text":"insert","isCorrect":true,"properties":{}},{"id":96600,"text":"atIndex","isCorrect":true,"properties":{}},{"id":96601,"text":"count","isCorrect":true,"properties":{}},{"id":96602,"text":"remove()","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to remove the last item from the array \"temp\", insert a new item at the beginning of the array, and print the number of elements contained in the array.\r\n[!raw!]\r\nlet r = temp.{0}\r\ntemp.{1}(\"New item\", {2}: 0)\r\nprint(temp.{3})","textContent":"[h1]Modifying an Array[/h1]\r\n\r\nAn array's [b]insert [/b]method will insert an item into the array at a specified index.[code format=\"swift\"]shoppingList.[b]insert[/b](\"Syrup\", [b]atIndex[/b]: 0)[/code]\"Syrup\" is now the first item in the list.\r\n\r\nSimilarly, the [b]removeAtIndex [/b]method allows you to remove an item from the array. This method removes the item at the specified index, and also returns the removed item. Note that the returned value can be ignored if it is not needed.[code format=\"swift\"]let syrup = shoppingList.[b]removeAtIndex[/b](0)\r\n[/code]\r\n[note]When an item is removed from an array, Swift closes any gaps that have been created.[/note]\r\nIf you want to remove the final item from an array, use the[b] removeLast() [/b]method rather than the [b]removeAtIndex [/b]method to avoid the need to query the array's count property:[code format=\"swift\"]let apples = shoppingList.[b]removeLast()[/b]\r\n// the last item has just been removed[/code]"},{"id":4772,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96603,"text":"for","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96604,"text":"in","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96605,"text":"+=","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to iterate over the entire array, and calculate the sum of all elements in the \"sum\" variable.\r\n[!raw!]\r\nvar sum = 0\r\n{0} item {1} myArr{\r\nsum {2} item\r\n}\r\nprint(sum)","textContent":"[h1]Iterating Over an Array[/h1]\r\n\r\nThe [i]for-in [/i]loop allows you to iterate over the entire set of values in an array. [code format=\"swift\"][b]for [/b]item [b]in [/b]shoppingList {\r\n    print(item)\r\n}[/code]\r\nAlternatively, use the [b]enumerate()[/b] method to iterate over an array when you need the integer index for each item in addition to its value. This returns a [i]tuple [/i]for each item in the array that indicates that item's index and value. You can decompose the tuple into temporary constants or variables as part of the iteration:[code format=\"swift\"]for [b](index, value)[/b] [b]in [/b]shoppingList.[b]enumerate()[/b] {\r\n    print(\"Item \\(index + 1): \\(value)\")\r\n}[/code]\r\nThis will print the index and the value of the elements in the array.\r\n[note][b]Tuples [/b]will be discussed in the upcoming lessons.[/note]"}]}}