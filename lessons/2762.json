{"lesson":{"id":2762,"name":"Strings","type":0,"mode":1,"videoID":null,"tags":"strings","quizzes":[{"id":5858,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112804,"text":"'","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112805,"text":"text","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a valid string and output it:\r\n[!raw!]\r\ntext = 'Welcome{0}\r\nputs {1}","textContent":"[h1]Strings[/h1]\r\n\r\nAs mentioned in the previous lessons, a [b]string [/b]is text between single or double quotation marks. \r\nHowever, some characters can't be directly included in a string. For instance, single quotes can't be directly included in a single quote string, because this would designate the end of the string. Characters like these can be included in a string by using an [b]escape sequence[/b], which is indicated by a [b]backslash (\\)[/b]:[code format=\"rb\" codeId=\"980\"]text = 'Ruby[b]\\[/b]'s syntax is fun'\r\nputs text\r\n# outputs Ruby's syntax is fun[/code]\r\nA string formed with double quotation marks can also include the [b]\\n[/b] escape sequence, which represents a new line. [code format=\"rb\" codeId=\"981\"]text = \"Hello [b]\\n[/b] World\"\r\nputs text\r\n\r\n# Outputs:\r\n# Hello\r\n#  World[/code]\r\n[note]Only the \\' and \\\\ escape sequences can be used with single quote strings. [/note]"},{"id":5859,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112810,"text":"#","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112811,"text":"/","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to embed the division of a and b in the string:\r\n[!raw!]\r\na = 15\r\nb = 3\r\nres = \"The result is {0}{a{1}b}\" \r\nputs res","textContent":"[h1]String Interpolation[/h1]\r\n\r\nYou can embed any Ruby expression inside a double quote string using [b]#{ }[/b], just as you did with variable names. Ruby evaluates the placeholders and replaces them with values: [code format=\"rb\" codeId=\"982\"]a = 5\r\nb = 2\r\nputs \"The sum is #{a+b}\"\r\n# outputs \"The sum is 7\"[/code]"},{"id":5860,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112816,"text":"\"two\" + \"B\"","isCorrect":false,"properties":{}},{"id":112817,"text":"2 + 6","isCorrect":false,"properties":{}},{"id":112818,"text":"'7' + 2","isCorrect":true,"properties":{}},{"id":112819,"text":"\"2\" + 'one'","isCorrect":false,"properties":{}}],"question":"Which of the following produces an error?","textContent":"[h1]Concatenation[/h1]\r\n\r\nStrings can be joined using the + in a process called [b]concatenation[/b]. \r\nWhen concatenating strings, it doesn't matter whether they've been created with single or double quotes. [code format=\"rb\" codeId=\"983\"]a = \"Hi \"\r\nb = 'there'\r\nputs a+b\r\n# outputs \"Hi there\" [/code]\r\n[note]Even if your strings contain numbers, they are still added as strings rather than integers. Adding a string to a number produces an error, because even though they might look similar, they are two different entities: \"1\" is a string, whereas 1 is an integer.[/note]"},{"id":5861,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112829,"text":"14","isCorrect":false,"properties":{}},{"id":112830,"text":"77","isCorrect":true,"properties":{}},{"id":112831,"text":"22","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\nputs '7'*2","textContent":"[h1]Repeating a String[/h1]\r\n\r\nStrings can be repeated using the *  and an integer value.\r\nThe order of the string and the integer does matter: the string has to come first. \r\n[b]For example:[/b] [code format=\"rb\" codeId=\"984\"]a = \"abc\"\r\nputs a*3\r\n# outputs \"abcabcabc\"\r\n\r\nputs '5'*4\r\n# outputs 5555[/code]\r\n[note]Strings can't be multiplied by other strings.[/note]"}]}}