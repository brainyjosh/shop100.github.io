{"lesson":{"id":2469,"name":"Inheritance","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":5129,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98257,"text":"class Egg(Spam):","isCorrect":false,"properties":{}},{"id":98258,"text":"class (Spam)Egg:","isCorrect":false,"properties":{}},{"id":98259,"text":"class Spam(Egg):","isCorrect":true,"properties":{}}],"question":"Which piece of code shows a new class Spam inheriting from Egg?","textContent":"[h1]Inheritance[/h1]\r\n\r\n[b]Inheritance [/b]provides a way to share functionality between classes. \r\nImagine several classes, [b]Cat[/b], [b]Dog[/b], [b]Rabbit[/b] and so on. Although they may differ in some ways (only [b]Dog [/b]might have the method [b]bark[/b]), they are likely to be similar in others (all having the attributes [b]color [/b]and [b]name[/b]). \r\nThis similarity can be expressed by making them all inherit from a [b]superclass Animal[/b], which contains the shared functionality. \r\nTo inherit a class from another class, put the superclass name in parentheses after the class name.\r\n[b]Example: [/b][code format=\"py\" codeId=\"408\"]class Animal: \r\n  def __init__(self, name, color):\r\n    self.name = name\r\n    self.color = color\r\n\r\nclass Cat([b]Animal[/b]):\r\n  def purr(self):\r\n    print(\"Purr...\")\r\n        \r\nclass Dog([b]Animal[/b]):\r\n  def bark(self):\r\n    print(\"Woof!\")\r\n\r\nfido = Dog(\"Fido\", \"brown\")\r\nprint(fido.color)\r\nfido.bark()[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nbrown\r\nWoof!\r\n>>>[/code]"},{"id":5130,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98260,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the result of this code?\r\nclass A:\r\n  def method(self):\r\n    print(1)\r\n\r\nclass B(A):\r\n  def method(self):\r\n    print(2)\r\n\r\nB().method()","textContent":"[h1]Inheritance[/h1]\r\n\r\nA class that inherits from another class is called a [b]subclass[/b].\r\nA class that is inherited from is called a [b]superclass[/b].\r\nIf a class inherits from another with the same attributes or methods, it overrides them. [code format=\"py\" codeId=\"409\"]class Wolf: \r\n  def __init__(self, name, color):\r\n    self.name = name\r\n    self.color = color\r\n\r\n  def bark(self):\r\n    print(\"Grr...\")\r\n\r\nclass Dog(Wolf):\r\n  def bark(self):\r\n    print(\"Woof\")\r\n        \r\nhusky = Dog(\"Max\", \"grey\")\r\nhusky.bark()[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nWoof\r\n>>>[/code]\r\n[note]In the example above, [b]Wolf [/b]is the superclass, [b]Dog [/b]is the subclass.[/note]"},{"id":5131,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98261,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the result of this code?\r\nclass A:\r\n  def a(self):\r\n    print(1)\r\nclass B(A):\r\n  def a(self):\r\n    print(2)\r\n\t\r\nclass C(B):\r\n  def c(self):\r\n    print(3)\r\n\t\t\r\nc = C()\r\nc.a()","textContent":"[h1]Inheritance[/h1]\r\n\r\nInheritance can also be indirect. One class can inherit from another, and that class can inherit from a third class. \r\n[b]Example:[/b] [code format=\"py\" codeId=\"410\"]class A:\r\n  def method(self):\r\n    print(\"A method\")\r\n    \r\nclass B(A):\r\n  def another_method(self):\r\n    print(\"B method\")\r\n    \r\nclass C(B):\r\n  def third_method(self):\r\n    print(\"C method\")\r\n    \r\nc = C()\r\nc.method()\r\nc.another_method()\r\nc.third_method()[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nA method\r\nB method\r\nC method\r\n>>>[/code]\r\n[note]However, circular inheritance is not possible.[/note]"},{"id":5132,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98262,"text":"The first class that inherits from it","isCorrect":false,"properties":{}},{"id":98263,"text":"The class it is an instance of","isCorrect":false,"properties":{}},{"id":98264,"text":"The class it inherits from","isCorrect":true,"properties":{}}],"question":"What is the superclass of a class?","textContent":"[h1]Inheritance[/h1]\r\n\r\nThe function [b]super [/b]is a useful inheritance-related function that refers to the parent class. It can be used to find the method with a certain name in an object's superclass.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"411\"]class A:\r\n  def spam(self):\r\n    print(1)\r\n\r\nclass B(A):\r\n  def spam(self):\r\n    print(2)\r\n    [b]super().spam()[/b]\r\n            \r\nB().spam()[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n2\r\n1    \r\n>>> [/code]\r\n[note][b]super().spam() [/b]calls the [b]spam [/b]method of the superclass.[/note]"}]}}