{"lesson":{"id":1715,"name":"Constructors","type":0,"mode":1,"videoID":"_b7odUc7lg0","tags":"constructors","quizzes":[{"id":3158,"number":1,"videoStart":4.0,"videoEnd":143.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97806,"text":"When the class is being declared","isCorrect":false,"properties":{}},{"id":97807,"text":"When a class object is created","isCorrect":true,"properties":{}},{"id":97808,"text":"Never","isCorrect":false,"properties":{}}],"question":"When is the constructor called?","textContent":"[h1]Constructors[/h1]\r\n\r\nClass [b]constructors [/b]are special member functions of a class. They are executed whenever new objects are created within that class.\r\n\r\nThe constructor's name is identical to that of the class. It has no return type, not even void.\r\n\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"256\"]class myClass {\r\n  public:\r\n[b]    myClass() {\r\n      cout <<\"Hey\";\r\n    }[/b]\r\n    void setName(string x) {\r\n      name = x;\r\n    }\r\n    string getName() {\r\n      return name;\r\n    }\r\n  private:\r\n    string name;\r\n};\r\n\r\nint main() {\r\n  myClass myObj;\r\n\r\n  return 0;\r\n}\r\n\r\n//Outputs \"Hey\"[/code]\r\n[note]Now, upon the creation of an object of type [b]myClass[/b], the constructor is automatically called.[/note]"},{"id":3159,"number":2,"videoStart":169.0,"videoEnd":224.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95019,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95020,"text":"my_class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95021,"text":"arg","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare the class my_class with its constructor.\r\n[!raw!]\r\n{0} my_class\r\n{\r\nprivate:\r\n int my_data;\r\npublic: \r\n {1}(int arg) { \r\n my_data = {2};\r\n }\r\n};","textContent":"[h1]Constructors[/h1]\r\n\r\n[b]Constructors [/b]can be very useful for setting initial values for certain member variables.\r\nA default constructor has no parameters. However, when needed, parameters can be added to a constructor. This makes it possible to assign an initial value to an object when it's created, as shown in the following example:[code format=\"cpp\"]class myClass {\r\n  public:\r\n[b]    myClass(string nm) {\r\n      setName(nm);\r\n    }[/b]\r\n    void setName(string x) {\r\n      name = x;\r\n    }\r\n    string getName() {\r\n      return name;\r\n    }\r\n  private:\r\n    string name;\r\n};[/code]\r\n[note]We defined a constructor, that takes one parameter and assigns it to the [b]name [/b]attribute using the [b]setName()[/b] method.[/note]"},{"id":3160,"number":3,"videoStart":225.0,"videoEnd":304.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97809,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97810,"text":"14","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare class MyClass with its constructor. In the main function create a MyClass object and pass the value 14 as its constructor argument.\r\n[!raw!]\r\n{0} MyClass {\r\nprivate:\r\n int myData;\r\npublic:\r\n MyClass(int arg) {\r\n  myData = arg;\r\n }\r\n};\r\nint main() {\r\n MyClass obj({1});\r\n}","textContent":"[h1]Constructors[/h1]\r\n\r\nWhen creating an object, you now need to pass the constructor's parameter, as you would when calling a function:[code format=\"cpp\" codeId=\"257\"]class myClass {\r\n  public:\r\n    [b]myClass(string nm) {\r\n      setName(nm);\r\n    }[/b]\r\n    void setName(string x) {\r\n      name = x;\r\n    }\r\n    string getName() {\r\n      return name;\r\n    }\r\n  private:\r\n    string name;\r\n};\r\n\r\nint main() {\r\n  [b]myClass ob1(\"David\");\r\n  myClass ob2(\"Amy\");[/b]\r\n  cout << ob1.getName();\r\n}\r\n//Outputs \"David\"[/code]\r\nWe've defined [b]two [/b]objects, and used the constructor to pass the initial value for the [b]name [/b]attribute for each object.\r\n[note]It's possible to have multiple constructors that take different numbers of parameters.[/note]"}]}}