{"lesson":{"id":2214,"name":"Drag&Drop API","type":0,"mode":1,"videoID":"VLqda-PlV1w","tags":"html5 drag-drop","quizzes":[{"id":4405,"number":1,"videoStart":3.0,"videoEnd":94.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97407,"text":"One","isCorrect":false,"properties":{}},{"id":97408,"text":"None","isCorrect":false,"properties":{}},{"id":97409,"text":"Multiple","isCorrect":true,"properties":{}},{"id":97410,"text":"Only two","isCorrect":false,"properties":{}}],"question":"How many times can HTML5 events be fired?","textContent":"[h1]Making Elements Draggable [/h1]\r\n\r\nThe drag and drop feature lets you \"grab\" an object and drag it to a different location.\r\nTo make an element draggable, just set the [b]draggable [/b]attribute to true: [code format=\"html\" ]<img [b]draggable[/b]=\"[b]true[/b]\" />[/code]\r\n[note]Any HTML element can be draggable.[/note]\r\nThe API for HTML5 drag and drop is event-based.\r\n\r\n[b]Example:[/b][code format=\"html\" ]<!DOCTYPE HTML>\r\n<html>\r\n   <head>\r\n   <script>\r\nfunction allowDrop(ev) {\r\n    ev.preventDefault();\r\n}\r\n\r\nfunction drag(ev) {\r\n    ev.dataTransfer.setData(\"text\", ev.target.id);\r\n}\r\n\r\nfunction drop(ev) {\r\n    ev.preventDefault();\r\n    var data = ev.dataTransfer.getData(\"text\");\r\n    ev.target.appendChild(document.getElementById(data));\r\n}\r\n   </script>\r\n   </head>\r\n<body>\r\n\r\n   <div id=\"box\" [b]ondrop[/b]=\"drop(event)\"\r\n   [b]ondragover[/b]=\"allowDrop(event)\"\r\n   style=\"border:1px solid black; \r\n   width:200px; height:200px\"></div>\r\n\r\n   <img id=\"image\" src=\"sample.jpg\" [b]draggable[/b]=\"true\"\r\n[b]   ondragstart[/b]=\"drag(event)\" width=\"150\" height=\"50\" alt=\"\" />\r\n\r\n</body>\r\n</html>[/code]\r\n[b][u]What to Drag[/u][/b]\r\nWhen the element is dragged, the [b]ondragstart [/b]attribute calls a function, drag(event), which specifies what data is to be dragged.\r\nThe [b]dataTransfer.setData() [/b]method sets the data type and the value of the dragged data: [code format=\"raw\" ]function drag(ev) {\r\n    ev.dataTransfer.setData(\"text\", ev.target.id);\r\n}[/code]\r\nIn our example, the data type is \"text\" and the value is the ID of the draggable element (\"image\").\r\n\r\n[b][u]Where to Drop[/u][/b]\r\nThe [b]ondragover [/b]event specifies where the dragged data can be dropped. By default, data and elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element.\r\nThis is done by calling the event.[b]preventDefault[/b]() method for the [b]ondragover [/b]event.\r\n\r\n[b][u]Do the Drop[/u][/b]\r\nWhen the dragged data is dropped, a drop event occurs.\r\nIn the example above, the [b]ondrop [/b]attribute calls a function, drop(event): [code format=\"raw\" ]function drop(ev) {\r\n    ev.preventDefault();\r\n    var data = ev.dataTransfer.getData(\"text\");\r\n    ev.target.appendChild(document.getElementById(data));\r\n}[/code]\r\nThe [b]preventDefault()[/b] method prevents the browser's default handling of the data (default is open as link on drop).\r\nThe dragged data can be accessed with the [b]dataTransfer.getData()[/b] method. This method will return any data that was set to the same type in the setData() method.\r\nThe dragged data is the ID of the dragged element (\"image\").\r\n\r\nAt the end, the dragged element is appended into the drop element, using the appendChild() function.\r\n[note]Basic knowledge of JavaScript is required to understand and use the API.[/note]"}]}}