{"lesson":{"id":2731,"name":"Inheritance","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":5739,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113340,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113341,"text":"<","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to inherit the class Car from Vehicle.\r\n[!raw!]\r\n{0} Car {1} Vehicle\r\nend","textContent":"[h1]Inheritance[/h1]\r\n\r\nInheritance is when a class receives, or inherits, attributes and behavior from another class. The class that is inheriting behavior is called the [b]subclass[/b] (or [b]derived [/b]class) and the class it inherits from is called the [b]superclass [/b](or [b]base[/b] class).\r\nImagine several classes, Cat, Dog, Rabbit and so on. Although they may differ in some ways (only Dog might have the method [b]bark[/b]), they are likely to be similar in others (all having color and name). \r\nThis similarity can be expressed by making them all inherit from a superclass Animal, which contains the shared functionality. \r\nThe [b]<[/b] symbol is used to inherit a class from another class.\r\n[b]For example:[/b] [code format=\"rb\" ]class Dog < Animal\r\n  #some code\r\nend[/code]\r\n[note]In the code above, Dog is the subclass and Animal is the superclass.[/note]"},{"id":5740,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113345,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113346,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113347,"text":"make_sound","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a make_sound method for the Vehicle class, and call it for a newly created Car object.\r\n[!raw!]\r\nclass Vehicle\r\n  {0} make_sound\r\n    puts \"Booo\"\r\n  end\r\nend\r\nclass Car < Vehicle\r\nend\r\nc = Car.{1}\r\nc.{2}","textContent":"[h1]Inheritance[/h1]\r\n\r\nNow, letâ€™s define the Animal and Dog classes:[code format=\"rb\" ]class Animal\r\n  def initialize(name, color)\r\n    @name = name\r\n    @color = color\r\n  end\r\n  def speak\r\n    puts \"Hi\"\r\n  end\r\nend\r\n\r\nclass Dog < Animal\r\nend[/code]\r\nDog is a subclass of Animal so it inherits Animal's methods and attributes, making code like this possible:[code format=\"rb\" codeId=\"1070\"]d = Dog.new(\"Bob\", \"brown\")\r\nd.speak\r\n\r\n# outputs \"Hi\"[/code]\r\n[note]Now [b]Dog [/b]has all the methods and attributes of the Animal class, which is why we can instantiate the object and call the [b]speak [/b]method.[/note]"},{"id":5741,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113351,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nclass A\r\n  def foo\r\n      puts \"1\"\r\n  end\r\nend\r\nclass B < A\r\n    def foo\r\n        puts \"2\"\r\n    end\r\nend\r\nob = B.new\r\nob.foo","textContent":"[h1]Inheritance[/h1]\r\n\r\nThe subclass can also have its own methods and attributes. Let's define a [b]Cat [/b]class and inherit it from the same Animal class: [code format=\"rb\" codeId=\"1071\"]class Animal\r\n  def initialize(name, color)\r\n    @name = name\r\n    @color = color\r\n  end\r\n  def speak\r\n    puts \"Hi\"\r\n  end\r\nend\r\n\r\nclass Dog < Animal\r\nend\r\n\r\nclass Cat < Animal\r\n  attr_accessor :age\r\n  def speak\r\n    puts \"Meow\"\r\n  end\r\nend\r\n\r\nc = Cat.new(\"Lucy\", \"white\")\r\nc.age = 2\r\nc.speak\r\n# outputs \"Meow\"[/code]\r\nIn the code above, Cat inherits from Animal. It has an instance variable [b]age [/b]and also defines its own [b]speak [/b]method. This is called [b]method overriding[/b], because the speak method in Cat overrides, or replaces, the one in the Animal class.\r\n[note]When we called the [b]speak [/b]method for our Dog object, its superclass method was called because Dog did not override it. \r\nThe Cat object called its own [b]speak [/b]method, because it defined its own implementation.[/note]"},{"id":5908,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113355,"text":"A","isCorrect":false,"properties":{}},{"id":113356,"text":"B","isCorrect":false,"properties":{}},{"id":113357,"text":"C","isCorrect":true,"properties":{}}],"question":"Consider the following: A inherits from B, which inherits from C. Which class is considered the superclass of B?","textContent":"[h1]Inheritance[/h1]\r\n\r\nInheritance is a great way to remove duplication in your code by writing the shared and common functionality in the superclass and then adding individual functionality in the subclasses.\r\nYou can have multiple levels of inheritance, for example: [code format=\"rb\" ]class Animal\r\nend\r\nclass Mammal < Animal\r\nend\r\nclass Dog < Mammal\r\nend[/code]\r\nHere, Dog inherits from Mammal, which inherits from Animal. \r\nThis can be described as an  \"[b]is a[/b]\" relationship because a Dog [b]is a[/b] Mammal, which [b]is an[/b] Animal. This is an example of single inheritance with multiple levels of hierarchy.\r\n[note]However, Ruby does [b]not [/b]support multiple inheritance, meaning you cannot inherit a class simultaneously from multiple classes. (A class cannot have multiple superclasses) \r\nTo achieve that behavior, Ruby supports [b]mixins[/b]. We will learn about them in the next module.[/note]"}]}}