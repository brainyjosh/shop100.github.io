{"lesson":{"id":2151,"name":"Object-Oriented Programming","type":0,"mode":1,"videoID":"SS-9y0H3Si8","tags":"classes objects","quizzes":[{"id":4237,"number":1,"videoStart":0.0,"videoEnd":268.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105872,"text":"attributes","isCorrect":true,"properties":{}},{"id":105873,"text":"behavior","isCorrect":true,"properties":{}},{"id":105874,"text":"values","isCorrect":false,"properties":{}},{"id":105875,"text":"apples","isCorrect":false,"properties":{}}],"question":"A class defines... (choose two)","textContent":"[h1]Object-Orientation[/h1]\r\n\r\nJava uses [b]O[/b]bject-[b]O[/b]riented [b]P[/b]rogramming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world.\r\nIn OOP, each object is an independent unit with a [b]unique identity[/b], just as objects in the real world are.\r\n[note]An apple is an object; so is a mug. Each has its unique [b]identity[/b]. It's possible to have two mugs that look identical, but they are still separate, unique objects.[/note]\r\nObjects also have [b]characteristics[/b], which are used to describe them. \r\nFor example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called [b]attributes[/b]. An attribute describes the current state of an object.\r\nIn the real world, each object behaves in its own way. The car moves, the phone rings, and so on.\r\nThe same applies to objects: [b]behavior [/b]is specific to the object's type.\r\n[note]In summary, in object oriented programming, each object has three dimensions: [b]identity[/b], [b]attributes[/b], and [b]behavior[/b]. \r\nAttributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.[/note]\r\n[h2]Classes[/h2]\r\nA [b]class [/b]describes what the object will be, but is separate from the object itself. \r\nIn other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.\r\n\r\nEach class has a name, and each is used to define [b]attributes [/b]and [b]behavior[/b].\r\nSome examples of attributes and behavior:[img id=\"2429\" width=\"100%\"]"}]}}