{"lesson":{"id":2206,"name":"do while Loops","type":0,"mode":1,"videoID":"nfr52iR0Pyg","tags":"loops","quizzes":[{"id":4384,"number":1,"videoStart":8.0,"videoEnd":134.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99536,"text":"A do while loop runs your code at least one time. ","isCorrect":true,"properties":{}},{"id":99537,"text":"A do while loop tests the condition before running the code.","isCorrect":false,"properties":{}},{"id":99538,"text":"A while loop runs the code before testing the condition.","isCorrect":false,"properties":{}}],"question":"How is a do while loop different from a while loop?","textContent":"[h1]do...while Loops[/h1]\r\n\r\nA [b]do...while[/b] loop is similar to a [b]while [/b]loop, except that a [b]do...while[/b] loop is guaranteed to execute at least one time.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"742\"]int x = 1;\r\n[b]do [/b]{\r\n  System.out.println(x);\r\n  x++;\r\n} [b]while[/b](x < 5);\r\n\r\n/*\r\n1\r\n2\r\n3\r\n4\r\n*/[/code]\r\nNotice that the condition appears at the end of the loop, so the statements in the loop execute once before it is tested.\r\nEven with a false condition, the code will run once. Example:[code format=\"java\" codeId=\"743\"]int x = 1;\r\n[b]do [/b]{\r\n  System.out.println(x);\r\n  x++;\r\n} [b]while[/b](x < 0);\r\n\r\n//Outputs 1[/code]"},{"id":4385,"number":2,"videoStart":135.0,"videoEnd":174.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99543,"text":"while","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99544,"text":"5","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to print the values of the x variable 5 times.\r\n[!raw!]\r\nint x = 1;\r\ndo {\r\n System.out.println(x);\r\n x++;\r\n} \r\n{0} (x <= {1});","textContent":"[h1]Loop Control Statements[/h1]\r\n\r\nThe [b]break [/b]and [b]continue [/b]statements change the loop's execution flow.\r\nThe [b]break [/b]statement terminates the loop and transfers execution to the statement immediately following the loop.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"744\"]int x = 1;\r\n\r\nwhile(x > 0) {\r\n System.out.println(x);\r\n  if(x == 4) {\r\n    [b]break;[/b]\r\n  }\r\n  x++;\r\n}\r\n\r\n/* Outputs\r\n1\r\n2\r\n3\r\n4\r\n*/[/code]\r\nThe [b]continue [/b]statement causes the loop to skip the remainder of its body and then immediately retest its condition prior to reiterating. In other words, it makes the loop skip to its next iteration.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"745\"]for(int x=10; x<=40; x=x+10) {\r\n  if(x == 30) {\r\n    [b]continue[/b];\r\n  }\r\n  System.out.println(x);\r\n}\r\n/* Outputs\r\n  10\r\n  20\r\n  40\r\n*/[/code]\r\n[note]As you can see, the above code skips the value of 30, as directed by the [b]continue [/b]statement.[/note]"}]}}