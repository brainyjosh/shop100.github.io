{"lesson":{"id":2597,"name":"The do-while Loop","type":0,"mode":1,"videoID":null,"tags":"loops","quizzes":[{"id":5407,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103059,"text":"do","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103060,"text":"while","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103061,"text":";","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a valid loop.\r\n[!raw!]\r\nint x = 0;\r\n{0} {\r\n  Console.WriteLine(x);\r\n  x+=2;\r\n} {1}(x < 10){2}","textContent":"[h1]do-while[/h1]\r\n\r\nA [b]do-while[/b] loop is similar to a [b]while [/b]loop, except that a [b]do-while[/b] loop is guaranteed to execute at least one time.\r\nFor example: [code format=\"cs\" codeId=\"843\"]int a = 0;\r\n[b]do [/b]{\r\n  Console.WriteLine(a);\r\n  a++;\r\n} [b]while[/b](a < 5)[b];[/b]\r\n\r\n/* Outputs\r\n0\r\n1\r\n2\r\n3\r\n4\r\n*/[/code]\r\n[note]Note the [b]semicolon [/b]after the while statement.[/note]"},{"id":5408,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103065,"text":"5","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nint a = 2;\r\ndo {\r\n  a+=3;\r\n} while(a < 4);\r\nConsole.Write(a);","textContent":"[h1]do-while vs. while[/h1]\r\n\r\nIf the condition of the [b]do-while[/b] loop evaluates to [b]false[/b], the statements in the [b]do[/b] will still run once: [code format=\"cs\" codeId=\"844\"]int x = 42;\r\ndo {\r\n  Console.WriteLine(x);\r\n  x++;\r\n} while(x < 10);\r\n\r\n// Outputs 42[/code]\r\n[note]The [b]do-while[/b] loop executes the statements at least once, and then tests the condition.\r\nThe [b]while [/b]loop executes the statement only after testing condition.[/note]"}]}}