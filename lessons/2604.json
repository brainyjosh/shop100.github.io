{"lesson":{"id":2604,"name":"Method Parameters","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5426,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103193,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103194,"text":"/","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103195,"text":"result","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a method that takes one integer parameter and then displays the value divided by 2.\r\n[!raw!]\r\nvoid MyFunc({0} x) \r\n{\r\n  int result = x{1}2;\r\n  Console.WriteLine({2});\r\n}","textContent":"[h1]Parameters[/h1]\r\n\r\nMethod declarations can define a list of [b]parameters [/b]to work with. \r\nParameters are variables that accept the values passed into the method when called.\r\nFor example: [code format=\"cs\" ]void Print([b]int x[/b]) \r\n{\r\n  Console.WriteLine(x);\r\n}[/code]\r\nThis defines a method that takes one integer parameter and displays its value.\r\n[note]Parameters behave within the method similarly to other local variables. They are created upon entering the method and are destroyed upon exiting the method.[/note]"},{"id":5427,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103205,"text":"static","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103206,"text":"func","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103207,"text":"88","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a method and call it from Main with the argument 88:\r\n[!raw!]\r\n{0} void func(int x) \r\n{\r\n  Console.WriteLine(x/2);\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  {1}({2});\r\n}","textContent":"[h1]Parameters[/h1]\r\n\r\nNow you can call the method in Main and pass in the value for its parameters (also called [b]arguments[/b]): [code format=\"cs\" codeId=\"855\"]static void Print(int x) \r\n{\r\n  Console.WriteLine(x);\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Print([b]42[/b]);\r\n}[/code]\r\n[note]The value 42 is passed to the method as an argument and is assigned to the formal parameter x.[/note]"},{"id":5428,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103214,"text":"As many as you want","isCorrect":true,"properties":{}},{"id":103215,"text":"One","isCorrect":false,"properties":{}},{"id":103216,"text":"None","isCorrect":false,"properties":{}}],"question":"How many times can you call a method with different arguments?","textContent":"[h1]Parameters[/h1]\r\n\r\nYou can pass different arguments to the same method as long as they are of the expected type. \r\nFor example: [code format=\"cs\" codeId=\"856\"]static void Func(int x)\r\n{\r\n  Console.WriteLine(x*2);\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Func([b]5[/b]);\r\n  //Outputs 10\r\n  \r\n  Func([b]12[/b]);\r\n  //Outputs 24\r\n\r\n  Func([b]42[/b]);\r\n  //Outputs 84\r\n}[/code]"}]}}