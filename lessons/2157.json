{"lesson":{"id":2157,"name":"Constructors","type":0,"mode":1,"videoID":"tPFuVRbUTwA","tags":"constructors","quizzes":[{"id":4254,"number":1,"videoStart":68.0,"videoEnd":119.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95469,"text":"Person","isCorrect":true,"properties":{}},{"id":95470,"text":"int","isCorrect":true,"properties":{}},{"id":95471,"text":"private","isCorrect":false,"properties":{}},{"id":95472,"text":"constructor","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to create a valid constructor.\r\n[!raw!]\t\t\r\nclass Person {\r\n   private int age;\r\n   public {0}({1} myage) {\r\n      age = myage;\r\n   }\r\n}","textContent":"[h1]Constructors[/h1]\r\n\r\n[b]Constructors [/b]are special methods invoked when an object is created and are used to initialize them. \r\nA constructor can be used to provide initial values for object attributes.\r\n\r\n- A constructor name must be same as its class name.\r\n- A constructor must have no explicit return type.\r\n\r\nExample of a constructor:[code format=\"java\"]public class Vehicle {\r\n  private String color;\r\n  [b]Vehicle() [/b]{\r\n     color = \"Red\";\r\n  }\r\n}[/code]\r\nThe [b]Vehicle[/b]() method is the constructor of our class, so whenever an object of that class is created, the color attribute will be set to \"Red\".\r\nA constructor can also take parameters to initialize attributes. [code format=\"java\"]public class Vehicle {\r\n  private String color;\r\n  [b]Vehicle(String c) [/b]{\r\n    color = c;\r\n  }\r\n}[/code]"},{"id":4255,"number":2,"videoStart":119.0,"videoEnd":186.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95473,"text":"True","isCorrect":true,"properties":{}},{"id":95474,"text":"False","isCorrect":false,"properties":{}}],"question":"True or false: The constructor must have the same name as the class.","textContent":"[h1]Using Constructors[/h1]\r\n\r\nThe constructor is called when you create an object using the [b]new [/b]keyword. \r\n[b]Example:[/b] [code format=\"java\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    Vehicle v = new [b]Vehicle(\"Blue\")[/b];\r\n  }\r\n}[/code]\r\n[note]This will call the constructor, which will set the [b]color [/b]attribute to \"Blue\".[/note]"},{"id":4256,"number":3,"videoStart":186.0,"videoEnd":322.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99581,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99582,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks.\r\n[!raw!]\r\n{0} A\r\n{\r\n  private int x;\r\n   public A({1} val) {\r\n     x = val;\r\n   }\r\n}","textContent":"[h1]Constructors[/h1]\r\n\r\nA single class can have multiple constructors with different numbers of parameters.\r\nThe setter methods inside the constructors can be used to set the attribute values.\r\n\r\n[b]Example:[/b] [code format=\"java\" ]public class Vehicle {\r\n  private String color;\r\n\r\n  Vehicle() {\r\n    this.setColor(\"Red\");\r\n  }\r\n  Vehicle(String c) {\r\n    this.setColor(c);\r\n  }\r\n\r\n  // Setter\r\n  public void setColor(String c) {\r\n    this.color = c;\r\n  }\r\n}[/code]\r\nThe class above has two constructors, one without any parameters setting the color attribute to a default value of \"Red\", and another constructor that accepts a parameter and assigns it to the attribute.\r\n\r\nNow, we can use the constructors to create objects of our class.[code format=\"java\" codeId=\"760\"]//color will be \"Red\"\r\nVehicle v1 = new Vehicle();\r\n\r\n//color will be \"Green\"\r\nVehicle v2 = new Vehicle(\"Green\"); [/code]\r\n[note]Java automatically provides a default constructor, so all classes have a constructor, whether one is specifically defined or not.[/note]"}]}}