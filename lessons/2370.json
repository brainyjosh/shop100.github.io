{"lesson":{"id":2370,"name":"Auto Layout","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4858,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59885,"text":"stack","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which view provides a streamlined interface for laying out a collection of views in either a column or a row?","textContent":"[h1]Adopt Auto Layout[/h1]\r\n\r\n[b]Auto Layout[/b] is a powerful layout engine that makes it easy to design adaptive layouts. Describe your intent as you position a scene's elements, and let the layout engine determine how that intent is best implemented.\r\nIntent is described using [b]constraints[/b], which are rules explaining where one element should be located in relation to another, what size it should be, or which of two elements should shrink first when the space available for each is somehow reduced.\r\nA [b]stack view[/b] provides a streamlined interface for laying out a collection of views in either a column or a row. \r\nYou can easily wrap your existing interface in a stack view, adding the necessary constraints to make it display properly under different circumstances.\r\n\r\nWhile pressing the [b]Shift [/b]key on your keyboard, select the text field, label, and button.\r\nOn the bottom right of the canvas, click the [b]Stack [/b]button. [img id=\"1007\" width=\"50%\"]\r\nXcode wraps the UI elements in a stack view, stacking them together. [img id=\"1008\" width=\"50%\"]\r\n[note]Xcode analyzes your existing layout to figure out whether the items should stack vertically or horizontally. You can change the settings from the Attribute inspector.[/note]"},{"id":4859,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59886,"text":"View Controller Scene","isCorrect":false,"properties":{}},{"id":59887,"text":"View Controller","isCorrect":false,"properties":{}},{"id":59888,"text":"View","isCorrect":false,"properties":{}},{"id":59889,"text":"Stack View","isCorrect":false,"properties":{}}],"question":"Rearrange the items to represent a correct view hierarchy.","textContent":"[b][h1]Stack View[/h1][/b]\r\n\r\nTo set or change the stack's settings, open the outline view and select the [b]Stack View[/b] object. [img id=\"1009\" width=\"50%\"]\r\nIn the Attributes inspector, type 12[i] [/i]in the [b]Spacing [/b]field. Press Return. You can also change the Axis of the Stack.\r\nNotice that the UI elements space out vertically, and the stack view grows along with them.[img id=\"1010\" width=\"50%\"]\r\n[note]You can play around with the settings and check results on the canvas. \r\nLet's also change the [b]Alignment [/b]to [b]Leading[/b], so that the elements position left.[/note]"},{"id":4860,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59894,"text":"pin","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which menu is used to set constraints?","textContent":"[h1]Constraints[/h1]\r\n\r\nOn the bottom right of the canvas, open the [b]Pin [/b]menu. [img id=\"1011\" width=\"50%\"]\r\nAbove \"[b]Spacing to nearest neighbor[/b]\", click the two horizontal constraints and the top vertical constraint to select them. They become [b]red [/b]when they are selected.\r\nThese constraints indicate spacing to the nearest leading, trailing, and top neighbors. In this context, the term nearest neighbor means the boundary of the closest UI element.\r\nType 0 in the left and right boxes, and type 60  in the box at the top.\r\nIn the pop-up menu, next to Update Frames, select [b]Items of New Constraints[/b].\r\nThe Pin menu should look something like this: [img id=\"1012\" width=\"50%\"] \r\nIn the Pin menu, click the [b]Add 3 Constraints[/b] button.\r\n\r\nThe scene UI should now look something like this: [img id=\"1013\" width=\"100%\"] \r\n[note]Using the same Pin menu, you can make the text field stretch the entire width. Select the text field, open the Pin menu, add the two horizontal constraints, and enter 0 for each. Clicking the [b]Add 2 Constraints[/b] button will make the text field stretch.[/note]"},{"id":4861,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59901,"text":"Command+K","isCorrect":true,"properties":{}},{"id":59902,"text":"Command+W","isCorrect":false,"properties":{}},{"id":59903,"text":"Ctrl+K","isCorrect":false,"properties":{}},{"id":59904,"text":"Shift+K","isCorrect":false,"properties":{}}],"question":"Which keyboard shortcut toggles the software keyboard on the simulator?","textContent":"[h1]Run Your App![/h1]\r\n\r\nRun your app in Simulator:  [img id=\"1016\" width=\"50%\"]\r\nClick inside of the text field, and type some text, using the keyboard. You can toggle the software keyboard by pressing [b]Command-K[/b]. If you rotate the device ([b]Command-Left Arrow[/b] or [b]Command-Right Arrow[/b]) or run the app on a different device, the text field adapts to fit the appropriate size, depending on the device's orientation and screen size.\r\nIf you experience issues, reset or clear the constraints by clicking the [b]Resolve Auto Layout[/b] button to reset or clear the constraints. [img id=\"1015\" width=\"50%\"]\r\n[note]Now, we can add functionality to the interface![/note]"}]}}