{"lesson":{"id":2689,"name":"Enums","type":0,"mode":1,"videoID":null,"tags":"enums","quizzes":[{"id":5583,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104167,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nenum Test { a=2, b, c, d, e }; \r\nstatic void Main(string[] args) {\r\n  int x = (int)Test.c;\r\n  Console.WriteLine(x);\r\n}","textContent":"[h1]Enums[/h1]\r\n\r\nThe [b]enum [/b]keyword is used to declare an enumeration: a type that consists of a set of named constants called the enumerator list.\r\nBy default, the first enumerator has the value 0, and the value of each successive enumerator is increased by 1.\r\nFor example, in the following enumeration, Sun is 0, Mon is 1, Tue is 2, and so on: [code format=\"cs\" ][b]enum [/b]Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat}; [/code]\r\nYou can also assign your own enumerator values: [code format=\"cs\" ][b]enum [/b]Days {Sun, Mon, Tue=4, Wed, Thu, Fri, Sat}; [/code]\r\nIn the example above, the enumeration will start from 0, then Mon is 1, Tue is 4, Wed is 5, and so on. The value of the next item in an Enum is one increment of the previous value.\r\nNote that the values are comma separated.\r\nYou can refer to the values in the Enum with the dot syntax.\r\nIn order to assign Enum values to int variables, you have to specify the type in parentheses: [code format=\"cs\" codeId=\"908\"]enum Days { Sun, Mon, Tue, Wed, Thu, Fri, Sat }; \r\n\r\nstatic void Main(string[] args) {\r\n  [b]int x = (int)Days.Tue;[/b]\r\n  Console.WriteLine(x);\r\n  //Outputs 2\r\n}[/code]\r\n[note]Basically, Enums define variables that represent members of a fixed set.\r\nSome sample Enum uses include month names, days of the week, cards in a deck, etc.[/note]"},{"id":5584,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104178,"text":"enum","isCorrect":true,"properties":{}},{"id":104179,"text":"BLUE","isCorrect":true,"properties":{}},{"id":104180,"text":"RED","isCorrect":false,"properties":{}},{"id":104181,"text":"static","isCorrect":false,"properties":{}},{"id":104182,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to create an Enum called Color, with the values RED, BLUE, GREEN.\r\n[!raw!]\r\n{0} Color  {\r\n  RED, {1}, GREEN\r\n}","textContent":"[h1]Enums[/h1]\r\n\r\nEnums are often used with [b]switch [/b]statements.\r\n[b]For example: [/b][code format=\"cs\" codeId=\"909\"]enum TrafficLights { Green, Red, Yellow };\r\n\r\nstatic void Main(string[] args) {\r\n  TrafficLights x = TrafficLights.Red;\r\n  switch (x) {\r\n    case TrafficLights.Green:\r\n      Console.WriteLine(\"Go!\");\r\n      break;\r\n    case TrafficLights.Red:\r\n      Console.WriteLine(\"Stop!\");\r\n      break;\r\n    case TrafficLights.Yellow:\r\n      Console.WriteLine(\"Caution!\");\r\n      break;\r\n  }\r\n  //Outputs \"Stop!\"\r\n}[/code]"}]}}