{"lesson":{"id":2673,"name":"this & readonly","type":0,"mode":1,"videoID":null,"tags":"this readonly","quizzes":[{"id":5544,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103828,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103829,"text":"this.","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to print the age variable of the Person class using the this keyword.\r\n[!raw!]\r\n{0} Person {\r\n  private int age;\r\n  public void Print() {\r\n    Console.Write({1}age);\r\n  }\r\n}","textContent":"[h1]The this Keyword[/h1]\r\n\r\nThe [b]this [/b]keyword is used inside the class and refers to the current instance of the class, meaning it refers to the current object.\r\nOne of the common uses of [b]this [/b]is to distinguish class members from other data, such as local or formal parameters of a method, as shown in the following example: [code format=\"cs\" ]class Person {\r\n  private string name;\r\n  public Person(string name) {\r\n    [b]this[/b].name = name;\r\n  }\r\n}[/code]\r\nHere, [b]this.name[/b] represents the member of the class, whereas [b]name [/b]represents the parameter of the constructor.\r\n[note]Another common use of [b]this [/b]is for passing the current instance to a method as parameter: ShowPersonInfo([b]this[/b]);[/note]"},{"id":5545,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103842,"text":"readonly fields can be initialized by the constructor","isCorrect":true,"properties":{}},{"id":103843,"text":"readonly fields can be initialized only when declared","isCorrect":false,"properties":{}},{"id":103844,"text":"constants can be initialized by the constructor","isCorrect":false,"properties":{}},{"id":103845,"text":"constants should be assigned a value when declared","isCorrect":true,"properties":{}}],"question":"Which statements are true?","textContent":"[h1]The readonly Modifier[/h1]\r\n\r\nThe [b]readonly [/b]modifier prevents a member of a class from being modified after construction. It means that the field declared as [b]readonly [/b]can be modified only when you declare it or from within a constructor.\r\n[b]For example:[/b] [code format=\"cs\" ]class Person {\r\n  private [b]readonly [/b]string name = \"John\"; \r\n  public Person(string name) {\r\n    this.name = name; \r\n  }\r\n}[/code]\r\nIf we try to modify the [b]name [/b]field anywhere else, we will get an error.\r\nThere are three major differences between [b]readonly [/b]and [b]const [/b]fields. \r\nFirst, a constant field must be initialized when it is declared, whereas a readonly field can be declared without initialization, as in: [code format=\"cs\" ][b]readonly [/b]string name; // OK\r\n[b]const [/b]double PI; // Error[/code]\r\nSecond, a [b]readonly [/b]field value can be changed in a constructor, but a constant value cannot.\r\nThird, the [b]readonly [/b]field can be assigned a value that is a result of a calculation, but constants cannot, as in: [code format=\"cs\" ][b]readonly [/b]double a = Math.Sin(60); // OK\r\n[b]const [/b]double b = Math.Sin(60); // Error! [/code]"}]}}