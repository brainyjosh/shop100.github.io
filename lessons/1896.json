{"lesson":{"id":1896,"name":"Member Initializers","type":0,"mode":1,"videoID":"53VYYMy-LBo","tags":"classes","quizzes":[{"id":3721,"number":1,"videoStart":6.0,"videoEnd":72.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78276,"text":"...must not be initialized","isCorrect":false,"properties":{}},{"id":78277,"text":"...cannot be changed","isCorrect":true,"properties":{}},{"id":78278,"text":"...can be modified","isCorrect":false,"properties":{}}],"question":"A constant variable...","textContent":"[h1]Member Initializers[/h1]\r\n\r\nRecall that [b]constants [/b]are variables that cannot be changed, and that all const variables must be initialized at time of creation.\r\n\r\nC++ provides a handy syntax for initializing members of the class called the [b]member initializer list[/b] (also called a [b]constructor initializer[/b]).\r\n[note]Tap [b]Continue [/b]to learn more![/note]"},{"id":3723,"number":2,"videoStart":73.0,"videoEnd":251.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106373,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106374,"text":"num","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"You have a class ''Student'' with two members, \"age\" and \"num\". Fill in the blanks to initialize those members in the constructor initializer list with the corresponding values.\r\n[!raw!]\r\nStudent::Student(int a, int b)\r\n {0} age(a),\r\n   {1} (b) {\r\n}","textContent":"[h1]Member Initializers [/h1]\r\n\r\nConsider the following class: [code format=\"cpp\" ]class MyClass {\r\n  public:\r\n   MyClass(int a, int b) {\r\n    regVar = a;\r\n    constVar = b;\r\n   }\r\n  private:\r\n    int regVar;\r\n    [b]const [/b]int constVar;\r\n};[/code]\r\nThis class has two member variables, [b]regVar [/b]and [b]constVar[/b]. It also has a constructor that takes two parameters, which are used to initialize the member variables.\r\nRunning this code returns an [b]error[/b], because one of its member variables is a [b]constant[/b], which cannot be assigned a value after declaration.\r\n\r\nIn cases like this one, a [b]member initialization list [/b]can be used to assign values to the member variables.[code format=\"cpp\" ]class MyClass {\r\n public:\r\n  MyClass(int a, int b)\r\n[b]  : regVar(a), constVar(b)[/b]\r\n  {\r\n  }\r\n private:\r\n  int regVar;\r\n  const int constVar;\r\n};[/code]\r\nNote that in the syntax, the initialization list follows the constructor parameters. The list begins with a [b]colon [/b](:), and then lists each variable to be initialized, along with the value for that variable, with a comma to separate them. \r\nUse the syntax [b]variable(value)[/b] to assign values.\r\n[note]The initialization list eliminates the need to place explicit assignments in the constructor body. Also, the initialization list does not end with a semicolon.[/note]"},{"id":3724,"number":3,"videoStart":252.0,"videoEnd":395.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117103,"text":"Student","isCorrect":true,"properties":{}},{"id":117104,"text":"regVar","isCorrect":true,"properties":{}},{"id":117105,"text":"<<","isCorrect":true,"properties":{}},{"id":117106,"text":">>","isCorrect":false,"properties":{}},{"id":117107,"text":"::","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to initialize members in the constructor initializer list, and then print them out in the constructor body:\r\n[!raw!]\r\nStudent::{0}(int a, int b)\r\n : regVar(a),\r\n   constVar(b)\r\n  {  cout << {1} <<\r\n     constVar {2} endl;\r\n  }","textContent":"[h1]Member Initializers[/h1]\r\n\r\nLet's write the previous example using separate header and source files.\r\n[b]MyClass.h[/b] [code format=\"cpp\" ]class MyClass {\r\n  public:\r\n   MyClass(int a, int b);\r\n  private:\r\n   int regVar;\r\n   const int constVar;\r\n};[/code]\r\n[b]MyClass.cpp[/b] [code format=\"cpp\" ]MyClass::MyClass(int a, int b)\r\n[b]: regVar(a), constVar(b)[/b]\r\n{\r\n  cout << regVar << endl;\r\n  cout << constVar << endl;\r\n}[/code]\r\nWe have added [b]cout [/b]statements in the constructor to print the values of the member variables.\r\nOur next step is to create an object of our class in main, and use the constructor to assign values.[code format=\"cpp\" codeId=\"262\"]#include \"MyClass.h\"\r\n\r\nint main() {\r\n  [b]MyClass obj(42, 33);[/b]\r\n}\r\n\r\n/*Outputs \r\n42\r\n33\r\n*/[/code]\r\n[note]The constructor is used to create the object, assigning two parameters to the member variables via the member initialization list.[/note]"},{"id":3725,"number":4,"videoStart":405.0,"videoEnd":445.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95081,"text":"...must be initialized in the constructor initializer list","isCorrect":true,"properties":{}},{"id":95082,"text":"...must be initialized in the constructor body","isCorrect":false,"properties":{}},{"id":95083,"text":"...can be initialized wherever you want","isCorrect":false,"properties":{}}],"question":"A constant member variable...","textContent":"[h1]Member Initializers[/h1]\r\n\r\nThe member initialization list may be used for regular variables, and must be used for constant variables.\r\n[note]Even in cases in which member variables are not constant, it makes good sense to use the member initializer syntax.[/note]"}]}}