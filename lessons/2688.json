{"lesson":{"id":2688,"name":"Structs","type":0,"mode":1,"videoID":null,"tags":"structs","quizzes":[{"id":5582,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106323,"text":"You cannot derive from a struct","isCorrect":true,"properties":{}},{"id":106324,"text":"A struct can contain virtual methods","isCorrect":false,"properties":{}},{"id":106325,"text":"A struct can be abstract","isCorrect":false,"properties":{}}],"question":"Which of the following statements are true?","textContent":"[h1]Structs[/h1]\r\n\r\nA [b]struct [/b]type is a value type that is typically used to encapsulate small groups of related variables, such as the coordinates of a rectangle or the characteristics of an item in an inventory. The following example shows a simple struct declaration: [code format=\"cs\" ][b]struct [/b]Book {\r\n  public string title;  \r\n  public double price;\r\n  public string author;\r\n}[/code]\r\nStructs share most of the same syntax as classes, but are more limited than classes.\r\nUnlike classes, structs can be instantiated without using a new operator. [code format=\"cs\" codeId=\"906\"]static void Main(string[] args) {\r\n  [b]Book [/b]b;\r\n  b.title = \"Test\";\r\n  b.price = 5.99;\r\n  b.author = \"David\";\r\n\r\n  Console.WriteLine(b.title);\r\n  //Outputs \"Test\"\r\n}[/code]\r\n[note]Structs do [b]not [/b]support inheritance and cannot contain virtual methods.[/note]"},{"id":5581,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104770,"text":"struct","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104771,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a struct.\r\n[!raw!]\r\npublic {0} Car {1}\r\n  public string brand;  \r\n  public double price;\r\n}","textContent":"[h1]Structs[/h1]\r\n\r\nStructs can contain methods, properties, indexers, and so on. Structs cannot contain default constructors (a constructor without parameters), but they can have constructors that take parameters. In that case the [b]new[/b] keyword is used to instantiate a struct object, similar to class objects.\r\n[b]For example: [/b][code format=\"cs\" codeId=\"907\"]struct Point {\r\n  public int x;\r\n  public int y;\r\n  public Point(int x, int y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\nstatic void Main(string[] args) {\r\n  [b]Point p = new Point(10, 15);[/b]\r\n  Console.WriteLine(p.x);\r\n  // Outputs 10\r\n }[/code]\r\n[h2]Structs vs Classes[/h2]\r\nIn general, classes are used to model more complex behavior, or data, that is intended to be modified after a class object is created. Structs are best suited for small data structures that contain primarily data that is not intended to be modified after the struct is created. Consider defining a struct instead of a class if you are trying to represent a simple set of data. \r\n[note]All standard C# types (int, double, bool, char, etc.) are actually structs.[/note]"}]}}