{"lesson":{"id":2606,"name":"Optional & Named Arguments","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5431,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103256,"text":"8","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nstatic int Vol(int x, int y=3, int z=1) {\r\n  return x*y*z;\r\n}\r\nstatic void Main(string[] args) {\r\n  Console.WriteLine(Vol(2, 4));\r\n}","textContent":"[h1]Optional Arguments[/h1]\r\n\r\nWhen defining a method, you can specify a [b]default value[/b] for optional parameters. Note that optional parameters must be defined after required parameters. If corresponding arguments are missing when the method is called, the method uses the default values.\r\nTo do this, assign values to the parameters in the method definition, as shown in this example. [code format=\"cs\" ]static int Pow(int x,[b] int y=2[/b])\r\n{\r\n  int result = 1;\r\n  for (int i = 0; i < y; i++)\r\n  {\r\n    result *= x;\r\n  }\r\n \r\n  return result;\r\n}[/code]\r\nThe Pow method assigns a default value of 2 to the y parameter. If we call the method without passing the value for the y parameter, the default value will be used. [code format=\"cs\" codeId=\"859\"]static void Main(string[] args)\r\n{\r\n  Console.WriteLine([b]Pow(6)[/b]);\r\n  //Outputs 36\r\n\r\n  Console.WriteLine([b]Pow(3, 4)[/b]);\r\n  //Outputs 81\r\n}[/code]\r\n[note]As you can see, default parameter values can be used for calling the same method in different situations without requiring arguments for every parameter.\r\nJust remember, that you must have the parameters with default values at the [b]end [/b]of the parameter list when defining the method.[/note]"},{"id":5433,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106250,"text":"calc","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106251,"text":"step:","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106252,"text":"to:","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106253,"text":"from:","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Call the method using named arguments with the values 5 for \"from\", 99 for \"to\" and 2 for \"step\":\r\n[!raw!]\r\nstatic int calc(int from, int to, int step=1) {\r\n  int res=0;\r\n  for(int i=from;i<to;i+=step) {\r\n    res += i;\r\n  }\r\n  return res;\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  int res = {0}({1}2, {2}99, {3}5);\r\n  Console.WriteLine(res);\r\n}","textContent":"[h1]Named Arguments[/h1]\r\n\r\nNamed arguments free you from the need to remember the order of the parameters in a method call. Each argument can be specified by the matching parameter name. \r\nFor example, the following method calculates the area of a rectangle by its height and width: [code format=\"cs\" ]static int Area(int h, int w)\r\n{\r\n  return h * w;\r\n}[/code]\r\nWhen calling the method, you can use the parameter names to provide the arguments in any order you like:  [code format=\"cs\" codeId=\"860\"]static void Main(string[] args)\r\n{\r\n  int res = Area([b]w: 5, h: 8[/b]);\r\n  Console.WriteLine(res);\r\n  //Outputs 40\r\n}[/code]\r\n[note]Named arguments use the [b]name [/b]of the parameter followed by a [b]colon [/b]and the [b]value[/b].[/note]"}]}}