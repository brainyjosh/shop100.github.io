{"lesson":{"id":2780,"name":"Lambdas","type":0,"mode":1,"videoID":null,"tags":"lambdas","quizzes":[{"id":5919,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":111951,"text":"18","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\na = lambda {|x| x*3}\r\nputs a.call 6","textContent":"[h1]Lambdas[/h1]\r\n\r\n[b]Lambdas [/b]are a variation of Procs. A [b]lambda [/b]is actually an instance of the Proc class. \r\nTo create a lambda in Ruby, you use the following syntax:[code format=\"rb\" ]talk = [b]lambda [/b]{puts \"Hi\"}[/code]\r\nAlternatively, the following syntax can be used:[code format=\"rb\" ]talk = ->() {puts \"Hi\"}[/code]\r\nJust like with procs, you use the [b]call [/b]method to execute the lambda: [code format=\"rb\" codeId=\"1091\"]talk.[b]call[/b][/code]\r\n[note]In other programming languages, a [b]lambda [/b]is commonly referred to as an [b]anonymous function[/b].[/note]"},{"id":5920,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113529,"text":"True","isCorrect":false,"properties":{}},{"id":113530,"text":"False","isCorrect":true,"properties":{}}],"question":"Passing the wrong number of arguments to a Proc will result in an error.","textContent":"[h1]Lambdas[/h1]\r\n\r\nLambdas as very similar to procs. However, there are some important differences.\r\nThe first difference between procs and lambdas is how arguments are handled.\r\nLambdas check the number of arguments, while procs do not. \r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1092\"]talk = lambda { |x| puts \"Hello #{x}\" }\r\ntalk_proc = Proc.new { |x| puts \"Hello #{x}\" }\r\n\r\ntalk.call \"David\"\r\n# outputs \"Hello David\"\r\n\r\ntalk_proc.call \"Amy\"\r\n# outputs \"Hello Amy\"[/code]\r\nAs you can see, the lambda and proc worked the same way, when the number of arguments is correct. \r\nHowever, if we try to call them with incorrect number of arguments: [code format=\"rb\" codeId=\"1093\"]talk_proc.call\r\n# ouputs Hello\r\n\r\ntalk.call\r\n# outputs \"Error: wrong number of arguments (given 0, expected 1)\"[/code]\r\nAs you can see, when a lambda expects an argument, you need to pass those arguments or an Error will occur. However, in the case of the Proc, if the argument is not passed it automatically defaults to nil. \r\n[note]A second difference between a lambda and a Proc is how the [b]return [/b]statement is handled.\r\nWhen a lambda encounters a [b]return [/b]statement it returns execution to the enclosing method.\r\nHowever, when a Proc encounters a [b]return [/b]statement it jumps out of itself, as well as the enclosing method. [/note]"}]}}