{"lesson":{"id":1641,"name":"Recursion","type":0,"mode":1,"videoID":"4agL-MQq05E","tags":"recursion","quizzes":[{"id":2918,"number":1,"videoStart":3.0,"videoEnd":37.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78048,"text":"A function declares two variables","isCorrect":false,"properties":{}},{"id":78049,"text":"A function calls itself","isCorrect":true,"properties":{}},{"id":78050,"text":"A function calls main","isCorrect":false,"properties":{}}],"question":"The idea of the recursion is:","textContent":"[h1]Recursion[/h1]\r\n\r\nA [b]recursive function[/b] in C++ is a function that calls itself.\r\n\r\n[note]To avoid having the recursion run indefinitely, you must include a termination condition.[/note]"},{"id":2919,"number":2,"videoStart":38.0,"videoEnd":168.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100477,"text":"5! equals 5*4*3*2*1","isCorrect":true,"properties":{}},{"id":100478,"text":"5! equals 0","isCorrect":false,"properties":{}},{"id":100479,"text":"5! equals 5","isCorrect":false,"properties":{}}],"question":"What is the factorial of 5?","textContent":"[h1]Recursion[/h1]\r\n\r\nTo demonstrate recursion, let's create a program to calculate a number's [b]factorial[/b].\r\nIn mathematics, the term factorial refers to the product of all positive integers that are less than or equal to a specific non-negative integer (n). The factorial of [b]n[/b] is denoted as [b]n![/b]\r\n[b]For example:[/b][code format=\"cpp\" ]4! = 4 * 3 * 2 * 1 = 24[/code]"},{"id":2920,"number":3,"videoStart":169.0,"videoEnd":337.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94978,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94979,"text":"fact","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the code to define a recursive function calculating the factorial of the function parameter.\r\n[!raw!]\r\nint fact(int x) {\r\n if (x == 1) { \r\n {0} 1;\r\n } else {\r\n return x * {1}(x - 1);\r\n }\r\n}","textContent":"[h1]Recursion[/h1]\r\n\r\nLet's define our function: [code format=\"cpp\"]int [b]factorial[/b](int n) {\r\n  if (n==1) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return n * [b]factorial[/b](n-1);\r\n  }\r\n}[/code]\r\nThe if statement defines the exit condition. In this case, it's when n equals one, return 1 (the factorial of one is one).\r\nWe placed the recursive function call in the else statement, which returns n multiplied by the factorial of n-1.\r\nFor example, if you call the factorial function with the argument 4, it will execute as follows:\r\nreturn 4 * factorial(3), which is 4*3*factorial(2), which is 4*3*2*factorial(1), which is 4*3*2*1.\r\n[note]The [b]factorial [/b]function calls itself, and then continues to do so, until the argument equals 1.[/note]"},{"id":2921,"number":4,"videoStart":338.0,"videoEnd":424.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97787,"text":"An empty body","isCorrect":false,"properties":{}},{"id":97788,"text":"A base case","isCorrect":true,"properties":{}},{"id":97789,"text":"A return value","isCorrect":false,"properties":{}}],"question":"A real recursive function should have:","textContent":"[h1]Recursion[/h1]\r\n\r\nWe're now at the point where we can call our [b]factorial [/b]function.[code format=\"cpp\" codeId=\"248\"]int factorial(int n) {\r\n  if (n==1) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return n * factorial(n-1);\r\n  }\r\n}\r\nint main() {\r\n  cout <<[b] factorial(5)[/b];\r\n}\r\n\r\n//Outputs 120[/code]\r\nAnother name for the exit condition is [b]the base case[/b].\r\n[note]Keep in mind that a [b]base case[/b] is necessary for real recursion. Without it, the recursion will keep running forever.[/note]"}]}}