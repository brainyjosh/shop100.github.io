{"lesson":{"id":2344,"name":"Arrays","type":0,"mode":1,"videoID":null,"tags":"arrays","quizzes":[{"id":4766,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96582,"text":"var array = [String]()","isCorrect":true,"properties":{}},{"id":96583,"text":"var array = (String)","isCorrect":false,"properties":{}},{"id":96584,"text":"var array = ([ ])","isCorrect":false,"properties":{}}],"question":"Which form for declaring an array is correct?","textContent":"[h1]Arrays[/h1]\r\n\r\nAn array is an ordered list of values of the same type, in which the same value can appear multiple times at different positions. In Swift, the array type can be written in full as [b]Array<T>[/b], in which T represents which value type the array is allowed to store. The array type can also be expressed in shorthand form, as [b][T][/b].\r\nAlthough the two forms are identical in function, the shorthand will appear throughout this tutorial in reference to an array type.\r\n\r\n[h2]Creating an Empty Array[/h2]\r\n\r\nCreate an empty array of a certain type using initializer syntax.[code format=\"swift\"]var someInts = [Int]()[/code]\r\n[note]Note that the type of the [i]someInts [/i]variable is inferred to be [b][Int][/b], \r\nfrom the type of the initializer.[/note]"},{"id":4767,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96585,"text":"[Int]","isCorrect":true,"properties":{}},{"id":96586,"text":"11","isCorrect":true,"properties":{}},{"id":96587,"text":"22","isCorrect":false,"properties":{}},{"id":96588,"text":"String","isCorrect":false,"properties":{}},{"id":96589,"text":"Array","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare an array of Integers, containing the values 11 and 22.\r\n[!raw!]\r\nvar test: {0} = [{1}, 22]","textContent":"[h1]Array with a Default Value[/h1]\r\n\r\nSwift's Array type also provides an initializer for creating an array of a certain size with all of its values set to the same default value. You pass this initializer the number of items to be added to the new array (called [b]count[/b]) and a default value of the appropriate type (called [b]repeatedValue[/b]): [code format=\"swift\"]var fourDoubles = [Double](count: 4, repeatedValue: 0.0)[/code]\r\nfourDoubles is of type [Double], and equals [0.0, 0.0, 0.0, 0.0].\r\n\r\n[h2]Array Literal[/h2]\r\n\r\nUsing an array literal is another way to initialize an array. The array literal is shorthand for one or more values written as an array collection, and is written as a list of values, separated by commas, with square brackets at beginning and end.[code format=\"swift\"][value 1, value 2, value 3][/code]\r\nThe example below creates an array called [i]shoppingList[/i], for storing String values:[code format=\"swift\"]var shoppingList: [String] = [\"Bread\", \"Milk\"][/code]\r\nThis particular array can store only [b]String [/b]values, as it has String specified as its value type.\r\n\r\nBecause of Swift's type inference, you don't have to write out the array type. Be sure to initialize with an array literal containing values of that same type. The initialization of shoppingList could have been written in a shorter form:[code format=\"swift\"]var shoppingList = [\"Bread\", \"Milk\"][/code]\r\nAll values in the array literal are of the same type, enabling Swift to infer that [b][String] [/b]is the correct type for the [i]shoppingList [/i]variable.\r\n[note]Combining two existing arrays with compatible types using the addition operator (+) allows you to create a new array. Swift infers the new array's type based on the type of the two combined arrays.[/note]"},{"id":4768,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96590,"text":"isEmpty","isCorrect":true,"properties":{}},{"id":96591,"text":"else","isCorrect":true,"properties":{}},{"id":96592,"text":"myArr","isCorrect":true,"properties":{}},{"id":96593,"text":"count","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to print the number of elements in the array, if it is not empty.\r\n[!raw!]\r\nif myArr.{0} {\r\n   print(\"Empty\")\r\n} {1} {\r\n   print({2}.{3})\r\n}","textContent":"[h1]Accessing and Modifying an Array[/h1]\r\n\r\nAccess and modify an array through its methods and properties or by using subscript syntax.\r\n\r\nAn array's read-only [b]count [/b]property provides the number of items in an array.[code format=\"swift\"]print(\"The shopping list contains \\(shoppingList.count) items.\")\r\n// prints \"The shopping list contains 2 items.\"[/code]\r\nUse the Boolean [b]isEmpty [/b]property as a shortcut when you want to know whether the count property is equal to 0.[code format=\"swift\"]if shoppingList.isEmpty {\r\n   print(\"The shopping list is empty.\")\r\n} else {\r\n   print(\"The shopping list is not empty.\")\r\n}\r\n// prints \"The shopping list is not empty.\"[/code]"}]}}