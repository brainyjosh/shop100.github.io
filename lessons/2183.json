{"lesson":{"id":2183,"name":"Sorting Lists","type":0,"mode":1,"videoID":"QYvUmIYgsiA","tags":"lists","quizzes":[{"id":4320,"number":1,"videoStart":37.0,"videoEnd":161.5,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99719,"text":"a","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nList<String> list = new ArrayList<String>();\r\nlist.add(\"b\");\r\nlist.add(\"a\");\r\nlist.add(\"c\");\r\nCollections.sort(list);\r\nSystem.out.println(list.get(0));","textContent":"[h1]Sorting Lists[/h1]\r\n\r\nFor the manipulation of data in different collection types, the Java API provides a [b]Collections [/b]class, which is included in the java.util package. \r\nOne of the most popular [b]Collections [/b]class methods is [b]sort[/b](), which sorts the elements of your collection type. The methods in the [b]Collections [/b]class are [b]static[/b], so you don't need a Collections object to call them.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"798\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    ArrayList<String> animals = new ArrayList<String>();\r\n    animals.add(\"tiger\");\r\n    animals.add(\"cat\");\r\n    animals.add(\"snake\");\r\n    animals.add(\"dog\");\r\n       \r\n[b]    Collections.sort(animals);[/b]\r\n       \r\n    System.out.println(animals);\r\n  }\r\n}\r\n/* Outputs:\r\n[cat, dog, snake, tiger]\r\n*/[/code]\r\n[note]As you can see, the elements have been sorted alphabetically.[/note]"},{"id":4321,"number":2,"videoStart":161.5,"videoEnd":256.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99720,"text":"add","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99721,"text":"list","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99722,"text":"sort","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99723,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to add three items to the list, sort it,  and print 2.\r\n[!raw!]\r\nList<Integer> list = new ArrayList<Integer>();\r\nlist.{0}(4);\r\nlist.add(2);\r\n{1}.add(1);\r\nCollections.{2}(list);\r\nSystem.out.println(list.get({3}));","textContent":"[h1]Sorting Lists[/h1]\r\n\r\nYou can call the [b]sort[/b]() methods on different types of Lists, such as Integers.[code format=\"java\" codeId=\"799\"]import java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class MyClass {\r\n  public static void main(String[ ] args) {\r\n    ArrayList<Integer> nums = new ArrayList<Integer>();\r\n    nums.add(3);\r\n    nums.add(36);\r\n    nums.add(73);\r\n    nums.add(40);\r\n    nums.add(1);\r\n\r\n    [b]Collections.sort(nums);[/b]\r\n    System.out.println(nums);\r\n  }\r\n}\r\n/* Outputs:\r\n[1, 3, 36, 40, 73]\r\n*/[/code]\r\n[note]Other useful methods in the [b]Collections [/b]class:\r\n[b]max[/b](Collection c): Returns the maximum element in c as determined by natural ordering.\r\n[b]min[/b](Collection c): Returns the minimum element in c as determined by natural ordering.\r\n[b]reverse[/b](List list): Reverses the sequence in list.\r\n[b]shuffle[/b](List list): Shuffles (i.e., randomizes) the elements in list.[/note]"}]}}