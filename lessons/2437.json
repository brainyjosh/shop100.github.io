{"lesson":{"id":2437,"name":"Functions as Objects","type":0,"mode":1,"videoID":null,"tags":"functions","quizzes":[{"id":5023,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98067,"text":"shout!","isCorrect":true,"properties":{}},{"id":98068,"text":"speak!","isCorrect":false,"properties":{}},{"id":98069,"text":"word!","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\ndef shout(word):\r\n   return word + \"!\"\r\nspeak = shout\r\noutput = speak(\"shout\")\r\nprint(output)","textContent":"[h1]Functions[/h1]\r\n\r\nAlthough they are created differently from normal variables, [b]functions [/b]are just like any other kind of value.  \r\nThey can be assigned and reassigned to variables, and later referenced by those names. [code format=\"py\" codeId=\"338\"]def multiply(x, y):\r\n   return x * y\r\n\r\na = 4\r\nb = 7\r\n[b]operation = multiply[/b]\r\nprint([b]operation[/b](a, b))[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\n28\r\n>>>[/code]\r\n[note]The example above assigned the function [b]multiply [/b]to a variable [b]operation[/b]. Now, the name [b]operation [/b]can also be used to call the function.[/note]"},{"id":5024,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98070,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98071,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98072,"text":"square","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to pass the function \"square\" as an argument to the function \"test\":\r\n[!raw!]\r\n{0} square(x):\r\n  return x * x\r\n\r\ndef test(func, x){1}\r\n  print(func(x))\r\n\r\ntest({2}, 42)","textContent":"[h1]Functions[/h1]\r\n\r\nFunctions can also be used as [b]arguments [/b]of other functions.[code format=\"py\" codeId=\"339\"]def add(x, y):\r\n  return x + y\r\n\r\ndef do_twice([b]func[/b], x, y):\r\n  return [b]func[/b]([b]func[/b](x, y), [b]func[/b](x, y))\r\n\r\na = 5\r\nb = 10\r\n\r\nprint(do_twice([b]add[/b], a, b))[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n30\r\n>>>[/code]\r\n[note]As you can see, the function [b]do_twice[/b] takes a function as its argument and calls it in its body.[/note]"}]}}