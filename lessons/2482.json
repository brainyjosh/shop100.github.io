{"lesson":{"id":2482,"name":"The Zen of Python","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":5184,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104593,"text":"this","isCorrect":false,"properties":{"prefix":"import ","postfix":""}}],"question":"Which module prints the Zen of Python when imported?","textContent":"[h1]The Zen of Python[/h1]\r\n\r\nWriting programs that actually do what they are supposed to do is just one component of being a good Python programmer.\r\nIt's also important to write clean code that is easily understood, even weeks after you've written it.\r\n\r\nOne way of doing this is to follow the[b] Zen of Python[/b], a somewhat tongue-in-cheek set of principles that serves as a guide to programming the Pythoneer way. Use the following code to access the Zen of Python. [code format=\"py\" codeId=\"442\"][b]import this[/b][/code]\r\n[b]Result:[/b]\r\nThe Zen of Python, by Tim Peters\r\n\r\nBeautiful is better than ugly.\r\nExplicit is better than implicit.\r\nSimple is better than complex.\r\nComplex is better than complicated.\r\nFlat is better than nested.\r\nSparse is better than dense.\r\nReadability counts.\r\nSpecial cases aren't special enough to break the rules.\r\nAlthough practicality beats purity.\r\nErrors should never pass silently.\r\nUnless explicitly silenced.\r\nIn the face of ambiguity, refuse the temptation to guess.\r\nThere should be one-- and preferably only one --obvious way to do it.\r\nAlthough that way may not be obvious at first unless you're Dutch.\r\nNow is better than never.\r\nAlthough never is often better than *right* now.\r\nIf the implementation is hard to explain, it's a bad idea.\r\nIf the implementation is easy to explain, it may be a good idea.\r\nNamespaces are one honking great idea -- let's do more of those!\r\n"},{"id":5185,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":88349,"text":"Complex is better than complicated","isCorrect":false,"properties":{}},{"id":88350,"text":"Special cases aren't special enough to break the rules","isCorrect":false,"properties":{}},{"id":88351,"text":"Use recursion where possible","isCorrect":true,"properties":{}}],"question":"Which of these principles does not appear in the Zen of Python?","textContent":"[h1]The Zen of Python[/h1]\r\n\r\nSome lines in the Zen of Python may need more explanation.\r\nExplicit is better than implicit: It is best to spell out exactly what your code is doing. This is why adding a numeric string to an integer requires explicit conversion, rather than having it happen behind the scenes, as it does in other languages.\r\nFlat is better than nested: Heavily nested structures (lists of lists, of lists, and on and onâ€¦) should be avoided.\r\nErrors should never pass silently: In general, when an error occurs, you should output some sort of error message, rather than ignoring it.\r\n\r\nThere are 20 principles in the Zen of Python, but only 19 lines of text. \r\nThe 20th principle is a matter of opinion, but our interpretation is that the blank line means \"Use whitespace\".\r\n[note]The line \"There should be one - and preferably only one - obvious way to do it\" references and contradicts the Perl language philosophy that there should be more than one way to do it.[/note]"}]}}