{"lesson":{"id":1914,"name":"Function Templates","type":0,"mode":1,"videoID":"W0aoAm6eYSk","tags":"templates","quizzes":[{"id":3788,"number":1,"videoStart":4.0,"videoEnd":63.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95225,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95226,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95227,"text":"+","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a function taking two integer arguments and returning their sum.\r\n[!raw!]\r\n{0} sum(int a, int b)\r\n{\r\n  {1} a {2} b;\r\n}","textContent":"[h1]Function Templates[/h1]\r\n\r\nFunctions and classes help to make programs easier to write, safer, and more maintainable. \r\nHowever, while functions and classes do have all of those advantages, in certain cases they can also be somewhat limited by C++'s requirement that you specify types for all of your parameters.\r\n\r\nFor example, you might want to write a function that calculates the sum of two numbers, similar to this:[code format=\"cpp\"]int sum(int a, int b) {\r\n  return a+b;\r\n}[/code]"},{"id":3789,"number":2,"videoStart":64.0,"videoEnd":119.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97879,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97880,"text":"y","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97881,"text":"sum","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare two integer variables ''x'' and ''y'', and pass them to the previously created ''sum()'' function. Print the result to the screen.\r\n[!raw!]\r\nint main()\r\n{\r\n  {0} x = 7;\r\n  int {1} = 11;\r\n  cout << {2}(x, y) << endl;\r\n}","textContent":"[h1]Function Templates[/h1]\r\n\r\nWe can now call the function for two integers in our main.[code format=\"cpp\" codeId=\"275\"]int sum(int a, int b) {\r\n  return a+b;\r\n}\r\n\r\nint main () {\r\n  int x=7, y=15;\r\n  cout << [b]sum[/b](x, y) << endl;\r\n}\r\n// Outputs 22[/code]\r\n[note]The function works as expected, but is limited solely to [b]integers[/b].[/note]"},{"id":3790,"number":3,"videoStart":120.0,"videoEnd":250.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95231,"text":"template","isCorrect":false,"properties":{"prefix":"","postfix":" <class MyType>"}}],"question":"Type in the missing keyword to declare a generic type of data, named ''MyType''.","textContent":"[h1]Function Templates[/h1]\r\n\r\nIt becomes necessary to write a new function for each new type, such as doubles.[code format=\"cpp\"]double sum(double a, double b) {\r\n  return a+b;\r\n}[/code]\r\nWouldn't it be much more efficient to be able to write one version of sum() to work with parameters of [b]any [/b]type?\r\n[b]Function templates [/b]give us the ability to do that!\r\nWith function templates, the basic idea is to avoid the necessity of specifying an exact type for each variable. Instead, C++ provides us with the capability of defining functions using placeholder types, called [b]template type parameters[/b].  \r\n\r\nTo define a function template, use the keyword [b]template[/b], followed by the template type definition:[code format=\"cpp\"][b]template [/b]<class T> [/code]\r\n[note]We named our template type [b]T[/b], which is a generic data type.\r\nTap [b]Continue [/b]to learn more![/note]"},{"id":3791,"number":4,"videoStart":251.0,"videoEnd":288.5,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97882,"text":"template","isCorrect":true,"properties":{}},{"id":97883,"text":"T","isCorrect":true,"properties":{}},{"id":97884,"text":"return","isCorrect":true,"properties":{}},{"id":97885,"text":"class","isCorrect":false,"properties":{}},{"id":97886,"text":"public","isCorrect":false,"properties":{}},{"id":97887,"text":"this","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a template function with two arguments. The function returns the sum of its arguments. The arguments are of template type T.\r\n[!raw!]\r\n{0} <class T>\r\nT sum({1} a, T b)\r\n{\r\n {2} a + b;\r\n}","textContent":"[h1]Function Templates [/h1]\r\n\r\nNow we can use our generic data type [b]T[/b] in the function: [code format=\"cpp\" codeId=\"276\"][b]template[/b] <class [b]T[/b]>\r\n[b]T [/b]sum([b]T [/b]a, [b]T [/b]b) {\r\n  return a+b;\r\n}\r\n\r\nint main () {\r\n    int x=7, y=15;\r\n    cout << sum(x, y) << endl;\r\n}\r\n\r\n// Outputs 22[/code]\r\nThe function returns a value of the generic type T, taking two parameters, also of type T.\r\n[note]Our new function worked exactly as the previous one for integer values did.[/note]"},{"id":3792,"number":5,"videoStart":290.0,"videoEnd":336.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97888,"text":"double","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97889,"text":"double","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97890,"text":"sum","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare two double variables, and pass them to the template ''sum'' function. Print the result to the screen.\r\n[!raw!]\r\nint main()\r\n{\r\n {0} a = 4.3;\r\n {1} b = 7.2;\r\n cout << {2}(a, b) << endl;\r\n}","textContent":"[h1]Function Templates [/h1]\r\n\r\nThe same function can be used with other data types, for example doubles: [code format=\"cpp\" codeId=\"277\"]template <class T>\r\nT sum(T a, T b) {\r\n  return a+b;\r\n}\r\n\r\nint main () {\r\n  [b]double [/b]x=7.15, y=15.54;\r\n  cout << sum(x, y) << endl;\r\n}\r\n// Outputs 22.69[/code]\r\nThe compiler automatically calls the function for the corresponding type.\r\n[note]When creating a template type parameter, the keyword [b]typename [/b]may be used as an alternative to the keyword [b]class[/b]: [b]template <typename T>[/b]. \r\nIn this context, the keywords are identical, but throughout this course, we'll use the keyword [b]class[/b].[/note]"},{"id":3793,"number":6,"videoStart":378.0,"videoEnd":443.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78754,"text":"template","isCorrect":true,"properties":{}},{"id":78755,"text":"class","isCorrect":true,"properties":{}},{"id":78756,"text":"T","isCorrect":true,"properties":{}},{"id":78757,"text":"arg","isCorrect":true,"properties":{}},{"id":78758,"text":"generic","isCorrect":false,"properties":{}},{"id":78759,"text":"friend","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a template function ''myFunction'', which takes one argument of generic type T and prints its value to the screen.\r\n[!raw!]\r\n{0} <{1} T>\r\nvoid myFunction({2} arg)\r\n{\r\n cout << {3} << endl;\r\n}","textContent":"[h1]Function Templates [/h1]\r\n\r\nTemplate functions can save a lot of time, because they are written only once, and work with different types. \r\nTemplate functions reduce code maintenance, because duplicate code is reduced significantly. \r\n[note]Enhanced safety is another advantage in using template functions, since it's not necessary to manually copy functions and change types.[/note]"}]}}