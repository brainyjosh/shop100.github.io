{"lesson":{"id":2166,"name":"Abstract Classes","type":0,"mode":1,"videoID":"AU07jJc_qMQ","tags":"abstract-classes","quizzes":[{"id":4277,"number":1,"videoStart":14.0,"videoEnd":197.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":92749,"text":"True","isCorrect":true,"properties":{}},{"id":92750,"text":"False","isCorrect":false,"properties":{}}],"question":"A class containing an abstract method is an abstract class.","textContent":"[h1]Abstraction[/h1]\r\n\r\nData [b]abstraction [/b]provides the outside world with only essential information, in a process of representing essential features without including implementation details.\r\nA good real-world example is a [i]book[/i]. When you hear the term book, you don't know the exact specifics, such as the page count, the color, or the size, but you understand the idea, or abstraction, of a book.\r\nThe concept of [b]abstraction [/b]is that we focus on essential qualities, rather than the specific characteristics of one particular example.\r\n\r\nIn Java, abstraction is achieved using [b]abstract classes[/b] and [b]interfaces[/b].\r\nAn abstract class is defined using the [b]abstract [/b]keyword.\r\n- If a class is declared abstract it cannot be instantiated (you cannot create objects of that type).\r\n- To use an abstract class, you have to inherit it from another class.\r\n- Any class that contains an abstract method should be defined as abstract.\r\n[note]An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon): [b]abstract void walk();[/b][/note]"},{"id":4279,"number":2,"videoStart":197.0,"videoEnd":420.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":101843,"text":"abstract","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":101844,"text":"extends","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":101845,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create an abstract class with an abstract method and inherit from it.\r\n[!raw!]\r\nabstract class Animal {\r\n  public int age;\r\n  public {0} int printAge();\r\n}\r\nclass Dog {1} Animal {\r\n  public {2} printAge() {\r\n    return age;\r\n  }\t\r\n}","textContent":"[h1]Abstract Class[/h1]\r\n\r\nFor example, we can define our Animal class as abstract: [code format=\"java\" ][b]abstract [/b]class Animal {\r\n  int legs = 0;\r\n  [b]abstract [/b]void makeSound();\r\n}[/code]\r\nThe makeSound method is also abstract, as it has no implementation in the superclass.\r\nWe can inherit from the Animal class and define the makeSound() method for the subclass:[code format=\"java\" codeId=\"777\"]class Cat extends Animal {\r\n  public void makeSound() {\r\n    System.out.println(\"Meow\");\r\n  }\r\n}[/code]\r\n[note]Every Animal makes a sound, but each has a different way to do it. That's why we define an abstract class Animal, and leave the implementation of how they make sounds to the subclasses. \r\nThis is used when there is no meaningful definition for the method in the superclass.[/note]"}]}}