{"lesson":{"id":2179,"name":"ArrayList","type":0,"mode":1,"videoID":"s8ju-dZJJ50","tags":"arraylist","quizzes":[{"id":4310,"number":1,"videoStart":2.0,"videoEnd":105.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106117,"text":"Integer","isCorrect":true,"properties":{}},{"id":106118,"text":"new","isCorrect":true,"properties":{}},{"id":106119,"text":"ArrayList","isCorrect":true,"properties":{}},{"id":106120,"text":"array","isCorrect":false,"properties":{}},{"id":106121,"text":"count","isCorrect":false,"properties":{}},{"id":106122,"text":"String","isCorrect":false,"properties":{}}],"question":"Declare an ArrayList to hold 9 Integers.\r\n[!raw!]\r\nArrayList<{0}> ar = \r\n    {1} {2}<Integer>(9);","textContent":"[h1]ArrayList[/h1]\r\n\r\nThe Java API provides special classes to store and manipulate groups of objects.\r\nOne such class is the [b]ArrayList[/b]. Standard Java arrays are of a fixed length, which means that after they are created, they cannot expand or shrink.\r\nOn the other hand, [b]ArrayLists [/b]are created with an initial size, but when this size is exceeded, the collection is automatically enlarged.\r\nWhen objects are removed, the ArrayList may shrink in size. Note that the ArrayList class is in the [b]java.util[/b] package, so it's necessary to import it before using it.\r\nCreate an ArrayList as you would any object. [code format=\"java\" ]import [b]java.util.ArrayList;[/b]\r\n//...\r\n[b]ArrayList [/b]colors = new [b]ArrayList[/b]();[/code]\r\nYou can optionally specify a [b]capacity [/b]and [b]type [/b]of objects the ArrayList will hold: [code format=\"java\" ]ArrayList<[b]String[/b]> colors = new ArrayList<[b]String[/b]>([b]10[/b]);[/code]\r\nThe code above defines an ArrayList of Strings with 10 as its initial size.\r\n[note]ArrayLists store objects. Thus, the type specified must be a class type. You cannot pass, for example, [b]int [/b]as the objects' type. Instead, use the special [b]class types[/b] that correspond to the desired value type, such as [b]Integer [/b]for int, [b]Double [/b]for double, and so on.[/note]"},{"id":4311,"number":2,"videoStart":105.0,"videoEnd":212.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99696,"text":"B","isCorrect":true,"properties":{}},{"id":99697,"text":"A","isCorrect":false,"properties":{}},{"id":99698,"text":"C","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\nArrayList<String> list = new ArrayList<String>();\r\nlist.add(\"A\");\r\nlist.add(\"B\");\r\nlist.add(\"C\");\r\nSystem.out.println(list.get(1));","textContent":"[h1]ArrayList[/h1]\r\n\r\nThe [b]ArrayList [/b]class provides a number of useful methods for manipulating its objects.\r\nThe [b]add[/b]() method adds new objects to the ArrayList. Conversely, the [b]remove[/b]() methods remove objects from the ArrayList.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"793\"]import java.util.ArrayList;\r\n\r\npublic class MyClass {\r\n  public static void main(String[ ] args) {\r\n    ArrayList<String> colors = new ArrayList<String>();\r\n    colors.[b]add[/b](\"Red\");\r\n    colors.[b]add[/b](\"Blue\");\r\n    colors.[b]add[/b](\"Green\");\r\n    colors.[b]add[/b](\"Orange\");\r\n    colors.[b]remove[/b](\"Green\");\r\n\r\n    System.out.println(colors);\r\n  }\r\n}\r\n// Output: [Red, Blue, Orange][/code]\r\n[note]Other useful methods include the following:\r\n- [b]contains[/b](): Returns true if the list contains the specified element \r\n- [b]get[/b](int index): Returns the element at the specified position in the list\r\n- [b]size[/b](): Returns the number of elements in the list\r\n- [b]clear[/b](): Removes all of the elements from the list\r\n\r\nNote: As with arrays, the indexing starts with [b]0[/b].[/note]"}]}}