{"lesson":{"id":2187,"name":"Reading a File","type":0,"mode":1,"videoID":"3RNYUKxAgmw","tags":"files","quizzes":[{"id":4328,"number":1,"videoStart":5.0,"videoEnd":106.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95648,"text":"ArrayList","isCorrect":false,"properties":{}},{"id":95649,"text":"HashMap","isCorrect":false,"properties":{}},{"id":95650,"text":"Scanner","isCorrect":true,"properties":{}},{"id":95651,"text":"Set","isCorrect":false,"properties":{}}],"question":"Which class can be used for reading files?","textContent":"[h1]Reading a File[/h1]\r\n\r\nFiles are useful for storing and retrieving data, and there are a number of ways to read from a files.\r\n One of the simplest ways is to use the [b]Scanner [/b]class from the [b]java.util[/b] package.\r\nThe constructor of the [b]Scanner [/b]class can take a [b]File [/b]object as input.\r\nTo read the contents of a text file at the path \"C:\\\\sololearn\\\\test.txt\", we would need to create a File object with the corresponding path and pass it to the Scanner object.[code format=\"java\"]try {\r\n  [b]File [/b]x = new [b]File[/b](\"C:\\\\sololearn\\\\test.txt\");\r\n  [b]Scanner [/b]sc = new [b]Scanner[/b](x);      \r\n}\r\n catch (FileNotFoundException e) {\r\n\r\n}[/code]\r\n[note]We surrounded the code with a try/catch block, because there's a chance that the file may not exist.[/note]"},{"id":4329,"number":2,"videoStart":106.0,"videoEnd":380.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95652,"text":"Scanner","isCorrect":true,"properties":{}},{"id":95653,"text":"sc","isCorrect":true,"properties":{}},{"id":95654,"text":"next","isCorrect":true,"properties":{}},{"id":95655,"text":"close","isCorrect":true,"properties":{}},{"id":95656,"text":"File","isCorrect":false,"properties":{}},{"id":95657,"text":"new","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to read and print the content of the file a.txt, and then close it.\r\n[!raw!]\r\ntry {\r\n   File f = new File(\"a.txt\");\r\n  Scanner sc = new {0}(f);\r\n  while (sc.hasNext()) {\r\n      String a = {1}.next();\r\n      String b = sc.{2}();\r\n      System.out.println(a + \" \" + b);\r\n  } \r\n  sc.{3}();\r\n} \r\ncatch (Exception e) {\r\n   System.out.println(\"Error\");\r\n}","textContent":"[h1]Reading a File[/h1]\r\n\r\nThe [b]Scanner [/b]class inherits from the [b]Iterator[/b], so it behaves like one.\r\nWe can use the Scanner object's [b]next[/b]() method to read the file's contents. [code format=\"java\"]try {\r\n  File x = new File(\"C:\\\\sololearn\\\\test.txt\");\r\n  Scanner sc = new Scanner(x);\r\n [b] while(sc.hasNext()) {\r\n    System.out.println(sc.next());\r\n  }\r\n[/b]  sc.close();\r\n} catch (FileNotFoundException e) {\r\n  System.out.println(\"Error\");\r\n}[/code]\r\nThe file's contents are output word by word, because the [b]next[/b]() method returns each word separately.\r\n[note]It is always good practice to close a file when finished working with it. One way to do this is to use the Scanner's [b]close[/b]() method.[/note]"}]}}