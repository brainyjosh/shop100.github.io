{"lesson":{"id":2758,"name":"Handling Events","type":0,"mode":1,"videoID":null,"tags":"events","quizzes":[{"id":5846,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":109719,"text":"event handler","isCorrect":true,"properties":{}},{"id":109720,"text":"event description","isCorrect":false,"properties":{}},{"id":109721,"text":"event name","isCorrect":false,"properties":{}},{"id":109722,"text":"event function","isCorrect":false,"properties":{}}],"question":"The type of function that executes when an event occurs is called:","textContent":"[h1]Events[/h1]\r\n\r\nYou can write JavaScript code that executes when an [b]event [/b]occurs, such as when a user clicks an HTML element, moves the mouse, or submits a form.\r\nWhen an event occurs on a target element, a [b]handler [/b]function is executed. \r\nCommon HTML events include: [img id=\"2777\" width=\"100%\"]\r\n[note]Corresponding events can be added to HTML elements as attributes. \r\nFor example: <p [b]onclick=\"someFunc()\"[/b]>some text</p>[/note]"},{"id":5847,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":116187,"text":"onclick","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":116188,"text":"func","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to call func() when the button is clicked.\r\n[!raw!]\r\n<button {0}=\"{1}()\">\r\n  Click Here\r\n</button>","textContent":"[h1]Handling Events[/h1]\r\n\r\nLet's display an alert popup when the user clicks a specified button: [code format=\"html\" codeId=\"962\"]<button [b]onclick=\"show()\"[/b]>Click Me</button>\r\n<script>\r\nfunction show() {\r\n  alert(\"Hi there\");\r\n}\r\n</script>[/code]\r\nEvent handlers can be assigned to elements.\r\n[b]For example:[/b] [code format=\"js\" codeId=\"963\"]var x = document.getElementById(\"demo\");\r\nx.onclick = function () {\r\n  document.body.innerHTML = Date();\r\n}[/code]"},{"id":5848,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":109849,"text":"onload","isCorrect":true,"properties":{}},{"id":109850,"text":"clear()","isCorrect":true,"properties":{}},{"id":109851,"text":"onclick","isCorrect":false,"properties":{}},{"id":109852,"text":"onblur","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to call the clear() function after body is loaded.\r\n[!raw!]\r\n<body {0}=\"{1}\">\r\n\r\n</body> ","textContent":"[h1]Events[/h1]\r\n\r\nThe [b]onload [/b]and [b]onunload [/b]events are triggered when the user enters or leaves the page. These can be useful when performing actions after the page is loaded. [code format=\"html\" ]<body [b]onload[/b]=\"doSomething()\">[/code]\r\nSimilarly, the [b]window.onload[/b] event can be used to run code after the whole page is loaded. [code format=\"js\" ][b]window.onload[/b] = function() {\r\n   //some code\r\n}[/code]\r\nThe [b]onchange [/b]event is mostly used on textboxes. The event handler gets called when the text inside the textbox changes and focus is lost from the element.\r\n[b]For example:[/b][code format=\"html\" codeId=\"964\"]<input type=\"text\" id=\"name\" [b]onchange[/b]=\"change()\">\r\n<script>\r\nfunction change() {\r\n var x = document.getElementById(\"name\");\r\n x.value= x.value.toUpperCase();\r\n}\r\n</script>[/code]"},{"id":5849,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":109743,"text":"Yes","isCorrect":true,"properties":{}},{"id":109744,"text":"No","isCorrect":false,"properties":{}}],"question":"Can multiple event handlers be added to a single element?","textContent":"[h1]Event Listeners[/h1]\r\n\r\nThe [b]addEventListener[/b]() method attaches an event handler to an element without overwriting existing event handlers. You can add [i]many [/i]event handlers to one element.\r\nYou can also add many event handlers of the same type to one element, i.e., two \"click\" events.[code format=\"js\" ]element.[b]addEventListener[/b](event, function, useCapture);[/code]\r\nThe first parameter is the event's [b]type [/b](like \"click\" or \"mousedown\").\r\nThe second parameter is the [b]function [/b]we want to call when the event occurs.\r\nThe third parameter is a Boolean value specifying whether to use event [b]bubbling [/b]or event [b]capturing[/b]. This parameter is optional, and will be described in the next lesson.\r\n[note]Note that you don't use the \"[b]on[/b]\" prefix for this event; use \"[b]click[/b]\" instead of \"[b]onclick[/b]\".[/note]\r\n[b]Example:[/b] [code format=\"js\" ]element.[b]addEventListener(\"click\", myFunction)[/b];\r\nelement.[b]addEventListener(\"mouseover\", myFunction);[/b]\r\n\r\nfunction myFunction() {\r\n  alert(\"Hello World!\");\r\n}[/code]\r\nThis adds two event listeners to the element.\r\nWe can remove one of the listeners: [code format=\"js\" ]element.[b]removeEventListener[/b](\"mouseover\", myFunction);[/code]\r\nLet's create an event handler that removes itself after being executed: [code format=\"html\" codeId=\"965\"]<button id=\"demo\">Start</button>\r\n\r\n<script>\r\nvar btn = document.getElementById(\"demo\");\r\n[b]btn.addEventListener[/b](\"click\", myFunction);\r\n\r\nfunction myFunction() {\r\n  alert(Math.random());\r\n  btn.[b]removeEventListener[/b](\"click\", myFunction);\r\n}\r\n</script>[/code]\r\nAfter clicking the button, an alert with a random number displays and the event listener is removed.\r\n[note]Internet Explorer version 8 and lower do not support the [b]addEventListener[/b]() and [b]removeEventListener[/b]() methods. However, you can use the document.[b]attachEvent[/b]() method to attach event handlers in Internet Explorer.[/note]"}]}}