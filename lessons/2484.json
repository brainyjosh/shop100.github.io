{"lesson":{"id":2484,"name":"More on Function Arguments","type":0,"mode":1,"videoID":null,"tags":"function-arguments","quizzes":[{"id":5189,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104597,"text":"As the tuple *args","isCorrect":false,"properties":{}},{"id":104598,"text":"As the list *args","isCorrect":false,"properties":{}},{"id":104599,"text":"As the tuple args","isCorrect":true,"properties":{}}],"question":"How is *args accessed inside a function?","textContent":"[h1]Function Arguments[/h1]\r\n\r\nPython allows to have function with [b]varying number of arguments[/b].\r\nUsing [b]*args[/b] as a function parameter enables you to pass an arbitrary number of arguments to that function. The arguments are then accessible as the tuple [b]args [/b]in the body of the function. \r\n[b]Example:[/b] [code format=\"py\" codeId=\"443\"]def function(named_arg, [b]*args[/b]):\r\n   print(named_arg)\r\n   print(args)\r\n\r\nfunction(1, 2, 3, 4, 5)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n1\r\n(2, 3, 4, 5)\r\n>>>[/code]\r\n[note]The parameter [b]*args[/b] must come after the named parameters to a function.\r\nThe name [b]args [/b]is just a convention; you can choose to use another.[/note]"},{"id":5190,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104600,"text":"A non-default argument follows a default argument","isCorrect":true,"properties":{}},{"id":104601,"text":"*args is called *argums","isCorrect":false,"properties":{}},{"id":104602,"text":"*argums is the last argument","isCorrect":false,"properties":{}}],"question":"What is wrong with this function definition?\r\ndef function(x, y=7, z, *argums):","textContent":"[h1]Default Values [/h1]\r\n\r\nNamed parameters to a function can be made optional by giving them a [b]default value[/b]. \r\nThese must come after named parameters without a default value.\r\n[b]Example:[/b][code format=\"py\" codeId=\"444\"]def function(x, y, [b]food=\"spam\"[/b]):\r\n   print(food)\r\n\r\nfunction(1, 2)\r\nfunction(3, 4, \"egg\")[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\nspam\r\negg \r\n>>>[/code]\r\n[note]In case the argument is passed in, the default value is ignored. \r\nIf the argument is not passed in, the default value is used.[/note]"},{"id":5191,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":107223,"text":"A list","isCorrect":false,"properties":{}},{"id":107224,"text":"A dictionary","isCorrect":true,"properties":{}},{"id":107225,"text":"A set","isCorrect":false,"properties":{}}],"question":"What kind of object is kwargs?","textContent":"[h1]Function Arguments[/h1]\r\n\r\n[b]**kwargs [/b](standing for keyword arguments) allows you to handle named arguments that you have not defined in advance.\r\nThe keyword arguments return a dictionary in which the keys are the argument names, and the values are the argument values.\r\n[b]Example:[/b][code format=\"py\" codeId=\"445\"]def my_func(x, y=7, *args, [b]**kwargs[/b]):\r\n   print(kwargs)\r\n\r\nmy_func(2, 3, 4, 5, 6, a=7, b=8)[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\n{'a': 7, 'b': 8}\r\n>>>[/code]\r\n[b]a[/b] and [b]b[/b] are the names of the arguments that we passed to the function call.\r\n[note]The arguments returned by [b]**kwargs[/b] are not included in [b]*args[/b].[/note]"}]}}