{"lesson":{"id":2172,"name":"Anonymous Classes","type":0,"mode":1,"videoID":"ihAzMaUFjgY","tags":"anonymous-classes","quizzes":[{"id":4294,"number":1,"videoStart":26.0,"videoEnd":215.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99628,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99629,"text":"@","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99630,"text":"start","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to override the start method of the Machine class.\r\n[!raw!]\r\nMachine m = {0} Machine() {\r\n   {1}Override public void {2}() {\r\n      System.out.println(\"Hi\");\r\n   }\r\n}","textContent":"[h1]Anonymous Classes[/h1]\r\n\r\n[b]Anonymous classes[/b] are a way to extend the existing classes on the fly.\r\nFor example, consider having a class Machine: [code format=\"java\" ]class Machine {\r\n  public void start() {\r\n    System.out.println(\"Starting...\");\r\n  }\r\n}[/code]\r\nWhen creating the Machine object, we can change the start method on the fly.[code format=\"java\" codeId=\"782\"]public static void main(String[ ] args) {\r\n  Machine m = new Machine() {\r\n    @Override public void start() {\r\n      System.out.println(\"Wooooo\");\r\n    }\r\n  };\r\n  m.start();\r\n}\r\n//Outputs \"Wooooo\";[/code]\r\nAfter the constructor call, we have opened the curly braces and have overridden the [b]start [/b]method's implementation on the fly. \r\n[note]The [b]@Override[/b] annotation is used to make your code easier to understand, because it makes it more obvious when methods are overridden.[/note]"},{"id":4295,"number":2,"videoStart":216.0,"videoEnd":277.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105194,"text":"A","isCorrect":true,"properties":{}},{"id":105195,"text":"new","isCorrect":true,"properties":{}},{"id":105196,"text":"print","isCorrect":true,"properties":{}},{"id":105197,"text":"\"Hello\"","isCorrect":true,"properties":{}},{"id":105198,"text":"String","isCorrect":false,"properties":{}},{"id":105199,"text":"extends","isCorrect":false,"properties":{}},{"id":105200,"text":"B","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to print \"Hello\".\r\n[!raw!]\r\nclass A {\r\n   public void print() {\r\n   System.out.println(\"A\");\r\n   }\t\t\r\n}\r\nclass B {\t\t\t\t\r\n   public static void main(String[ ] args) {\t\r\n    {0} object = {1} A() {\r\n      @Override public void {2}() {\r\n       System.out.println({3});\r\n       }\r\n    };\r\n    object.print();\r\n   }\t\t\r\n}","textContent":"[h1]Anonymous Classes[/h1]\r\n\r\nThe modification is applicable only to the current object, and not the class itself. So if we create another object of that class, the start method's implementation will be the one defined in the class.[code format=\"java\" codeId=\"783\"]class Machine {\r\n  public void start() {\r\n    System.out.println(\"Starting...\");\r\n  }\r\n}  \r\npublic static void main(String[ ] args) {\r\n  Machine m1 = new Machine() {\r\n    @Override public void start() {\r\n      System.out.println(\"Wooooo\");\r\n    }\r\n  };\r\n  Machine m2 = new Machine();\r\n  m2.start();\r\n  }\r\n//Outputs \"Starting...\"[/code]"}]}}