{"lesson":{"id":2768,"name":"for Loops","type":0,"mode":1,"videoID":null,"tags":"loops","quizzes":[{"id":5686,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112962,"text":"for","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112963,"text":"in","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112964,"text":"end","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to output the characters from \"a\" to \"d\".\r\n[!raw!]\r\n{0} x {1} (\"a\"..\"d\")\r\n  puts x\r\n{2}","textContent":"[h1]for Loop[/h1]\r\n\r\nThe [b]for [/b]loop is a useful statement when you need to loop over a specific set of values, for example, a range.\r\nThe [b]for [/b]loop consists of an empty variable and a range. At each iteration of the loop, the empty variable will be assigned the corresponding element of the range. \r\n[b]For example:[/b][code format=\"rb\" codeId=\"1007\"][b]for [/b]i [b]in [/b](1..10)\r\n  puts i\r\n[b]end[/b][/code]\r\nThis will output the numbers 1 to 10. \r\nDuring the first loop the variable [b]i[/b] will be assigned the first value of the range, 1.\r\nOn the second loop, it will be assigned to the value 2, and so on, until the end of the range.\r\n[note]The [b]for [/b]loop executes a block of code once for each element in the range.[/note]"},{"id":5881,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112971,"text":"in","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112972,"text":"break","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":112973,"text":"==","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to stop the loop if the value of x is equal to 8.\r\n[!raw!]\r\nfor x {0} (0...99)\r\n  puts x\r\n  {1} if x {2} 8\r\nend","textContent":"[h1]break[/h1]\r\n\r\nThe [b]break [/b]statement can be used to stop a loop.\r\n[b]For example:[/b][code format=\"rb\" codeId=\"1008\"]for i in 1..5\r\n  [b]break[/b] if i > 3\r\n  puts i\r\nend\r\n\r\n# outputs:\r\n# 1\r\n# 2\r\n# 3[/code]\r\n[note]The loop stops executing when the condition i > 3 is met.[/note]"},{"id":5882,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113698,"text":"retry","isCorrect":false,"properties":{}},{"id":113699,"text":"redo","isCorrect":true,"properties":{}},{"id":113700,"text":"break","isCorrect":false,"properties":{}},{"id":113701,"text":"next","isCorrect":false,"properties":{}}],"question":"Which of the following keywords repeats the current loop iteration?","textContent":"[h1]next[/h1]\r\n\r\nSimilarly, the [b]next [/b]statement can be used to skip one iteration of the loop and continue with the next one.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1009\"]for i in 0..10\r\n  [b]next[/b] if i %2 == 0\r\n  puts i\r\nend[/code]\r\nThis will output only the odd numbers from 0 to 10 because the even numbers will skip the loop iteration.\r\n[note]Ruby also has the [b]redo [/b]statement, which causes the current loop iteration to repeat.\r\nThe [b]retry [/b]statement causes the whole loop to start again from the beginning.[/note]"},{"id":5883,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112988,"text":"loop","isCorrect":true,"properties":{}},{"id":112989,"text":"do","isCorrect":true,"properties":{}},{"id":112990,"text":"break","isCorrect":true,"properties":{}},{"id":112991,"text":"if","isCorrect":false,"properties":{}},{"id":112992,"text":"else","isCorrect":false,"properties":{}},{"id":112993,"text":"redo","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to create a valid loop.\r\n[!raw!]\r\nx = 0\r\n{0} {1}\r\n  x += 2\r\n  puts x\r\n  {2} if x > 25\r\nend","textContent":"[h1]loop do[/h1]\r\n\r\nAnother looping statement in Ruby is the [b]loop do[/b] statement.\r\nIt allows code to execute until a [b]break [/b]condition is achieved.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1010\"]x = 0\r\n[b]loop do[/b]\r\n  puts x\r\n  x += 1\r\n  [b]break [/b]if x > 10\r\nend[/code]\r\nThis will print the numbers 0 to 10. When x > 10 evaluates to true, the loop will stop.\r\n[note]If we do not include a [b]break [/b]condition, the loop will run forever.[/note]"}]}}