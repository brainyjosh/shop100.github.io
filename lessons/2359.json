{"lesson":{"id":2359,"name":"Subscripts","type":0,"mode":1,"videoID":null,"tags":"subscripts","quizzes":[{"id":4829,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96727,"text":"access values from an instance","isCorrect":true,"properties":{}},{"id":96728,"text":"access the methods of an instance","isCorrect":false,"properties":{}},{"id":96729,"text":"create structures","isCorrect":false,"properties":{}},{"id":96730,"text":"reset values in an array","isCorrect":false,"properties":{}}],"question":"Subscripts are used to...","textContent":"[h1]Subscripts[/h1]\r\n\r\nClasses, structures, and enumerations can define [b]subscripts[/b], which are shortcuts for accessing the member elements of a collection, list, or sequence. Subscripts enable you to query instances of a type by writing one or more values in square brackets after the instance name.\r\nSubscript definitions are written using the [b]subscript [/b]keyword, and specify one or more input parameters and a return type, in the same way as instance methods.\r\nHere's an example of a [b]read-only subscript [/b]implementation, which defines a [i]TimesTable [/i]structure to represent an n-times-table of integers: [code format=\"swift\"]struct TimesTable {\r\n   let multiplier: Int\r\n   [b]subscript[/b](index: Int) -> Int {\r\n      return multiplier * index\r\n   }\r\n}\r\nlet threeTimesTable = TimesTable(multiplier: 3)\r\nprint(threeTimesTable[5])\r\n// prints \"15\"[/code]\r\n[note]Multiple subscripts can be defined for a single type. The appropriate subscript overload to use is selected according to the type of index value you pass to the subscript. Subscripts are not limited to a single dimension, and can be defined using multiple input parameters that best suit your custom type's needs.[/note]"},{"id":4830,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96731,"text":"16","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nstruct Test {\r\n  var num = 0\r\n  subscript(tmp: Int) -> Int {\r\n    return tmp*num\r\n  }\r\n}\r\nvar t = Test(num:8)\r\nprint(t[2])","textContent":"[h1]Subscripts[/h1]\r\n\r\nA [i]Matrix [/i]is a good example how a subscript is used.\r\nThe following example defines a [i]Matrix [/i]structure, which represents a two-dimensional matrix of [i]Double[/i] values. The subscript takes two integer parameters:[code format=\"swift\"]struct Matrix {\r\n  let rows: Int, columns: Int\r\n  var grid: [Double]\r\n  init(rows: Int, columns: Int) {\r\n     self.rows = rows\r\n     self.columns = columns\r\n     grid = Array(count: rows * columns, repeatedValue: 0.0)\r\n  }\r\n  [b]subscript[/b](row: Int, column: Int) -> Double {\r\n     [b]get [/b]{\r\n        return grid[(row * columns) + column]\r\n     }\r\n     [b]set [/b]{\r\n        grid[(row * columns) + column] = newValue\r\n     }\r\n  }\r\n}[/code]\r\nMatrix provides an initializer that takes two parameters called [i]rows [/i]and [i]columns [/i]to create an array large enough to store values of type Double. Each position in the matrix is given an initial value of 0.0.\r\n[note]Initialization is described in detail in the coming lessons.[/note]\r\nYou can construct a new Matrix instance by passing an appropriate row and column count to its initializer: [code format=\"swift\"]var matrix = Matrix(rows: 2, columns: 2)[/code]\r\nThis results in the following grid: [img id=\"984\" width=\"70%\"] \r\nValues in the matrix can be set by passing comma-separated [i]row [/i]and [i]column [/i]values into the [b]subscript[/b].: [code format=\"swift\"]matrix[0, 1] = 1.5\r\nmatrix[1, 0] = 3.2[/code]\r\nThis results in the following: [img id=\"985\" width=\"50%\"]"}]}}