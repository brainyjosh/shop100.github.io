{"lesson":{"id":2475,"name":"Introduction","type":0,"mode":1,"videoID":null,"tags":"regular-expressions","quizzes":[{"id":5155,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":88047,"text":"Checking whether an email address is of the correct format","isCorrect":false,"properties":{}},{"id":88048,"text":"Checking whether an email address is real","isCorrect":true,"properties":{}},{"id":88049,"text":"Changing the URL part of an email address","isCorrect":false,"properties":{}}],"question":"Which of the following tasks CANNOT be performed using regular expressions?","textContent":"[h1]Regular Expressions[/h1]\r\n\r\n[b]Regular expressions[/b] are a powerful tool for various kinds of string manipulation.\r\nThey are a domain specific language (DSL) that is present as a library in most modern programming languages, not just Python.\r\nThey are useful for two main tasks:\r\n - verifying that strings match a [b]pattern [/b](for instance, that a string has the format of an email address), \r\n - performing substitutions in a string (such as changing all American spellings to British ones).\r\n[note]Domain specific languages are highly specialized mini programming languages.\r\nRegular expressions are a popular example, and SQL (for database manipulation) is another. \r\nPrivate domain-specific languages are often used for specific industrial purposes.[/note]"},{"id":5156,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104635,"text":"sp","isCorrect":false,"properties":{}},{"id":104636,"text":"spamspam","isCorrect":false,"properties":{}},{"id":104637,"text":"pamspam","isCorrect":true,"properties":{}}],"question":"Which of these patterns would not re.match the string \"spamspamspam\"?","textContent":"[h1]Regular Expressions[/h1]\r\n\r\nRegular expressions in Python can be accessed using the [b]re [/b]module, which is part of the standard library. \r\nAfter you've defined a regular expression, the[b] re.match[/b] function can be used to determine whether it matches at the [b]beginning [/b]of a string.\r\nIf it does, [b]match[/b] returns an object representing the match, if not, it returns [b]None[/b].\r\nTo avoid any confusion while working with regular expressions, we would use raw strings as [b]r\"expression\"[/b].\r\nRaw strings don't escape anything, which makes use of regular expressions easier.\r\n\r\n[b]Example: [/b][code format=\"py\" codeId=\"421\"]import [b]re[/b]\r\n\r\n[b]pattern = r\"spam\"[/b]\r\n\r\nif [b]re.match[/b](pattern, \"spamspamspam\"):\r\n   print(\"Match\")\r\nelse:\r\n   print(\"No match\")[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nMatch\r\n>>>[/code]\r\nThe above example checks if the pattern \"spam\" matches the string and prints \"Match\" if it does.\r\n[note]Here the pattern is a simple word, but there are various characters, which would have special meaning when they are used in a regular expression.[/note]"},{"id":5157,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104638,"text":"findlist","isCorrect":true,"properties":{}},{"id":104639,"text":"findall","isCorrect":false,"properties":{}},{"id":104640,"text":"search","isCorrect":false,"properties":{}}],"question":"Which of these is not a function in the re module?","textContent":"[h1]Regular Expressions[/h1]\r\n\r\nOther functions to match patterns are [b]re.search[/b] and [b]re.findall[/b]. \r\nThe function [b]re.search[/b] finds a match of a pattern anywhere in the string.\r\nThe function [b]re.findall[/b] returns a list of all substrings that match a pattern.\r\n\r\n[b]Example:[/b] [code format=\"py\" codeId=\"422\"]import re\r\n\r\npattern = r\"spam\"\r\n\r\nif re.[b]match[/b](pattern, \"eggspamsausagespam\"):\r\n   print(\"Match\")\r\nelse:\r\n   print(\"No match\")\r\n\r\nif re.[b]search[/b](pattern, \"eggspamsausagespam\"):\r\n   print(\"Match\")\r\nelse:\r\n   print(\"No match\")\r\n    \r\nprint(re.[b]findall[/b](pattern, \"eggspamsausagespam\"))[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nNo match\r\nMatch\r\n['spam', 'spam']\r\n>>>[/code]\r\nIn the example above, the [b]match [/b]function did not match the pattern, as it looks at the beginning of the string.\r\nThe [b]search [/b]function found a match in the string.\r\n[note]The function [b]re.finditer[/b] does the same thing as[b] re.findall[/b], except it returns an iterator, rather than a list. [/note]"},{"id":5158,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":112707,"text":"re","isCorrect":true,"properties":{}},{"id":112708,"text":"start()","isCorrect":true,"properties":{}},{"id":112709,"text":"end()","isCorrect":true,"properties":{}},{"id":112710,"text":"match","isCorrect":false,"properties":{}},{"id":112711,"text":"reg","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to print the starting and ending positions of the match.\r\n[!raw!]\r\nimport {0}\r\n\r\npattern = r\"test\"\r\nmatch = re.search(pattern, \"some test\")\r\nprint(match.{1})\r\nprint(match.{2})","textContent":"[h1]Regular Expressions[/h1]\r\n\r\nThe regex search returns an object with several methods that give details about it. \r\nThese methods include [b]group[/b] which returns the string matched, [b]start [/b]and [b]end[/b] which return the start and ending positions of the first match, and [b]span[/b] which returns the start and end positions of the first match as a tuple.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"423\"]import re\r\n\r\npattern = r\"pam\"\r\n\r\nmatch = re.[b]search[/b](pattern, \"eggspamsausage\")\r\nif match:\r\n   print(match.group())\r\n   print(match.start())\r\n   print(match.end())\r\n   print(match.span())[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\npam\r\n4\r\n7\r\n(4, 7)\r\n>>>[/code]"},{"id":5348,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104646,"text":"re","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104647,"text":"sub","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104648,"text":"0","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104649,"text":"num","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to replace all 9s in the string with 0s.\r\n[!raw!]\r\nimport {0}\r\n\r\nnum = \"07987549836\"\r\npattern = r\"9\"\r\nnum = re.{1}(pattern, \"{2}\", {3})\r\nprint(num)","textContent":"[h1]Search & Replace[/h1]\r\n\r\nOne of the most important [b]re [/b]methods that use regular expressions is [b]sub[/b].\r\n[b]Syntax:[/b][code format=\"py\" ]re.[b]sub[/b](pattern, repl, string, max=0)[/code]\r\nThis method replaces all occurrences of the [b]pattern [/b]in string with [b]repl[/b], substituting all occurrences, unless [b]max[/b] provided. This method returns the modified string. \r\n[b]Example:[/b] [code format=\"py\" codeId=\"424\"]import re\r\n\r\nstr = \"My name is David. Hi David.\"\r\npattern = r\"David\"\r\nnewstr = re.sub(pattern, \"Amy\", str)\r\nprint(newstr)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nMy name is Amy. Hi Amy.\r\n>>>[/code]"}]}}