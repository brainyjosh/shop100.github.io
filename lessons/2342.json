{"lesson":{"id":2342,"name":"Control Transfer Statements","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4757,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106542,"text":"while","isCorrect":true,"properties":{}},{"id":106543,"text":"if","isCorrect":true,"properties":{}},{"id":106544,"text":"continue","isCorrect":true,"properties":{}},{"id":106545,"text":"for","isCorrect":false,"properties":{}},{"id":106546,"text":"else","isCorrect":false,"properties":{}},{"id":106547,"text":"stop","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to compose a valid while loop that skips the even numbers.\r\n[!raw!]\r\nvar num = 0\r\n{0} num < 10 {\r\n   {1} num % 2 == 0 {\r\n      {2}\r\n   }\r\n   print(num)\r\n}","textContent":"[h1]Control Transfer[/h1]\r\n\r\nControl transfer statements alter the code execution by transferring control from one piece of code to another. Swift's four control transfer statements are [i]continue[/i], [i]break[/i], [i]fallthrough[/i], and [i]return [/i](which will be discussed in the upcoming lessons).\r\n\r\n[h2]Continue[/h2]\r\nThe [b]continue [/b]statement stops the loop, then restarts it at the beginning of its next cycle.\r\nThe example below shows how to use the continue statement to skip over even numbers.\r\n[code format=\"swift\" ]for num in 1...10 {\r\n   if num%2 == 0 {\r\n      [b]continue[/b]\r\n   }\r\n   print(num)\r\n}[/code]\r\n[note]A for loop with a condition and an incrementer still evaluates the incrementer after the continue statement is initiated. The loop itself continues to work as usual; only the code within the loop's body is skipped.[/note]"},{"id":4758,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105172,"text":"while","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":105173,"text":"break","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to end the while loop when x equals 5.\r\n[!raw!]\r\nvar x = 0\r\n{0} x < 10 {\r\n   if x == 5 {\r\n      {1}\r\n   }\r\n  x++\r\n}","textContent":"[h1]Break[/h1]\r\n\r\nUse the [b]break [/b]statement to immediately end the execution of an entire control flow statement. Also, the break statement is used within a switch statement or a loop statement to terminate its execution sooner than would otherwise be the case.\r\n\r\n[h2]Break in a Loop Statement[/h2]\r\nWhen a [b]break [/b]statement is used within a loop statement, the loop's execution immediately stops. Control transfers to the first line of code following the loop's closing brace (}). The current iteration's remaining code is skipped, and no further iterations of the loop are initiated.\r\nFor example, you can have a loop that breaks out when the value of [b]a[/b] becomes less than that of [b]b[/b]:\r\n[code format=\"swift\" ]var b = 7\r\nvar a = 10\r\nwhile a > 0 {\r\n   if(a < b) {\r\n     [b]break[/b]\r\n   }\r\n   a--\r\n}[/code]\r\n[h2]Break in a Switch Statement[/h2]\r\nA [b]break [/b]causes a switch statement to end its execution immediately, and transfers control to the first line of code that follows the switch statement's closing brace (}).[code format=\"swift\" ]var a = 5\r\nvar letter = \"X\"\r\nswitch a {\r\n   case 1:\r\n     letter = \"A\"\r\n   case 2: \r\n     letter = \"B\"\r\n   default: \r\n     [b]break[/b]\r\n}\r\n[/code]\r\nThis example breaks out of the switch statement as soon as the default case is matched.\r\n[note]Always use a [b]break [/b]statement to ignore a switch case.[/note]"},{"id":4759,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96567,"text":"Yes","isCorrect":true,"properties":{}},{"id":96568,"text":"No","isCorrect":false,"properties":{}}],"question":"Does the fallthrough keyword cause code execution to move directly to the statements inside the next case, without checking the case conditions?","textContent":"[h1]Fallthrough[/h1]\r\n\r\nIn Swift, switch statements do not fall through the bottom of each case into the next. Instead, the entire switch statement completes its execution when the first matching case is completed. \r\nBy contrast, C requires insertion of an explicit [b]break [/b]statement at the end of every switch case to prevent [b]fallthrough[/b]. By eliminating default fallthrough, Swift allows for more concise and predictable switch statements in comparison with C, and thus avoids inadvertently executing multiple switch cases.\r\n\r\nIn cases that require C-style fallthrough behavior, use the [b]fallthrough [/b]keyword on a case-by-case basis. The example below uses fallthrough to create a number's textual description. [code format=\"swift\"]let myInt = 5\r\nvar desc = \"The number \\(myInt) is\"\r\nswitch myInt {\r\n   case 2, 3, 5, 7, 11, 13, 17, 19:\r\n      desc += \" a prime number, and also\"\r\n      [b]fallthrough[/b]\r\n   default:\r\n     desc += \" an integer.\"\r\n}\r\nprint(desc)[/code]\r\nThis prints \"The number 5 is a prime number, and also an integer.\"\r\n\r\nIf [i]myInt[/i]'s value is one of the prime numbers in the list, text noting that the number is prime is appended to the end of the description. The [b]fallthrough [/b]keyword then causes it to \"fall into\" the default case.\r\n[note]The [b]fallthrough [/b]keyword does not check case conditions in the switch case into which execution falls. As with Câ€™s standard switch statement behavior, the [b]fallthrough [/b]keyword moves code execution directly to the statements inside the next (or default) case block.[/note]"}]}}