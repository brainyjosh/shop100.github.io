{"lesson":{"id":2472,"name":"Properties","type":0,"mode":1,"videoID":null,"tags":"properties","quizzes":[{"id":5144,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98288,"text":"@property","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98289,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98290,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create an \"isAdult\" property.\r\n[!raw!]\r\nclass Person:\r\n  def __init__(self, age):\r\n    self.age = int(age)\r\n\r\n  {0}\r\n  def isAdult(self):\r\n    if self.age > 18{1}\r\n      return True\r\n    else:\r\n      {2} False","textContent":"[h1]Properties[/h1]\r\n\r\n[b]Properties [/b]provide a way of customizing access to instance attributes. \r\nThey are created by putting the [b]property[/b] decorator above a method, which means when the instance attribute with the same name as the method is accessed, the method will be called instead. \r\nOne common use of a property is to make an attribute [b]read-only[/b].\r\n[b]Example:[/b][code format=\"py\" codeId=\"420\"]class Pizza:\r\n  def __init__(self, toppings):\r\n    self.toppings = toppings\r\n    \r\n  [b]@property[/b]\r\n  def pineapple_allowed(self):\r\n    return False\r\n\r\npizza = Pizza([\"cheese\", \"tomato\"])\r\nprint(pizza.pineapple_allowed)\r\npizza.pineapple_allowed = True[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nFalse\r\n\r\nAttributeError: can't set attribute\r\n>>>[/code]"},{"id":5145,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104765,"text":"@egg.setter","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Define a decorator that would be used to add a setter to the property egg.","textContent":"[h1]Properties[/h1]\r\n\r\nProperties can also be set by defining [b]setter/getter[/b] functions.\r\nThe [b]setter [/b]function sets the corresponding property's value.\r\nThe [b]getter [/b]gets the value.\r\nTo define a [b]setter[/b], you need to use a decorator of the same name as the property, followed by a dot and the [b]setter[/b] keyword.\r\nThe same applies to defining [b]getter [/b]functions.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"950\"]class Pizza:\r\n  def __init__(self, toppings):\r\n    self.toppings = toppings\r\n    self._pineapple_allowed = False\r\n\r\n  @property\r\n  def pineapple_allowed(self):\r\n    return self._pineapple_allowed\r\n\r\n  [b]@pineapple_allowed.setter[/b]\r\n  def pineapple_allowed(self, value):\r\n    if value:\r\n      password = input(\"Enter the password: \")\r\n      if password == \"Sw0rdf1sh!\":\r\n        self._pineapple_allowed = value\r\n      else:\r\n        raise ValueError(\"Alert! Intruder!\")\r\n\r\npizza = Pizza([\"cheese\", \"tomato\"])\r\nprint(pizza.pineapple_allowed)\r\npizza.pineapple_allowed = True\r\nprint(pizza.pineapple_allowed)[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\nFalse\r\nEnter the password to permit pineapple: Sw0rdf1sh!\r\nTrue[/code]"}]}}