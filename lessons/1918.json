{"lesson":{"id":1918,"name":"Exceptions","type":0,"mode":1,"videoID":"mFAaqmj399I","tags":"exceptions","quizzes":[{"id":3806,"number":1,"videoStart":4.0,"videoEnd":34.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78814,"text":"...used to declare a class","isCorrect":false,"properties":{}},{"id":78815,"text":"...used to handle error in the program","isCorrect":true,"properties":{}},{"id":78816,"text":"...completely useless","isCorrect":false,"properties":{}}],"question":"Exceptions are...","textContent":"[h1]Exceptions[/h1]\r\n\r\nProblems that occur during program execution are called [b]exceptions[/b].\r\nIn C++ exceptions are responses to anomalies that arise while the program is running, such as an attempt to divide by zero.\r\n[note]Tap [b]Continue [/b]to learn about C++ mechanisms for handling exceptions.[/note]"},{"id":3807,"number":2,"videoStart":35.0,"videoEnd":133.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95277,"text":"throw","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the keyword that is used to throw an exception in C++.","textContent":"[h1]Throwing Exceptions[/h1]\r\n\r\nC++ exception handling is built upon three keywords: [b]try[/b], [b]catch[/b], and [b]throw[/b].\r\n[b]throw[/b] is used to throw an exception when a problem shows up.\r\n[b]For example:[/b] [code format=\"cpp\"]int motherAge = 29;\r\nint sonAge = 36;\r\nif (sonAge > motherAge) {\r\n  [b]throw[/b] \"Wrong age values\";\r\n}[/code]\r\nThe code looks at [b]sonAge [/b]and [b]motherAge[/b], and throws an exception if [b]sonAge [/b]is found to be the greater of the two.\r\n[note]In the [b]throw [/b]statement, the operand determines a type for the exception. This can be any expression. The type of the expression's result will determine the type of the exception thrown.[/note]"},{"id":3809,"number":3,"videoStart":134.0,"videoEnd":316.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97897,"text":"try","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97898,"text":"throw","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97899,"text":"catch","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function ''foo'', which throws an exception with ''-1'' value if its parameter is greater than 100. Then have ''foo'' catch its exception and prints ''error!'' to the screen.\r\n[!raw!]\r\nvoid foo(int arg)\r\n{\r\n{0} {\r\n if (arg > 100) {1} -1;\r\n   }  \r\n{2} (int x) {\r\n cout << \"error!\" << endl; \r\n   }\r\n}","textContent":"[h1]Catching Exceptions[/h1]\r\n\r\nA [b]try [/b]block identifies a block of code that will activate specific exceptions. It's followed by one or more [b]catch [/b]blocks. The [b]catch [/b]keyword represents a block of code that executes when a particular exception is thrown. \r\nCode that could generate an exception is surrounded with the [b]try/catch [/b]block.\r\nYou can specify what type of exception you want to catch  by the exception declaration that appears in parentheses following the keyword [b]catch[/b].\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"282\"][b]try [/b]{\r\n  int motherAge = 29;\r\n  int sonAge = 36;\r\n  if (sonAge > motherAge) {\r\n   [b]throw [/b]99;\r\n  }\r\n} \r\n[b]catch[/b] (int x) {\r\n  cout<<\"Wrong age values - Error \"<<x;\r\n}\r\n\r\n//Outputs \"Wrong age values - Error 99\"[/code]\r\nThe [b]try [/b]block throws the exception, and the [b]catch [/b]block then handles it.\r\nThe error code 99, which is an integer, appears in the [b]throw [/b]statement, so it results in an exception of type [b]int[/b].\r\n[note]Multiple [b]catch [/b]statements may be listed to handle various exceptions in case multiple exceptions are thrown by the try block.[/note]"}]}}