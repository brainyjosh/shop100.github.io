{"lesson":{"id":2460,"name":"Lambdas","type":0,"mode":1,"videoID":null,"tags":"lambdas","quizzes":[{"id":5100,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98199,"text":"lombdas","isCorrect":false,"properties":{}},{"id":98200,"text":"lamdas","isCorrect":false,"properties":{}},{"id":98201,"text":"lambdas","isCorrect":true,"properties":{}}],"question":"What are anonymous functions called?","textContent":"[h1]Lambdas[/h1]\r\n\r\nCreating a function normally (using [b]def[/b]) assigns it to a variable automatically. \r\nThis is different from the creation of other objects - such as strings and integers - which can be created on the fly, without assigning them to a variable. \r\nThe same is possible with functions, provided that they are created using [b]lambda[/b] syntax. Functions created this way are known as [b]anonymous[/b].\r\nThis approach is most commonly used when passing a simple function as an argument to another function. The syntax is shown in the next example and consists of the [b]lambda [/b]keyword followed by a list of arguments, a colon, and the expression to evaluate and return. [code format=\"py\"]def my_func(f, arg):\r\n  return f(arg)\r\n\r\nmy_func([b]lambda [/b]x: 2*x*x, 5)[/code]\r\n[note]Lambda functions get their name from[b] lambda calculus[/b], which is a model of computation invented by Alonzo Church.[/note]"},{"id":5101,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98195,"text":"lambda","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98196,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98197,"text":"8","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a lambda function that returns the square of its argument, and call it for the number 8.\r\n[!raw!]\r\na = ({0} x{1} x*x) ({2})","textContent":"[h1]Lambdas[/h1]\r\n\r\nLambda functions aren't as powerful as named functions. \r\nThey can only do things that require a single expression - usually equivalent to a single line of code.\r\n[b]Example: [/b][code format=\"py\" codeId=\"383\"][b]#named function[/b]\r\ndef polynomial(x):\r\n    return x**2 + 5*x + 4\r\nprint(polynomial(-4))\r\n\r\n[b]#lambda[/b]\r\nprint((lambda x: x**2 + 5*x + 4) (-4))[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n0\r\n0\r\n>>> [/code]\r\n[note]In the code above, we created an anonymous function on the fly and called it with an argument.[/note]"},{"id":5102,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98198,"text":"13","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the result of this code?\r\ntriple = lambda x: x * 3\r\nadd = lambda x, y: x + y\r\nprint(add(triple(3), 4))","textContent":"[h1]Lambdas[/h1]\r\n\r\nLambda functions can be assigned to variables, and used like normal functions.\r\n[b]Example: [/b][code format=\"py\" codeId=\"384\"]double = lambda x: x * 2\r\nprint(double(7))[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n14\r\n>>>[/code]\r\n[note]However, there is rarely a good reason to do this - it is usually better to define a function with [b]def [/b]instead.[/note]"}]}}