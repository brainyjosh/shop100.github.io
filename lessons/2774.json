{"lesson":{"id":2774,"name":"Instance Methods and Accessors","type":0,"mode":1,"videoID":null,"tags":"classes methods","quizzes":[{"id":5899,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113258,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113259,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113260,"text":"@height","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define the Box class area method that returns the product (multiplication) of its instance variables.\r\n[!raw!]\r\n{0} Box\r\n  def initialize(w, h)\r\n    @width = w\r\n    @height = h\r\n  end\r\n  {1} area\r\n    @width * {2}\r\n  end\r\nend","textContent":"[h1]Instance Methods[/h1]\r\n\r\nIn the real world, objects behave in their own way. A car [b]moves[/b], a phone [b]rings[/b], and so on.\r\nThe same applies to programming objects. Behavior is specific to the object's type and is defined by methods in the class.\r\nYou can declare instance methods that are available to an object of the class.\r\n[b]For example:[/b] [code format=\"rb\" ]class Dog\r\n  def bark\r\n    puts \"Woof!\"\r\n  end\r\nend[/code]\r\nWe defined a method called [b]bark [/b]that outputs text.\r\nNow we can instantiate an object and call the method using the dot syntax: [code format=\"rb\" codeId=\"1059\"]d = Dog.new\r\nd.[b]bark[/b]\r\n\r\n# outputs \"Woof\"[/code]\r\n[note]As with any method, instance methods can include multiple parameters and return values.[/note]"},{"id":5900,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113265,"text":"setter","isCorrect":true,"properties":{}},{"id":113266,"text":"getter","isCorrect":false,"properties":{}},{"id":113267,"text":"variable","isCorrect":false,"properties":{}},{"id":113268,"text":"object","isCorrect":false,"properties":{}}],"question":"The method that is used to modify the value of an instance variable is called:","textContent":"[h1]Accessors[/h1]\r\n\r\nAn instance method can also be created to access the instance variables from outside of the object.\r\nFor example, if we want to access the [b]@name[/b] instance variable for a Person object, we need a method that returns the value of that variable: [code format=\"rb\" codeId=\"1060\"]class Person\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\n  def [b]get_name[/b]\r\n    @name\r\n  end\r\nend\r\n\r\np = Person.new(\"David\")\r\nputs p.[b]get_name[/b]\r\n\r\n# outputs \"David\"[/code]\r\nWe created an instance method [b]get_name [/b]that returns the value of the [b]@name[/b] instance variable and then called it for our object [b]p[/b].\r\n[note]Getter and setter methods are called [b]accessors[/b].\r\nThe method that is used to retrieve the value of the variable is called a [b]getter [/b]method ([b]get_name [/b]in our example).\r\nThe method that is used to modify the value of the variable is called a [b]setter [/b]method.[/note]"},{"id":5901,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113275,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113276,"text":"=","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113277,"text":"@age","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a valid setter method for the \"age\" instance variable.\r\n[!raw!]\r\nclass Dog\r\n  {0} set_age{1}(age)\r\n    {2} = age\r\n  end\r\nend","textContent":"[h1]Setter Methods[/h1]\r\n\r\nGetter methods are used to access the instance variable. If we want to change the value of the instance variables, we need [b]setter [/b]methods.\r\nRuby provides a special syntax for defining setter methods: the method name is followed by an [b]equal sign[/b] (=).\r\n[b]For example: [/b][code format=\"rb\" codeId=\"1061\"]class Person\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\n  def get_name\r\n    @name\r\n  end\r\n  def [b]set_name=[/b](name)\r\n    @name = name\r\n  end\r\nend\r\n\r\np = Person.new(\"David\")\r\n[b]p.set_name = \"Bob\"[/b]\r\nputs p.get_name\r\n\r\n# outputs \"Bob\"[/code]\r\nIn the code above, [b]set_name [/b]is a setter method that sets the value of the [b]@name[/b] instance variable to the value of its parameter [b]name[/b]. \r\nNotice the special syntax used when calling the method: [b]p.set_name = \"Bob\"[/b]. \r\nNormally to call a method, you would use [b]p.set_name=(\"Bob\")[/b], where the entire [b]set_name=[/b] is the method name, and the string \"Bob\" is the argument being passed into the method. \r\nHowever, for setter methods, Ruby allows us to use a more natural assignment syntax: [b]p.set_name = \"Bob\"[/b]. \r\n[note]When you see this code, just realize there's a method called [b]set_name=[/b] working behind the scenes.[/note]"},{"id":5902,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113280,"text":"bob","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113281,"text":"age","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to assign the value \"7\" to the age variable of the object using its setter method.\r\n[!raw!]\r\nclass Dog\r\n  def age=(a)\r\n    @age = a\r\n  end\r\nend \r\nbob = Dog.new\r\n{0}.{1} = 7","textContent":"[h1]Accessors[/h1]\r\n\r\nIn Ruby it is a common practice to name the getter and setter methods using the same name as the instance variable they are accessing. \r\nThe previous example can be rewritten as: [code format=\"rb\" codeId=\"1062\"]class Person\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\n  def name\r\n    @name\r\n  end\r\n  def name=(name)\r\n    @name = name\r\n  end\r\nend\r\n\r\np = Person.new(\"David\")\r\np.name = \"Bob\"\r\nputs p.name\r\n\r\n# outputs \"Bob\"[/code]"}]}}