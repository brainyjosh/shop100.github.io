{"lesson":{"id":2376,"name":"Load Initial Data","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4874,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":60076,"text":"UITableViewController","isCorrect":true,"properties":{}},{"id":60077,"text":"UITableCell","isCorrect":false,"properties":{}},{"id":60078,"text":"UIButton","isCorrect":false,"properties":{}},{"id":60079,"text":"UIClass","isCorrect":false,"properties":{}}],"question":"When defining a custom table view controller, what subclass is used?","textContent":"[h1]Load Initial Data[/h1]\r\n\r\nAt this point, we have a data model for an item, the [b]Item [/b]class. We need to write some code to have real data display in the table's cells. \r\nThe first step is to create a custom table view controller subclass to manage the items list scene.\r\nChoose File > New > File, and then create a new [b]Cocoa Touch Class[/b] named [i]Item[/i].\r\nIn the \"Subclass of\" field, select [b]UITableViewController[/b].\r\nThe class title now changes to [i]ItemTableViewController[/i]. \r\nLeave these defaults as they are, and click [b]Create[/b]. Xcode creates [i]ItemTableViewController.swift[/i], a source code file that defines your custom table view controller subclass.\r\n\r\nNext, open your storyboard to point the table view controller scene to [i]ItemTableViewController.swift[/i]. Select the table view controller by clicking on its scene dock until the entire scene is outlined in blue. Then select the [b]ItemTableViewController [/b]class[b] [/b]from the [b]Identity inspector[/b]. [img id=\"1039\" width=\"60%\"] "},{"id":4875,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96768,"text":"+=","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96769,"text":"]","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare an array of items, and then add items to it.\r\n[!raw!]\r\nvar myItems = [Item]()\r\nvar item1 = Item(name:\"A\", price:1.99)\r\nvar item2 = Item(name:\"B\", price:15.7)\r\nmyItems {0} [item1, item2{1}","textContent":"[h1]Load Initial Data[/h1]\r\n\r\nOpen [i]ItemTableViewController.swift[/i]\r\nAdd the following code just below the class line in [i]ItemTableViewController.swift[/i]:[code format=\"swift\"]var items  = [Item]()[/code]\r\nDeclare a function to load the sample data into the array: [code format=\"swift\"]func loadSampleItems() {\r\n   items += [Item(name:\"item1\"), Item(name:\"item2\"), Item(name:\"item3\")]\r\n}[/code]\r\nThe function adds three sample [b]Items[/b] to the array.\r\nNow, add the method to the [b]viewDidLoad[/b](): [code format=\"swift\"]override func viewDidLoad() {\r\n   super.viewDidLoad()\r\n    \r\n   loadSampleItems()\r\n}[/code]"},{"id":4876,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96770,"text":".count","isCorrect":false,"properties":{"prefix":"return array","postfix":""}}],"question":"Fill in the blanks to return the number of items in the array.","textContent":"[h1]Display the Data[/h1]\r\n\r\nMethods for displaying data in the table are found in [i]ItemTableViewController.swift[/i]. Find the data source method [b]numberOfSectionsInTableView()[/b]. The template implementation looks like this:\r\n[code format=\"swift\"]override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\r\n   // ... return the number of sections\r\n   return 0\r\n}[/code]Change the return value from 0 to 1, and remove the warning comment.[code format=\"swift\"]override func numberOfSectionsInTableView(tableView: UITableView) -> Int {\r\n   return 1\r\n}[/code]This code has the table view show one section instead of zero. \r\n\r\nThe next data source method, [b]tableView()[/b], tells the table view how many rows to display in a given section. The number of rows should be the same as the number of [b]Items [/b]objects in your items array:\r\n[code format=\"swift\"]override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\r\n   return[b] items.count[/b]\r\n}[/code]"},{"id":4877,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96771,"text":"tableView(_:cellForRowAtIndexPath:)","isCorrect":true,"properties":{}},{"id":96772,"text":"table(_:cellForRowAtIndexPath:)","isCorrect":false,"properties":{}},{"id":96773,"text":"View()","isCorrect":false,"properties":{}},{"id":96774,"text":"tableCell(_:cellForRowAtIndexPath:)","isCorrect":false,"properties":{}}],"question":"Which method configures and provides a cell to display in the table view?","textContent":"[h1]Display the Data[/h1]\r\n\r\nThe last data source method is [b]tableView()[/b]. It configures and provides a cell to display for a given row. Each row in a table view has one cell, which determines what content appears in that row, along with its layout.\r\nIn [i]ItemTableViewController.swift[/i], find and uncomment the [b]tableView(_:cellForRowAtIndexPath:) [/b]data source method.\r\nAfter you do that, the template implementation looks like this: [code format=\"swift\"]override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\r\n   let cell = tableView.dequeueReusableCellWithIdentifier(\r\n      \"reuseIdentifier\", forIndexPath: indexPath) as! UITableViewCell\r\n    \r\n   // Configure the cell...\r\n    \r\n   return cell\r\n}[/code]\r\nThe template performs several tasks. It asks the table view for a cell with a [b]placeholder identifier[/b], adds a comment about where code to configure the cell should go, and then returns the cell.\r\nTo make this code work for your app, you'll need to change the placeholder identifier to the one you set earlier for the prototype cell in the storyboard ([b]ItemTableViewCell[/b]), and then add code to configure the cell.\r\nYour [b]tableView(_:cellForRowAtIndexPath:)[/b] method should look like this:[code format=\"swift\"]override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\r\n   let cellIdentifier = \"[b]ItemTableViewCell[/b]\"\r\n   let cell = tableView.dequeueReusableCellWithIdentifier(\r\n      cellIdentifier, forIndexPath:indexPath) [b]as![/b] [b]ItemTableViewCell[/b]\r\n\r\n[b]   let item = items[indexPath.row][/b]\r\n    \r\n   cell.nameLabel.text = item.name\r\n    \r\n   return cell\r\n}[/code]\r\nNotice that the cell type is changed to [b]ItemTableViewCell[/b]. Then we take the corresponding item from our items variable and assign the cell's label the name of the item.\r\n[b]indexPath[/b] is the number of the current row, which is used to query the item.\r\n\r\nNow, when you run the app, you will see the items you added to the items array appear in the table: [img id=\"1040\" width=\"60%\"]\r\n[note]Note that there's some overlap between the table view cells and the status bar; that will be fixed in the next lesson.[/note]"}]}}