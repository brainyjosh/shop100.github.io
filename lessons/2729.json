{"lesson":{"id":2729,"name":"Instance Variables","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":5732,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113242,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113243,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113244,"text":"@","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to initialize an instance variable called age in the Animal class.\r\n[!raw!]\r\n{0} Animal\r\n  {1} initialize(age)\r\n    {2}age = age\r\n  end\r\nend","textContent":"[h1]Instance Variables[/h1]\r\n\r\nAn [b]instance variable [/b]is one type of variable defined in a class. \r\nEach object of a class has a separate copy of the instance variables. \r\nInstance variables are preceded by the [b]at sign[/b] (@) followed by the variable name (for example: [b]@name[/b])\r\nWe can, for example, pass a parameter to the [b]initialize [/b]method and assign it to an instance variable for a new object: [code format=\"rb\" ]class Person\r\n  def initialize(name)\r\n    [b]@name[/b] = name\r\n  end\r\nend[/code]\r\nIn the code above, [b]@name[/b] is an instance variable for the class Person. \r\nNow, we can create objects of that class and pass an argument to the [b]new [/b]method: [code format=\"rb\" ]p1 = Person.new(\"David\")\r\np2 = Person.new(\"Amy\")[/code]\r\nThe object p1 now has an instance variable [b]@name[/b] with the value \"David\" which relates only to the object [b]p1[/b].\r\nSimilarly, [b]@name[/b] for the object p2 is equal to \"Amy\". \r\nEach instance (object) of a class has its own unique instance variables that store values associated with that instance.\r\n[note]You might wonder why we don't use local variables instead of instance variables. We need instance variables because their scope is the entire object, meaning that they are accessible inside all the methods for the object, opposed to local variables, which are accessible only within the scope they are declared, such as a single method.[/note]"},{"id":5733,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113245,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nclass Test\r\n  def initialize num\r\n    puts num%2\r\n  end\r\nend\r\na = Test.new 9","textContent":"[h1]Instance Variables[/h1]\r\n\r\nA class can have multiple instance variables.\r\n[b]For example:[/b][code format=\"rb\" ]class Animal\r\n  [b]@age[/b] = 0\r\n  def initialize(name, age)\r\n    [b]@name[/b] = name\r\n    [b]@age[/b] = age\r\n  end\r\nend\r\n\r\nob = Animal.new(\"Jacky\", 3)[/code]"}]}}