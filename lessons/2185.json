{"lesson":{"id":2185,"name":"Threads","type":0,"mode":1,"videoID":"YdlnEWC-7Wo","tags":"threads","quizzes":[{"id":4324,"number":1,"videoStart":49.0,"videoEnd":268.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100296,"text":"extends","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":100297,"text":"run","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":100298,"text":"start","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to run the method in a separate thread.\r\n[!raw!]\r\nclass A {0} Thread {\r\n   public void {1}() {\r\n      System.out.println(\"Hello\");\r\n   }\r\n   public static void main(String[ ] args) {\r\n   A object = new A();\r\n   object.{2}();\r\n   }\r\n}","textContent":"[h1]Threads[/h1]\r\n\r\nJava is a[b] multi-threaded[/b] programming language. This means that our program can make optimal use of available resources by running two or more components concurrently, with each component handling a different task.\r\nYou can subdivide specific operations within a single application into individual [b]threads [/b]that all run in parallel.\r\nThe following diagram shows the life-cycle of a thread. [img id=\"2880\" width=\"100%\"]\r\nThere are two ways to create a thread.\r\n[b]1. Extend the Thread class[/b]\r\nInherit from the [b]Thread [/b]class, override its [b]run[/b]() method, and write the functionality of the thread in the [b]run[/b]() method.\r\nThen you create a new object of your class and call it's [b]start [/b]method to run the thread.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"790\"]class Loader [b]extends Thread [/b]{\r\n  public void [b]run[/b]() {\r\n    System.out.println(\"Hello\");\r\n  }\r\n}\r\n\r\nclass MyClass {\r\n  public static void main(String[ ] args) {\r\n    Loader obj = new Loader();\r\n    obj.[b]start[/b]();\r\n  }\r\n}[/code]\r\nAs you can see, our Loader class extends the Thread class and overrides its [b]run() [/b]method.\r\nWhen we create the [b]obj [/b]object and call its [b]start[/b]() method, the [b]run[/b]() method statements execute on a different thread.\r\n[note]Every Java thread is prioritized to help the operating system determine the order in which to schedule threads. The priorities range from 1 to 10, with each thread defaulting to priority 5. You can set the thread priority with the [b]setPriority[/b]() method.[/note]"},{"id":4325,"number":2,"videoStart":268.0,"videoEnd":397.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100300,"text":"implements","isCorrect":true,"properties":{}},{"id":100301,"text":"Runnable","isCorrect":true,"properties":{}},{"id":100302,"text":"A","isCorrect":true,"properties":{}},{"id":100303,"text":"start","isCorrect":true,"properties":{}},{"id":100304,"text":"App","isCorrect":false,"properties":{}},{"id":100305,"text":"Thread","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to implement the Runnable interface and run a new thread.\r\n[!raw!]\r\nclass A {0} {1} {\r\n   public void run() {\r\n   System.out.println(\"Bye\");\r\n   }\r\n}\r\npublic class App {\r\n public static void main(String[ ] args) {\r\n   Thread ob = new Thread(new {2}());\r\n   ob.{3}();\r\n   }\r\n}","textContent":"[h1]Threads[/h1]\r\n\r\nThe other way of creating Threads is [b]implementing the Runnable interface[/b].\r\nImplement [b]the [/b]run() method. Then, create a new Thread object, pass the Runnable class to its constructor, and start the Thread by calling the [b]start[/b]() method.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"791\"]class Loader[b] implements Runnable[/b] {\r\n  public void [b]run[/b]() {\r\n    System.out.println(\"Hello\");\r\n  }\r\n}\r\n\r\nclass MyClass {\r\n  public static void main(String[ ] args) {\r\n    [b]Thread t = new Thread(new Loader());[/b]\r\n    t.[b]start[/b]();\r\n  }\r\n}[/code]\r\nThe [b]Thread.sleep()[/b] method pauses a Thread for a specified period of time. For example, calling [b]Thread.sleep(1000);[/b] pauses the thread for one second. Keep in mind that [b]Thread.sleep([/b]) throws an InterruptedException, so be sure to surround it with a [b]try/catch [/b]block.\r\n[note]It may seem that implementing the Runnable interface is a bit more complex than extending from the Thread class. However, implementing the Runnable interface is the preferred way to start a Thread, because it enables you to extend from another class, as well.[/note]"}]}}