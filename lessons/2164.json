{"lesson":{"id":2164,"name":"Polymorphism","type":0,"mode":1,"videoID":"0xw06loTm1k","tags":"polymorphism","quizzes":[{"id":4271,"number":1,"videoStart":99.0,"videoEnd":406.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100257,"text":"... one method, with different implementations","isCorrect":true,"properties":{}},{"id":100258,"text":"... one implementation, with different methods","isCorrect":false,"properties":{}},{"id":100259,"text":"... each implementation, with a different method","isCorrect":false,"properties":{}}],"question":"Briefly, polymorphism is...","textContent":"[h1]Polymorphism[/h1]\r\n\r\n[b]Polymorphism[/b], which refers to the idea of \"having many forms\", occurs when there is a hierarchy of classes related to each other through inheritance. \r\nA call to a member method will cause a different implementation to be executed, depending on the type of the object invoking the method.\r\nHere is an example: [b]Dog [/b]and [b]Cat [/b]are classes that inherit from the [b]Animal [/b]class. Each class has its own implementation of the [b]makeSound[/b]() method. [code format=\"java\" ]class Animal {\r\n  public void makeSound() {\r\n    System.out.println(\"Grr...\");\r\n  }\r\n}\r\nclass [b]Cat [/b]extends Animal {\r\n  public void [b]makeSound[/b]() {\r\n    System.out.println(\"Meow\");\r\n  }\r\n}\r\nclass [b]Dog [/b]extends Animal {\r\n  public void [b]makeSound[/b]() {\r\n    System.out.println(\"Woof\");\r\n  }\r\n}[/code]\r\nAs all [b]Cat [/b]and [b]Dog [/b]objects are [b]Animal [/b]objects, we can do the following in [b]main[/b]: [code format=\"java\" ]public static void main(String[ ] args) {\r\n  [b]Animal[/b] a = new [b]Dog[/b]();\r\n  [b]Animal[/b] b = new [b]Cat[/b]();\r\n}[/code]\r\nWe've created two reference variables of type Animal, and pointed them to the [b]Cat [/b]and [b]Dog [/b]objects.\r\nNow, we can call the makeSound() methods.[code format=\"java\" codeId=\"774\"]a.makeSound();\r\n//Outputs \"[b]Woof[/b]\"\r\n\r\nb.makeSound();\r\n//Outputs \"[b]Meow[/b]\"[/code]\r\nAs the reference variable [b]a[/b] contains a Dog object, the makeSound() method of the Dog class will be called. \r\nThe same applies to the [b]b[/b] variable.\r\n[note]This demonstrates that you can use the [b]Animal[/b] variable without actually knowing that it contains an object of the subclass. \r\nThis is very useful when you have multiple subclasses of the superclass. [/note]"}]}}