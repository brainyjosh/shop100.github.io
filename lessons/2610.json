{"lesson":{"id":2610,"name":"Recursion","type":0,"mode":1,"videoID":null,"tags":"recursion","quizzes":[{"id":5439,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103332,"text":"120","isCorrect":true,"properties":{}},{"id":103333,"text":"600","isCorrect":false,"properties":{}},{"id":103334,"text":"24","isCorrect":false,"properties":{}},{"id":103335,"text":"0","isCorrect":false,"properties":{}}],"question":"What is the factorial of 5?","textContent":"[h1]Recursion[/h1]\r\n\r\nA [b]recursive [/b]method is a method that calls itself.\r\nOne of the classic tasks that can be solved easily by recursion is calculating the [b]factorial [/b]of a number.\r\nIn mathematics, the term [b]factorial [/b]refers to the product of all positive integers that are less than or equal to a specific non-negative integer (n). The factorial of n is denoted as [b]n![/b]\r\n[b]For example:[/b][code format=\"raw\" ]4! = 4 * 3 * 2 * 1 = 24[/code]"},{"id":5440,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103342,"text":"the exit condition","isCorrect":true,"properties":{}},{"id":103343,"text":"the static keyword","isCorrect":false,"properties":{}},{"id":103344,"text":"the Main method","isCorrect":false,"properties":{}}],"question":"What prevents the recursive method to call itself forever?","textContent":"[h1]Recursion[/h1]\r\n\r\nAs you can see, a factorial can be thought of as repeatedly calculating num * num-1 until you reach 1. \r\nBased on this solution, let's define our method: [code format=\"cs\" ]static int Fact(int num) {\r\n  if (num == 1) {\r\n    return 1;\r\n  }\r\n  return num * Fact(num - 1);\r\n}[/code]\r\nIn the [b]Fact [/b]recursive method, the [b]if[/b] statement defines the exit condition, a base case that requires no recursion. In this case, when [b]num [/b]equals one, the solution is simply to return 1 (the factorial of one is one).\r\nThe recursive call is placed after the exit condition and returns [b]num [/b]multiplied by the factorial of n-1.\r\nFor example, if you call the [b]Fact [/b]method with the argument 4, it will execute as follows:\r\nreturn 4*Fact(3), which is 4*3*Fact(2), which is 4*3*2*Fact(1), which is 4*3*2*1.\r\n\r\nNow we can call our Fact method from Main: [code format=\"cs\" codeId=\"865\"]static void Main(string[] args)\r\n{\r\n  Console.WriteLine([b]Fact(6)[/b]);\r\n  //Outputs 720\r\n}[/code]\r\n[note]The factorial method calls itself, and then continues to do so, until the argument equals 1. The exit condition prevents the method from calling itself indefinitely.[/note]"}]}}