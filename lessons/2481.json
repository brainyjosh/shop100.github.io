{"lesson":{"id":2481,"name":"Email Extraction","type":0,"mode":1,"videoID":null,"tags":"regular-expressions","quizzes":[{"id":5176,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104691,"text":"Splitting a string","isCorrect":false,"properties":{}},{"id":104692,"text":"Checking whether a particular character is in a string","isCorrect":false,"properties":{}},{"id":104693,"text":"Checking to see if a string contains a date","isCorrect":true,"properties":{}}],"question":"Which of these must be done with regular expressions, rather than string methods?","textContent":"[h1]Email Extraction[/h1]\r\n\r\nTo demonstrate a sample usage of regular expressions, lets create a program to extract email addresses from a string.\r\nSuppose we have a text that contains an email address: [code format=\"py\" ]str = \"Please contact info@sololearn.com for assistance\"[/code]\r\nOur goal is to extract the substring \"info@sololearn.com\".\r\nA basic email address consists of a word and may include dots or dashes. This is followed by the @ sign and the domain name (the name, a dot, and the domain name suffix).\r\nThis is the basis for building our regular expression. [code format=\"py\" ]pattern = r\"([\\w\\.-]+)@([\\w\\.-]+)(\\.[\\w\\.]+)\"[/code]\r\n[b][\\w\\.-]+[/b] matches one or more word character, dot or dash.\r\nThe regex above says that the string should contain a word (with dots and dashes allowed), followed by the @ sign, then another similar word, then a dot and another word.\r\n[note]Our regex contains three groups:\r\n1 - first part of the email address.\r\n2 - domain name without the suffix.\r\n3 - the domain suffix.[/note]"},{"id":5349,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104606,"text":"to treat it as a character","isCorrect":true,"properties":{}},{"id":104607,"text":"it is mandatory","isCorrect":false,"properties":{}},{"id":104608,"text":"because it is inside square brackets","isCorrect":false,"properties":{}}],"question":"In our example, why is the dot character preceded by a backslash?","textContent":"[h1]Email Extraction  [/h1]\r\n\r\nPutting it all together: [code format=\"py\" codeId=\"441\"]import re\r\n\r\npattern = r\"([\\w\\.-]+)@([\\w\\.-]+)(\\.[\\w\\.]+)\"\r\nstr = \"Please contact info@sololearn.com for assistance\"\r\n\r\nmatch = re.search(pattern, str)\r\nif match:\r\n   print(match.group())[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\ninfo@sololearn.com\r\n>>>[/code]\r\nIn case the string contains multiple email addresses, we could use the [b]re.findall[/b] method instead of [b]re.search[/b], to extract all email addresses.\r\n[note]The regex in this example is for demonstration purposes only. \r\nA much more complex regex is required to fully validate an email address.[/note]"}]}}