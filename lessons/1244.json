{"lesson":{"id":1244,"name":"The Date Object","type":0,"mode":1,"videoID":"Xhqvh52VsIo","tags":"date","quizzes":[{"id":1790,"number":1,"videoStart":5.0,"videoEnd":110.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99307,"text":"calc","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99308,"text":"2000","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to call the function \"calc()\" every 2 seconds:\r\n[!raw!]\r\nsetInterval({0}, {1});","textContent":"[h1]setInterval[/h1]\r\n\r\nThe [b]setInterval()[/b] method calls a function or evaluates an expression at specified intervals (in milliseconds).\r\nIt will continue calling the function until [b]clearInterval()[/b] is called or the window is closed.\r\n\r\n[b]For example:[/b] [code format=\"js\" codeId=\"704\"]function myAlert() {\r\n   alert(\"Hi\");\r\n}\r\n[b]setInterval(myAlert, 3000);[/b][/code]\r\nThis will call the myAlert function every 3 seconds (1000 ms = 1 second).\r\n[note]Write the [b]name [/b]of the function without parentheses when passing it into the [b]setInterval [/b]method. [/note]"},{"id":1792,"number":2,"videoStart":134.0,"videoEnd":262.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104417,"text":"An empty string","isCorrect":false,"properties":{}},{"id":104418,"text":"The date when the web page was hosted","isCorrect":false,"properties":{}},{"id":104419,"text":"The current date and time","isCorrect":true,"properties":{}}],"question":"What information results from creating a Date Object?","textContent":"[h1]The Date Object[/h1]\r\n\r\nThe [b]Date [/b]object enables us to work with dates.\r\nA date consists of a year, a month, a day, an hour, a minute, a second, and milliseconds.\r\n\r\nUsing [b]new Date()[/b], create a new date object with the [b]current date and time[/b].[code format=\"js\" ]var d = new Date();\r\n//d stores the current date and time[/code]\r\nThe other ways to initialize dates allow for the creation of new date objects from the [b]specified date and time[/b].[code format=\"js\" ]new Date(milliseconds)\r\nnew Date(dateString)\r\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)[/code]\r\n[note]JavaScript dates are calculated in milliseconds from 01 January, 1970 00:00:00 Universal Time (UTC). One day contains 86,400,000 millisecond.[/note]\r\n[b]For example: [/b][code format=\"js\" ]//Fri Jan 02 1970 00:00:00\r\nvar d1 = new Date(86400000); \r\n\r\n//Fri Jan 02 2015 10:42:00\r\nvar d2 = new Date(\"January 2, 2015 10:42:00\");\r\n\r\n//Sat Jun 11 1988 11:42:00\r\nvar d3 = new Date(88,5,11,11,42,0,0);[/code]\r\n[note]JavaScript counts months from 0 to 11. January is 0, and December is 11.\r\nDate objects are static, rather than dynamic. The computer time is ticking, but date objects don't change, once created.[/note]"},{"id":1793,"number":3,"videoStart":262.5,"videoEnd":509.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99309,"text":"var","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99310,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to initialize a date object representing the current date and time:\r\n[!raw!]\r\n{0} date = {1} Date();","textContent":"[h1]Date Methods[/h1]\r\n\r\nWhen a Date object is created, a number of [b]methods [/b]make it possible to perform operations on it. [img id=\"2772\" width=\"100%\"]\r\n[b]For example:[/b] [code format=\"js\" codeId=\"705\"]var d = new Date();\r\nvar hours = d.[b]getHours();[/b]\r\n//hours is equal to the current hour[/code]\r\nLet's create a program that prints the current time to the browser once every second.[code format=\"js\" codeId=\"706\"]function printTime() {\r\n  var d = new Date();\r\n  var hours = d.[b]getHours()[/b];\r\n  var mins = d.[b]getMinutes()[/b];\r\n  var secs = d.[b]getSeconds()[/b];\r\n  document.body.innerHTML = hours+\":\"+mins+\":\"+secs;\r\n}\r\nsetInterval(printTime, 1000);[/code]\r\nWe declared a function [b]printTime()[/b], which gets the current time from the date object, and prints it to the screen.\r\nWe then called the function once every second, using the [b]setInterval [/b]method.\r\n[note]The [b]innerHTML [/b]property sets or returns the HTML content of an element.\r\nIn our case, we are changing the HTML content of our document's body. This overwrites the content every second, instead of printing it repeatedly to the screen.[/note]"}]}}