{"lesson":{"id":2159,"name":"Static","type":0,"mode":1,"videoID":"gTk_F61_-9k","tags":"static","quizzes":[{"id":4260,"number":1,"videoStart":0.0,"videoEnd":165.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99589,"text":"static","isCorrect":false,"properties":{"prefix":"public ","postfix":" int x=0;"}}],"question":"Fill in the blank to declare a static variable.","textContent":"[h1]Static[/h1]\r\n\r\nWhen you declare a variable or a method as [b]static[/b], it belongs to the class, rather than to a specific instance. This means that only one instance of a [b]static [/b]member exists, even if you create multiple objects of the class, or if you don't create any. It will be shared by all objects.\r\n[b]Example:[/b][code format=\"java\" ]public class Counter {\r\n  public [b]static [/b]int COUNT=0;\r\n  Counter() {\r\n    COUNT++;\r\n  }\r\n}[/code]\r\nThe [b]COUNT [/b]variable will be shared by all objects of that class.\r\nNow, we can create objects of our Counter class in [b]main[/b], and access the static variable. [code format=\"java\" codeId=\"769\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    Counter c1 = new Counter();\r\n    Counter c2 = new Counter();\r\n    System.out.println([b]Counter.COUNT[/b]);\r\n  }\r\n}\r\n//Outputs \"2\"[/code]\r\nThe output is 2, because the [b]COUNT [/b]variable is static and gets incremented by one each time a new object of the Counter class is created. In the code above, we created 2 objects.\r\nYou can also access the static variable using any object of that class, such as [b]c1.COUNT[/b].\r\n[note]Itâ€™s a common practice to use upper case when naming a static variable, although not mandatory.[/note]"},{"id":4262,"number":2,"videoStart":165.0,"videoEnd":272.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100250,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What output results from this code?\r\nclass Person {\r\npublic static int pCount;\t\r\npublic static void main(String[ ] args) {\t\t\t\r\n   Person.pCount = 1; \r\n   Person.pCount++;\r\n   System.out.println(Person.pCount);\t\t\r\n  }\r\n}","textContent":"[h1]Static [/h1]\r\n\r\nThe same concept applies to [b]static [/b]methods.[code format=\"java\" ]public class Vehicle {\r\n  public [b]static [/b]void horn() {\r\n    System.out.println(\"Beep\");\r\n  }\r\n}[/code]\r\nAny Vehicle object can call the [b]horn [/b]method.[code format=\"java\" codeId=\"770\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    Vehicle v1 = new Vehicle();\r\n    v1.horn();\r\n  }\r\n}[/code]\r\nAnother example of static methods are those of the [b]Math [/b]class, which is why you can call them without creating a [b]Math [/b]object.\r\n[note]Also, the [b]main[/b] method must always be [b]static[/b].[/note]"}]}}