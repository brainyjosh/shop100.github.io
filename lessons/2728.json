{"lesson":{"id":2728,"name":"Classes & Objects","type":0,"mode":1,"videoID":null,"tags":"classes objects","quizzes":[{"id":5728,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113205,"text":"an object","isCorrect":true,"properties":{}},{"id":113206,"text":"a class","isCorrect":false,"properties":{}},{"id":113207,"text":"a variable","isCorrect":false,"properties":{}}],"question":"In Ruby, the Boolean value True is considered:","textContent":"[h1]Object Oriented Programming[/h1]\r\n\r\nRuby is a pure object-oriented language, which means everything in Ruby is an [b]object[/b]. Even simple numbers, strings and Booleans are objects.\r\n\r\nIn programming, [b]objects [/b]are independent units, and each has its own [b]identity[/b], just as objects in the real world do. An apple is an object; so is a mug. Each has its own unique [b]identity[/b]. It's possible to have two mugs that look alike, but they are still separate, unique objects.\r\n\r\nTo create objects we use [b]classes[/b]. \r\nA [b]class [/b]defines the data and actions associated with an object, but is separate from the object itself. In other words, a class can be thought of as an object's blueprint, description, or definition. For example, there can be many cat objects of the single class Cat. \r\n[note]Just like in the real world, where you can use a blueprint to construct multiple buildings, in programming you can use the same class as a blueprint for creating multiple objects.[/note]"},{"id":5729,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113210,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113211,"text":"end","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a class named Car.\r\n[!raw!]\r\n{0} Car\r\n  #some code\r\n{1}","textContent":"[h1]Classes[/h1]\r\n\r\nYou can think of [b]classes [/b]as basic outlines of what an object should be made of and what it should be able to do. (For example, an object of class Car should have a color, make and model, and be able to move).\r\nA class in Ruby always starts with the keyword [b]class [/b]followed by the name of the class. The name should always be in initial capitals. You terminate the class definition with the keyword [b]end[/b]. \r\n[b]For example: [/b] [code format=\"rb\" ][b]class [/b]Person\r\n[b]end[/b][/code]\r\nThe above code creates an empty class [b]Person[/b].\r\n[note]Now we need to define the variables and methods (also called data members) of the class. These data members describe the attributes of the objects (for example, a person can be 42 years old and male - these attributes are data members of the class Person).[/note]"},{"id":5730,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113218,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113219,"text":"end","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define the initialize method for the class.\r\n[!raw!]\r\nclass Box\r\n  {0} initialize\r\n    puts \"Box created\"\r\n  end\r\n{1}","textContent":"[h1]Classes[/h1]\r\n\r\nThere is a special [b]initialize [/b]method available for classes which gets called when an object is created.\r\nIt is defined inside a class just like any other class method: [code format=\"rb\" ]class Person\r\n  def [b]initialize[/b]\r\n    puts \"Hi there\"\r\n  end\r\nend[/code]\r\nThe purpose of the [b]initialize [/b]method is to initialize the class variables for a new object. (For example, when a Car object is created, the initialize method could set the number of tires to the value 4)\r\n[note]The [b]initialize [/b]method is known as the [b]constructor [/b]in other object-oriented programming languages.[/note]"},{"id":5731,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113232,"text":"Animal","isCorrect":true,"properties":{}},{"id":113233,"text":"new","isCorrect":true,"properties":{}},{"id":113234,"text":"class","isCorrect":false,"properties":{}},{"id":113235,"text":"initialize","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to create an object of the class Animal.\r\n[!raw!]\r\nclass Animal\r\n  # some code\r\nend\r\n\r\nob = {0}.{1}","textContent":"[h1]Objects[/h1]\r\n\r\nAfter the [b]class [/b]and the [b]initialize [/b]methods are defined, we can create objects of that class by using the [b]new[/b] method. The method [b]new [/b]is predefined in the Ruby library and does not need to be added to your class definition.\r\nBelow is an example that creates two objects [b]p1 [/b]and [b]p2 [/b]of the class [b]Person[/b]: [code format=\"rb\" codeId=\"1058\"]class Person\r\n  def initialize\r\n    puts \"Hi there\"\r\n  end\r\nend\r\n\r\np1 = Person.[b]new[/b]\r\np2 = Person.[b]new[/b]\r\n\r\n# Output:\r\n# \"Hi there\"\r\n# \"Hi there\"[/code]\r\nNote the syntax for calling [b]new[/b]: the class name followed by a dot and followed by the method name.\r\nThe code above outputs \"Hi there\" twice because we created two objects of the class, which each call the [b]initialize [/b]method. Now, [b]p1 [/b]and [b]p2 [/b]are separate objects of the class Person.\r\n\r\nObjects are also called [b]instances [/b]of a class. The process of creating objects of a class is called [b]instantiation[/b].\r\n[note]Note that in computing objects aren't always representative of physical items. For example, a programming object can represent a date, a time, and a bank account.[/note]"}]}}