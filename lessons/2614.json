{"lesson":{"id":2614,"name":"Class Example","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":5451,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104321,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104322,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104323,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a class called Car.\r\n[!raw!]\r\n{0} Car\r\n{1}\r\n  string color;\r\n  int year;\r\n{2}","textContent":"[h1]Example of a Class[/h1]\r\n\r\nLetâ€™s create a [b]Person [/b]class: [code format=\"cs\" ]class Person\r\n{\r\n  int age;\r\n  string name;\r\n  public void SayHi()\r\n  {\r\n    Console.WriteLine(\"Hi\");\r\n  }\r\n}[/code]\r\nThe code above declares a class named [b]Person[/b], which has [b]age [/b]and [b]name [/b]fields as well as a [b]SayHi [/b]method that displays a greeting to the screen.\r\nYou can include an [b]access modifier[/b] for fields and methods (also called [b]members[/b]) of a class. Access modifiers are keywords used to specify the accessibility of a member.\r\nA member that has been defined [b]public [/b]can be accessed from outside the class, as long as it's anywhere within the scope of the class object. That is why our [b]SayHi [/b]method is declared [b]public[/b], as we are going to call it from outside of the class.\r\n[note]You can also designate class members as [b]private [/b]or [b]protected[/b]. This will be discussed in greater detail later in the course. If no access modifier is defined, the member is [b]private [/b]by default.[/note]"},{"id":5452,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103426,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103427,"text":"c.horn","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create an object of type Car and call its horn() method\r\n[!raw!]\r\nCar c = {0} Car();\r\n{1}();","textContent":"[h1]Example of a Class[/h1]\r\n\r\nNow that we have our Person class defined, we can instantiate an object of that type in Main.\r\nThe [b]new [/b]operator instantiates an object and returns a reference to its location:[code format=\"cs\" codeId=\"866\"]class Person {\r\n  int age;\r\n  string name;\r\n  public void SayHi() {\r\n    Console.WriteLine(\"Hi\");\r\n  }\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Person p1 = [b]new [/b]Person();\r\n  p1[b].[/b]SayHi();\r\n}\r\n//Outputs \"Hi\"[/code]\r\nThe code above declares a Person object named [b]p1[/b] and then calls its public [b]SayHi[/b]() method. \r\n[note]Notice the[b] dot operator (.)[/b] that is used to access and call the method of the object.[/note]"},{"id":5453,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103438,"text":"d.","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103439,"text":"7","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Assign 7 to the age property of the object.\r\n[!raw!]\r\nDog d = new Dog();\r\n{0}age = {1};","textContent":"[h1]Example of a Class[/h1]\r\n\r\nYou can access all public members of a class using the dot operator. \r\nBesides calling a method, you can use the dot operator to make an assignment when valid. \r\nFor example: [code format=\"cs\" codeId=\"867\"]class Dog\r\n{\r\n  public string name;\r\n  public int age;\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n  Dog bob = new Dog();\r\n  bob.name = \"Bobby\";\r\n  bob.age = 3;\r\n  \r\n  Console.WriteLine(bob.age);\r\n  //Outputs 3\r\n}[/code]"}]}}