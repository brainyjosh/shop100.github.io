{"lesson":{"id":1640,"name":"Function Overloading","type":0,"mode":1,"videoID":"IAMzWp3kS_k","tags":"functions","quizzes":[{"id":2915,"number":1,"videoStart":7.0,"videoEnd":197.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94967,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94968,"text":"float","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a function printNumber and overload it. Declare one printNumber, taking an integer parameter; and another printNumber, taking a float parameter.\r\n[!raw!]\r\nvoid printNumber({0} x) {\r\n cout << \"integer is \" << x << endl;\r\n}\r\nvoid printNumber({1} x) {\r\n cout << \"float is \" << x << endl;\r\n}","textContent":"[h1]Overloading [/h1]\r\n\r\nFunction [b]overloading [/b]allows to create multiple functions with the[b] same name[/b], so long as they have different parameters. \r\n\r\nFor example, you might need a [b]printNumber()[/b] function that prints the value of its parameter.[code format=\"cpp\"]void printNumber([b]int [/b]a) { \r\n  cout << a;\r\n}[/code]\r\nThis is effective with [b]integer [/b]arguments only. Overloading it will make it available for other types, such as [b]floats[/b].[code format=\"cpp\"]void printNumber([b]float [/b]a) { \r\n  cout << a;\r\n}[/code]\r\n[note]Now, the same [b]printNumber()[/b] function name will work for both integers and floats.[/note]"},{"id":2916,"number":2,"videoStart":198.0,"videoEnd":273.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97781,"text":"If they have different number or type of parameter","isCorrect":true,"properties":{}},{"id":97782,"text":"If they have different names","isCorrect":false,"properties":{}},{"id":97783,"text":"If they have different body sizes","isCorrect":false,"properties":{}}],"question":"When are two functions with the same name called overloaded?","textContent":"[h1]Function Overloading[/h1]\r\n\r\nWhen overloading functions, the definition of the function must differ from each other by the types and/or the number of arguments in the argument list. \r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"246\"]void printNumber(int x) {\r\n    cout << \"Prints an integer: \" << x << endl;\r\n}\r\nvoid printNumber(float x) {\r\n    cout << \"Prints a float: \" << x << endl;\r\n}\r\nint main() {\r\n  int a = 16;\r\n  float b = 54.541;\r\n  printNumber(a);\r\n  printNumber(b);\r\n}\r\n\r\n/* Output:  \r\nPrints an integer: 16\r\nPrints a float: 54.541\r\n*/[/code]\r\n[note]As you can see, the function call is based on the argument provided. An [b]integer [/b]argument will call the function implementation that takes an [b]integer [/b]parameter. A [b]float [/b]argument will call the implementation taking a [b]float [/b]parameter.[/note]"},{"id":2917,"number":3,"videoStart":274.0,"videoEnd":337.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97784,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97785,"text":"float","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97786,"text":"b","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to overload the function sum, which takes two parameters of numeric type and prints their sum to the screen. Overload the sum function for integers and floats.\r\n[!raw!]\r\nvoid sum(int a, {0} b) {\r\n cout << a + b << endl;\r\n}\r\nvoid sum({1} a, float b) {\r\n cout << a + {2} << endl;\r\n}","textContent":"[h1]Function Overloading[/h1]\r\n\r\nYou [b]can not [/b]overload function declarations that differ only by [b]return [/b]type.\r\nThe following declaration results in an error.[code format=\"cpp\" codeId=\"247\"][b]int [/b]printName(int a) { }\r\n[b]float [/b]printName(int b) { }\r\n[b]double [/b]printName(int c) { }[/code]\r\n[note]Although each function uses the same name, the only difference from one to the other is the [b]return [/b]type, which is not allowed.[/note]"}]}}