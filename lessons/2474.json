{"lesson":{"id":2474,"name":"A Simple Game","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":5146,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106396,"text":"Removes inappropriate words","isCorrect":false,"properties":{}},{"id":106397,"text":"Divides the input into separate letters","isCorrect":false,"properties":{}},{"id":106398,"text":"Divides the input into separate words","isCorrect":true,"properties":{}}],"question":"What does the split method called on the input do?","textContent":"[h1]A Simple Game[/h1]\r\n\r\nObject-orientation is very useful when managing different objects and their relations. That is especially useful when you are developing games with different characters and features.\r\n\r\nLet's look at an example project that shows how classes are used in game development.\r\nThe game to be developed is an old fashioned text-based adventure game.\r\nBelow is the function handling input and simple parsing.[code format=\"py\" ]def get_input():\r\n  command = input(\": \").split()\r\n  verb_word = command[0]\r\n  if verb_word in verb_dict:\r\n    verb = verb_dict[verb_word]\r\n  else:\r\n    print(\"Unknown verb {}\". format(verb_word))\r\n    return\r\n\r\n  if len(command) >= 2:\r\n    noun_word = command[1]\r\n    print (verb(noun_word))\r\n  else:\r\n    print(verb(\"nothing\"))\r\n\r\ndef say(noun):\r\n  return 'You said \"{}\"'.format(noun)\r\n\r\nverb_dict = {\r\n  \"say\": say,\r\n}\r\n\r\nwhile True:\r\n  get_input()[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n: say Hello!\r\nYou said \"Hello!\"\r\n: say Goodbye!\r\nYou said \"Goodbye!\"\r\n\r\n: test\r\nUnknown verb test[/code]\r\n[note]The code above takes input from the user, and tries to match the first word with a command in  [b]verb_dict[/b]. If a match is found, the corresponding function is called.[/note]"},{"id":5147,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96139,"text":"Goblin is an attribute of GameObject","isCorrect":false,"properties":{}},{"id":96140,"text":"Goblin is a kind of GameObject","isCorrect":true,"properties":{}},{"id":96141,"text":"Goblin is an instance of GameObject","isCorrect":false,"properties":{}}],"question":"Why does Goblin inherit from GameObject?","textContent":"[h1]A Simple Game[/h1]\r\n\r\nThe next step is to use classes to represent game objects.[code format=\"py\"]class GameObject:\r\n  class_name = \"\"\r\n  desc = \"\"\r\n  objects = {}\r\n\r\n  def __init__(self, name):\r\n    self.name = name\r\n    GameObject.objects[self.class_name] = self\r\n\r\n  def get_desc(self):\r\n    return self.class_name + \"\\n\" + self.desc\r\n\r\nclass Goblin(GameObject):\r\n  class_name = \"goblin\"\r\n  desc = \"A foul creature\"\r\n\r\ngoblin = Goblin(\"Gobbly\")\r\n\r\ndef examine(noun):\r\n  if noun in GameObject.objects:\r\n    return GameObject.objects[noun].get_desc()\r\n  else:\r\n    return \"There is no {} here.\".format(noun)[/code]\r\nWe created a [b]Goblin [/b]class, which inherits from the [b]GameObjects [/b]class.\r\nWe also created a new function [b]examine[/b], which returns the objects description.\r\nNow we can add a new \"examine\" verb to our dictionary and try it out! [code format=\"py\"]verb_dict = {\r\n  \"say\": say,\r\n  \"examine\": examine,\r\n}[/code]\r\nCombine this code with the one in our previous example, and run the program.[code format=\"raw\"]>>>\r\n: say Hello!\r\nYou said \"Hello!\"\r\n\r\n: examine goblin\r\ngoblin\r\nA foul creature\r\n\r\n: examine elf\r\nThere is no elf here.\r\n:[/code]"},{"id":5148,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96142,"text":"So it could be dynamically created when accessed","isCorrect":true,"properties":{}},{"id":96143,"text":"So it would be more efficient to set","isCorrect":false,"properties":{}},{"id":96144,"text":"So the code was shorter","isCorrect":false,"properties":{}}],"question":"Why was desc turned into a property?","textContent":"[h1]A Simple Game[/h1]\r\n\r\nThis code adds more detail to the [b]Goblin [/b]class and allows you to [b]fight [/b]goblins.[code format=\"py\"]class Goblin(GameObject):\r\n  def __init__(self, name):\r\n    self.class_name = \"goblin\"\r\n    self.health = 3\r\n    self._desc = \" A foul creature\"\r\n    super().__init__(name)\r\n\r\n  @property\r\n  def desc(self):\r\n    if self.health >=3:\r\n      return self._desc\r\n    elif self.health == 2:\r\n      health_line = \"It has a wound on its knee.\"\r\n    elif self.health == 1:\r\n      health_line = \"Its left arm has been cut off!\"\r\n    elif self.health <= 0:\r\n      health_line = \"It is dead.\"\r\n    return self._desc + \"\\n\" + health_line\r\n\r\n  @desc.setter\r\n  def desc(self, value):\r\n    self._desc = value\r\n\r\ndef hit(noun):\r\n  if noun in GameObject.objects:\r\n    thing = GameObject.objects[noun]\r\n    if type(thing) == Goblin:\r\n      thing.health = thing.health - 1\r\n      if thing.health <= 0:\r\n        msg = \"You killed the goblin!\"\r\n      else: \r\n        msg = \"You hit the {}\".format(thing.class_name)\r\n  else:\r\n    msg =\"There is no {} here.\".format(noun) \r\n  return msg[/code]\r\n[b]Result:[/b][code format=\"raw\"]>>>\r\n: hit goblin\r\nYou hit the goblin\r\n\r\n: examine goblin\r\ngoblin\r\n A foul creature\r\nIt has a wound on its knee.\r\n\r\n: hit goblin\r\nYou hit the goblin\r\n\r\n: hit goblin\r\nYou killed the goblin!\r\n\r\n: examine goblin\r\nA goblin\r\n\r\ngoblin\r\n A foul creature\r\nIt is dead.\r\n:[/code]\r\n[note]This was just a simple sample.\r\nYou could create different classes (e.g., elves, orcs, humans), fight them, make them fight each other, and so on.[/note]"}]}}