{"lesson":{"id":2352,"name":"Tuples","type":0,"mode":1,"videoID":null,"tags":"tuples","quizzes":[{"id":4806,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96689,"text":"48","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the value of the \"latitude\" constant?\r\nlet coords = (48, 27)\r\nlet latitude = coords.0 \r\nlet longitude = coords.1","textContent":"[h1]Tuples[/h1]\r\n\r\n[b]Tuples [/b]group multiple values into a single, compound value. The values within a tuple can be of any type and do not have to share a common type.[code format=\"swift\"]let error = (404, \"Not Found\")[/code]The tuple above is of type [b](Int, String)[/b].\r\n\r\nYou can create tuples from any permutation of types, and they can contain as many different types as you like. There's nothing stopping you from having a tuple of type [b](Int, Int, Int)[/b], or [b](String, Bool)[/b], or any other permutation you require.\r\n\r\nA tuple's contents can be broken down into separate constants or variables, which you then access as you would any constant or variable.[code format=\"swift\"]let (statusCode, statusMessage) = error\r\nprint(\"The status code is \\(statusCode)\")\r\n// prints \"The status code is 404\"\r\nprint(\"The status message is \\(statusMessage)\")\r\n// prints \"The status message is Not Found\" [/code]\r\nAn alternative method of accessing individual element values in a tuple is to use [b]index [/b]numbers, starting with zero.[code format=\"swift\"]print(\"The status code is \\(error.0)\")\r\nprint(\"The status message is \\(error.1)\")[/code]\r\nWhen you define a tuple, you have the opportunity to name its individual elements. You can then use the element names to access the values of those elements:[code format=\"swift\"]let http200Status = (statusCode: 200, description: \"OK\")\r\nprint(\"The status code is \\(http200Status.statusCode)\")\r\nprint(\"The status message is \\(http200Status.description)\")[/code]\r\n[note]Tuples are particularly useful as the return values of functions, and are used as temporary groupings of related values.[/note]"}]}}