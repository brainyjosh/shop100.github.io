{"lesson":{"id":2605,"name":"Multiple Parameters","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5429,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103230,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103231,"text":",","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing parts of the following code to define a method that returns an int value and has two parameters.\r\n[!raw!]\r\n{0} Test(int a{1} int b)\r\n{\r\n // some code\r\n}","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nYou can have as many parameters as needed for a method by separating them with [b]commas [/b]in the definition.\r\nLet's create a simple method that returns the sum of two parameters: [code format=\"cs\" ]int Sum(int x, int y)\r\n{\r\n   [b]return [/b]x+y;\r\n}[/code]\r\nThe [b]Sum [/b]method takes two integers and returns their sum. This is why the return type of the method is [b]int[/b]. Data [b]type [/b]and [b]name [/b]should be defined for each parameter.\r\n[note]Methods return values using the [b]return [/b]statement.[/note]"},{"id":5430,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103932,"text":",","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103933,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103934,"text":"b","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a method, which returns the largest value of its parameters:\r\n[!raw!]\r\nint Max(int a{0} int b)\r\n{\r\n  if(a > b)\r\n    {1} a;\r\n  else\r\n    return {2};\r\n}","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nA method call with multiple parameters must separate arguments with [b]commas[/b].\r\nFor example, a call to [b]Sum [/b]requires two arguments:[code format=\"cs\" codeId=\"857\"]static void Main(string[] args)\r\n{\r\n  Console.WriteLine([b]Sum(8, 6)[/b]);\r\n  // Outputs 14\r\n}[/code]\r\nIn the call above, the return value was displayed to the console window. Alternatively, we can assign the return value to a variable, as in the code below:[code format=\"cs\" codeId=\"858\"]static void Main(string[] args)\r\n{\r\n  [b]int res = Sum(11, 42);\r\n[/b]  Console.WriteLine(res);\r\n  //Outputs 53\r\n}[/code]\r\n[note]You can add as many parameters to a single method as you want. If you have multiple parameters, remember to separate them with [b]commas[/b], both when declaring them and when calling the method.[/note]"}]}}