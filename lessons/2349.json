{"lesson":{"id":2349,"name":"Function Parameter Names","type":0,"mode":1,"videoID":null,"tags":"functions","quizzes":[{"id":4793,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96640,"text":"func","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96641,"text":"->","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96642,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96643,"text":"n2","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96644,"text":"a","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96645,"text":"b","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function that multiplies two Integers and returns the product. Call the function using external parameter names.\r\n[!raw!]\r\n{0} myFunc(a n1: Int, b n2: Int) {1} Int {\r\n{2} n1*{3};\r\n}\r\nprint(myFunc({4}: 11, {5}: 27))","textContent":"[h1]External Parameter Names[/h1]\r\n\r\nFunction parameters have both an [i]external parameter[/i] name and a [i]local parameter[/i] name.\r\nThe [i]external [/i]parameter name is used to label arguments that are passed to a function call, while a [i]local [/i]parameter name is used as the function is implemented.\r\nBy default, the first parameter omits its external name, and the second and subsequent parameters use their local name as their external name. Each parameter must be given its own, unique local name. External parameters may be shared.\r\n\r\nAn [b]external parameter name[/b] appears just before the local parameter name that it supports. The two parameter names are separated by a space: [code format=\"swift\"]func someFunc([b]externalName localName[/b]: Int) {\r\n    // function can use localName\r\n}[/code]\r\nHere's a version of the sayHello() function that takes the names of two people and returns a greeting for both of them: [code format=\"swift\"]func sayHello([b]to [/b]p1: String, [b]and [/b]p2: String) -> String {\r\n   return \"Hello \\(p1) and \\(p2)!\"\r\n}\r\nprint(sayHello([b]to[/b]: \"Tom\", [b]and[/b]: \"Jerry\"))\r\n// prints \"Hello Tom and Jerry!\"[/code]\r\nThe words [b]to[/b] and [b]and [/b]are the external parameter names, which are used when the function is called. The use of external parameter names can allow a function to be called in an expressive, sentence-like manner, and still produce a readable and clear function body.\r\n[note]If you provide an external parameter name for a given parameter, that external name must be used every time the function is called.[/note]"},{"id":4794,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96646,"text":"An Array","isCorrect":true,"properties":{}},{"id":96647,"text":"A Set","isCorrect":false,"properties":{}},{"id":96648,"text":"Integers","isCorrect":false,"properties":{}},{"id":96649,"text":"Strings","isCorrect":false,"properties":{}}],"question":"The variadic parameter is made available within the function's body as:","textContent":"[h1]Default Parameter Values[/h1]\r\n\r\nAdding a value after a function parameter's type defines a [b]default value[/b] for the parameter. If a default value is defined, that parameter can be omitted when calling the function.[code format=\"swift\"]func someFunction([b]p1: Int = 12[/b]) {\r\n   // the default value of p1 is 12\r\n}\r\nsomeFunction(6) // p1 is 6\r\nsomeFunction() // p1 is 12[/code]\r\n[note]Place parameters with default values at the end of a function's parameter list.[/note]\r\n[h2]Variadic Parameters[/h2]\r\n\r\n[b]Variadic [/b]parameters indicate that the number of input values of a specified type passed to the parameter can vary. The variadic parameter can accept zero and/or more parameters of a certain type, and is indicated by adding three period characters (...) immediately following the parameter's type name.\r\n\r\nThe values passed to a variadic parameter appear as an array of the specified type in the function's body. \r\n\r\nIn the example below, the function calculates the arithmetic mean, or average, for a list of numbers of any length:\r\n[code format=\"swift\"]func arithmeticMean(numbers: [b]Double...[/b]) -> Double {\r\n   var total: Double = 0\r\n   for number in numbers {\r\n     total += number\r\n   }\r\n   return (total / Double(numbers.count))\r\n}[/code]\r\n[b]One[/b] variadic parameter is allowed per function. The variadic parameter must always be the last parameter in the list, to ensure clarity when calling the function with multiple parameters.\r\n[note]For a function with one or more parameters containing default values, as well as a variadic parameter, the variadic parameter is added at the very end of the list, following all defaulted parameters.[/note]"},{"id":4795,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96650,"text":"var","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which keyword defines a variable function parameter?","textContent":"[h1]Constant and Variable Parameters[/h1]\r\n\r\nSince a function parameter is a [b]constant [/b]by default, changing it from within the body of that function generates a compile-time error. This guards against inadvertent value changes.\r\n\r\nA [b]variable parameter[/b] provides a changeable copy of the parameter's value, so you can work with it, and at the same time avoid defining a new variable within the function.\r\n\r\nUse the keyword [b]var [/b]as a prefix to the parameter name to define a variable parameter. [code format=\"swift\"]func myFunc([b]var [/b]num1: Int, num2: Int) -> Int {\r\n   num1 = num1 + num2\r\n   return num1\r\n}[/code]\r\n[b]num1[/b] is now available as a local variable. You now have the ability to manipulate that parameter within the body of the function.\r\n[note]A variable parameter only exists for the lifetime of that function call.[/note]"},{"id":4796,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106550,"text":"inout","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106551,"text":"&a","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function with one in-out parameter. Then call the function for the variable \"a\".\r\n[!raw!]\r\nfunc calc({0} num: Int) {\r\nnum = num*5\r\n}\r\nvar a = 8\r\ncalc({1})","textContent":"[h1]In-Out Parameters[/h1]\r\n\r\nA variable parameter is changeable only within the function. The [b]in-out parameter[/b] is used as an alternative to the variable parameter in instances in which you want a change to continue after the function call ends.\r\n\r\nThe [b]inout [/b]keyword is placed at the beginning of the parameter's definition. Its value is passed [i]in [/i]to the function, where it is modified. It's then passed back [i]out [/i]of the function, where it replaces the original value.\r\n\r\nThis example swaps out two Integer values. [code format=\"swift\" ]func swapInts([b]inout [/b]a: Int, [b]inout [/b]b: Int) {\r\n   let tempA = a\r\n   a = b\r\n   b = tempA\r\n}[/code]\r\n[note]An in-out parameter cannot be assigned a default value. A variadic parameter cannot be marked as inout. A parameter that is marked as inout cannot also be marked as var or let.[/note]\r\nAn[b] ampersand (&) [/b]that is inserted directly before a variable's name when it's passed as an argument to an inout parameter, indicates that the variable can be modified by the function:[code format=\"swift\" ]var someInt = 3\r\nvar anotherInt = 107\r\nswapInts([b]&[/b]someInt, [b]&[/b]anotherInt)[/code]\r\n[note]The in-out parameter presents an alternative method when a function is desired to have an effect outside of the scope of its function body.[/note]"}]}}