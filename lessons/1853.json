{"lesson":{"id":1853,"name":"DISTINCT and LIMIT","type":0,"mode":1,"videoID":"djXXk7bQJoQ","tags":null,"quizzes":[{"id":3589,"number":1,"videoStart":7.5,"videoEnd":123.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96279,"text":"SELECT","isCorrect":true,"properties":{}},{"id":96280,"text":"DISTINCT","isCorrect":true,"properties":{}},{"id":96281,"text":"FROM","isCorrect":true,"properties":{}},{"id":96282,"text":"COLUMNS","isCorrect":false,"properties":{}},{"id":96283,"text":"TABLE","isCorrect":false,"properties":{}}],"question":"Build a query to get distinct results from the ''customers'' table.\r\n[!raw!]\r\n{0} {1} state \r\n{2} customers;","textContent":"[h1]The DISTINCT Keyword[/h1]\r\n\r\nIn situations in which you have multiple duplicate records in a table, it might make more sense to return only unique records, instead of fetching the duplicates.\r\n\r\nThe SQL [b]DISTINCT [/b]keyword is used in conjunction with SELECT to eliminate all duplicate records and return only unique ones.\r\n\r\nThe basic syntax of DISTINCT is as follows: [code format=\"sql\"]SELECT [b]DISTINCT [/b]column_name1, column_name2\r\nFROM table_name;[/code]\r\nSee the [b]customers [/b]table below: [img id=\"2796\" width=\"100%\"]\r\nNote that there are duplicate [b]City [/b]names. The following SQL statement selects only distinct values from the City column: [code format=\"sql\"]SELECT [b]DISTINCT [/b]City FROM customers; [/code]\r\nThis would produce the following result. Duplicate entries have been removed. [img id=\"2797\" width=\"100%\"]"},{"id":3590,"number":2,"videoStart":124.0,"videoEnd":213.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96284,"text":"FROM","isCorrect":true,"properties":{}},{"id":96285,"text":"LIMIT","isCorrect":true,"properties":{}},{"id":96286,"text":"VIEW","isCorrect":false,"properties":{}},{"id":96287,"text":"NAMES","isCorrect":false,"properties":{}},{"id":96288,"text":"SELECT","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to complete the following statement, which selects five names from ''students''.\r\n[!raw!]\r\nSELECT name \r\n{0} students {1} 5;","textContent":"[h1]The LIMIT Keyword[/h1]\r\n\r\nBy default, all results that satisfy the conditions specified in the SQL statement are returned. However, sometimes we need to retrieve just a subset of records. In MySQL, this is accomplished by using the [b]LIMIT [/b]keyword. \r\n\r\nThe syntax for LIMIT is as follows: [code format=\"sql\"]SELECT column list\r\nFROM table_name\r\n[b]LIMIT [/b][number of records];[/code]\r\nFor example, we can retrieve the first [b]five [/b]records from the [b]customers [/b]table.[code format=\"sql\"]SELECT ID, FirstName, LastName, City\r\nFROM customers [b]LIMIT 5;[/b][/code]\r\nThis would produce the following result: [img id=\"2798\" width=\"100%\"]"},{"id":3591,"number":3,"videoStart":216.5,"videoEnd":332.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96289,"text":"SELECT","isCorrect":true,"properties":{}},{"id":96290,"text":"4","isCorrect":true,"properties":{}},{"id":96291,"text":"12","isCorrect":true,"properties":{}},{"id":96292,"text":"SHOW","isCorrect":false,"properties":{}},{"id":96293,"text":"RESULT","isCorrect":false,"properties":{}},{"id":96294,"text":"BY","isCorrect":false,"properties":{}}],"question":"Use LIMIT to select the ''id'' and ''name'' columns from ''customers''. Show 12 results, starting from the fifth.\r\n[!raw!]\r\n{0} id, name\r\nFROM customers\r\nLIMIT {1}, {2}","textContent":"[h1]The LIMIT Keyword[/h1]\r\n\r\nYou can also pick up a set of records from a particular [b]offset[/b].\r\nIn the following example, we pick up [b]four [/b]records, starting from the [b]third [/b]position:[code format=\"sql\"]SELECT ID, FirstName, LastName, City\r\n FROM customers [b]LIMIT 3, 4;[/b][/code]\r\nThis would produce the following result: [img id=\"2799\" width=\"100%\"]\r\n[note]The reason that it produces results starting from ID number four, and not three, is that MySQL starts counting from [b]zero[/b], meaning that the offset of the first row is 0, not 1.[/note]"}]}}