{"lesson":{"id":2609,"name":"Method Overloading","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5437,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103314,"text":"Same method name, different parameters","isCorrect":true,"properties":{}},{"id":103315,"text":"Same parameters, different method names","isCorrect":false,"properties":{}},{"id":103316,"text":"printing values","isCorrect":false,"properties":{}}],"question":"Method overloading means:","textContent":"[h1]Overloading[/h1]\r\n\r\nMethod [b]overloading [/b]is when multiple methods have the [b]same name[/b], but [b]different parameters[/b].\r\nFor example, you might have a [b]Print [/b]method that outputs its parameter to the console window: [code format=\"cs\" ]void Print([b]int [/b]a)\r\n{\r\n  Console.WriteLine(\"Value: \"+a);\r\n}[/code]\r\nThe + operator is used to concatenate values. In this case, the value of [b]a[/b] is joined to the text \"Value: \".\r\nThis method accepts an integer [b]argument [/b]only. \r\nOverloading it will make it available for other types, such as [b]double[/b]:[code format=\"cs\" ]void Print([b]double [/b]a)\r\n{\r\n  Console.WriteLine(\"Value: \"+a);\r\n}[/code]\r\n[note]Now, the same [b]Print[/b] method name will work for both integers and doubles.[/note]"},{"id":5438,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103323,"text":"9","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nstatic void Print(int a) {\r\n  Console.WriteLine(a*a);\r\n}\r\nstatic void Print(double a) {\r\n  Console.WriteLine(a+a);\r\n}\r\nstatic void Main(string[] args) {\r\n  Print(3);\r\n}","textContent":"[h1]Overloading[/h1]\r\n\r\nWhen overloading methods, the definitions of the methods must differ from each other by the types and/or number of parameters.\r\nWhen there are overloaded methods, the method called is based on the arguments. An [b]integer [/b]argument will call the method implementation that accepts an [b]integer [/b]parameter. A [b]double [/b]argument will call the implementation that accepts a [b]double [/b]parameter. Multiple arguments will call the implementation that accepts the same number of arguments.[code format=\"cs\" codeId=\"864\"]static void Print(int a) {\r\n  Console.WriteLine(\"Value: \" + a);\r\n}\r\nstatic void Print(double a) {\r\n  Console.WriteLine(\"Value: \" + a);\r\n}\r\nstatic void Print(string label, double a) {\r\n  Console.WriteLine(label + a);\r\n}\r\n\r\nstatic void Main(string[] args) {\r\n  Print([b]11[/b]);\r\n  Print([b]4.13[/b]);\r\n  Print([b]\"Average: \", 7.57[/b]);\r\n}[/code]\r\n[note]You cannot overload method declarations that differ only by return type.\r\nThe following declaration results in an [b]error[/b].\r\n[b]int [/b]PrintName(int a) { }\r\n[b]float [/b]PrintName(int b) { }\r\n[b]double [/b]PrintName(int c) { }[/note]"}]}}