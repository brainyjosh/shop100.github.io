{"lesson":{"id":1618,"name":"The switch Statement ","type":0,"mode":1,"videoID":"TNUCZpgPjrw","tags":"switch","quizzes":[{"id":2804,"number":1,"videoStart":4.0,"videoEnd":67.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97665,"text":"==","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97666,"text":"18","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to print \"you can drive a car\" if the variable 'age' equals 16, print \"buy a lottery ticket\" if the 'age' is equal to 18.\r\n[!raw!]\r\nint age;\r\ncin >> age;\r\nif (age {0} 16) {\r\n cout << \"you can drive a car\" << endl;\r\n} \r\nif (age == {1}) {\r\n cout << \"buy a lottery ticket\" << endl;\r\n}","textContent":"[h1]Multiple Conditions[/h1]\r\n\r\nSometimes there is a need to test a variable for equality against multiple values. That can be achieved using multiple if statements.\r\n[b]For example: [/b][code format=\"cpp\" codeId=\"209\"]int age = 42;\r\nif (age == 16) {\r\n  cout <<\"Too young\";\r\n}\r\nif (age == 42) {\r\n  cout << \"Adult\";\r\n}\r\nif (age == 70) {\r\n  cout << \"Senior\";\r\n}[/code]\r\n[note]The [b]switch [/b]statement is a more elegant solution in this scenario.[/note]"},{"id":2805,"number":2,"videoStart":71.0,"videoEnd":159.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94765,"text":"SWITCH test { } ","isCorrect":false,"properties":{}},{"id":94766,"text":"switch test;","isCorrect":false,"properties":{}},{"id":94767,"text":"switch (test) {  }","isCorrect":true,"properties":{}}],"question":"Which choice shows the correct syntax for the switch statement?","textContent":"[h1]The switch Statement[/h1]\r\n\r\nThe [b]switch [/b]statement tests a variable against a list of values, which are called [b]cases[/b], to determine whether it is equal to any of them.[code format=\"cpp\"][b]switch [/b](expression) {\r\n  [b]case [/b]value1:\r\n    statement(s);\r\n   [b] break;[/b]\r\n  [b]case [/b]value2:\r\n    statement(s);\r\n   [b] break;[/b]\r\n    ...\r\n  [b]case [/b]valueN:\r\n    statement(s);\r\n    [b]break;[/b]\r\n}[/code]\r\nSwitch evaluates the expression to determine whether it's equal to the value in the case statement. If a match is found, it executes the statements in that case.\r\n[note]A switch can contain any number of [b]case [/b]statements, which are followed by the [b]value [/b]in question and a [b]colon[/b].[/note]"},{"id":2807,"number":3,"videoStart":160.0,"videoEnd":213.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97667,"text":"switch","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97668,"text":"case","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97669,"text":"break","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to test the age variable against 16, 18, and 21 values and print corresponding texts to the screen.\r\n[!raw!]\r\n{0} (age) {\r\ncase 16:\r\n cout << \"you can drive a car\" << endl;\r\n break;\r\n{1} 18: \r\n cout << \"buy a lottery ticket\" << endl;\r\n {2};\r\ncase 21:\r\n cout << \"buy some beer\" << endl;\r\n break;\r\n}","textContent":"[h1]The switch Statement[/h1]\r\n\r\nHere is the previous example written using a single [b]switch [/b]statement: [code format=\"cpp\" codeId=\"210\"]int age = 42;\r\nswitch (age) {\r\n  case 16:\r\n    cout << \"Too young\";\r\n    [b]break[/b];\r\n  case 42:\r\n    cout << \"Adult\";\r\n    [b]break[/b];\r\n  case 70:\r\n    cout << \"Senior\";\r\n    [b]break[/b];\r\n}[/code]\r\nThe code above is equivalent to three [b]if[/b] statements.\r\n[note]Notice the keyword [b]break;[/b] that follows each case. That will be covered shortly.[/note]"},{"id":2808,"number":4,"videoStart":214.0,"videoEnd":264.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97670,"text":"x","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97671,"text":"default","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to test the value of the variable x; if x is 2, print \"it's 2\" to the screen; otherwise (the default case), print \"the default case\" to the screen.\r\n[!raw!]\r\nint x;\r\ncin >> x;\r\nswitch ({0}) {\r\ncase 2:\r\n cout << \"it's 2\" << endl;\r\n break;\r\n{1}: \r\n cout << \"the default case\" << endl;\r\n}","textContent":"[h1]The default Case[/h1]\r\n\r\nIn a switch statement, the optional [b]default [/b]case can be used to perform a task when none of the cases is determined to be true.\r\n\r\n[b]Example: [/b] [code format=\"cpp\" codeId=\"211\"]int age = 25;\r\nswitch (age) {\r\n  case 16:\r\n    cout << \"Too young\";\r\n    break;\r\n  case 42:\r\n    cout << \"Adult\";\r\n    break;\r\n  case 70:\r\n    cout << \"Senior\";\r\n    break;\r\n [b] default:[/b]\r\n    cout << \"This is the default case\";\r\n}\r\n\r\n// Outputs \"This is the default case\"[/code]\r\nThe [b]default [/b]statement's code executes when none of the cases matches the switch expression. \r\n[note]The [b]default [/b]case must appear at the end of the switch.[/note]"},{"id":2809,"number":5,"videoStart":266.0,"videoEnd":375.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117870,"text":"The rest of the cases would be executed, until encoutering a break statement","isCorrect":true,"properties":{}},{"id":117871,"text":"Nothing","isCorrect":false,"properties":{}},{"id":117872,"text":"A compile-time error","isCorrect":false,"properties":{}}],"question":"What would occur if we forget to insert 'break' after a 'case'?","textContent":"[h1]The break Statement[/h1]\r\n\r\nThe [b]break [/b]statement's role is to terminate the switch statement.\r\nIn instances in which the variable is equal to a case, the statements that come after the case continue to execute until they encounter a [b]break [/b]statement. In other words, leaving out a [b]break [/b]statement results in the execution of all of the statements in the following cases, even those that don't match the expression.\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"212\"]int age = 42;\r\nswitch (age) {\r\n  case 16:\r\n    cout << \"Too young\" << endl;\r\n  case 42:\r\n    cout << \"Adult\" << endl;\r\n  case 70:\r\n    cout << \"Senior\" << endl;\r\n  default:\r\n    cout <<\"This is the default case\" << endl;\r\n}\r\n/* Outputs\r\nAdult\r\nSenior\r\nThis is the default case\r\n*/[/code]\r\nAs you can see, the program executed the matching case statement, printing \"Adult\" to the screen. With no specified [b]break [/b]statement, the statements continued to run after the matching case. Thus, all the other case statements printed. This type of behavior is called [b]fall-through[/b].\r\n[note]As the switch statement's final case, the [b]default [/b]case requires no [b]break [/b]statement.\r\nThe [b]break [/b]statement can also be used to break out of a loop.[/note]"}]}}