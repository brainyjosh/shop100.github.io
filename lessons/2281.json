{"lesson":{"id":2281,"name":"while Loops","type":0,"mode":1,"videoID":null,"tags":"loops","quizzes":[{"id":4581,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97996,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"How many numbers does this code print?\r\ni = 3\r\nwhile i>=0:\r\n   print(i)\r\n   i = i - 1","textContent":"[h1]while Loops[/h1]\r\n\r\nAn [b]if [/b]statement is run once if its condition evaluates to [b]True[/b], and never if it evaluates to [b]False[/b]. \r\nA [b]while [/b]statement is similar, except that it can be run more than once. The statements inside it are repeatedly executed, as long as the condition holds. Once it evaluates to [b]False[/b], the next section of code is executed. \r\nBelow is a [b]while [/b]loop containing a variable that counts up from 1 to 5, at which point the loop terminates. [code format=\"py\" codeId=\"307\"]i = 1\r\n[b]while [/b]i <=5[b]:[/b]\r\n   print(i)\r\n   i = i + 1\r\n\r\nprint(\"Finished!\")[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n1\r\n2\r\n3\r\n4\r\n5\r\nFinished!\r\n>>>[/code]\r\n[note]The code in the body of a [b]while [/b]loop is executed repeatedly. This is called [b]iteration[/b].[/note]"},{"id":4989,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97997,"text":"while","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97998,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97999,"text":"print","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a loop that increments the value of x by 2 and prints the even values.\r\n[!raw!]\r\nx = 0\r\n{0} x <=20{1}\r\n  {2}(x)\r\n  x += 2","textContent":"[h1]while Loops[/h1]\r\n\r\nThe [b]infinite loop[/b] is a special kind of while loop; it never stops running. Its condition always remains [b]True[/b]. \r\nAn example of an infinite loop: [code format=\"py\" codeId=\"308\"]while 1==1:\r\n  print(\"In the loop\") [/code]\r\nThis program would indefinitely print \"In the loop\". \r\n[note]You can stop the program's execution by using the Ctrl-C shortcut or by closing the program.[/note]"},{"id":4990,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98000,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"How many numbers does this code print?\r\ni = 5\r\nwhile True:\r\n  print(i)\r\n  i = i - 1\r\n  if i <= 2:\r\n    break","textContent":"[h1]break[/h1]\r\n\r\nTo end a [b]while[/b] loop prematurely, the [b]break[/b] statement can be used. \r\nWhen encountered inside a loop, the [b]break [/b]statement causes the loop to finish immediately. [code format=\"py\" codeId=\"309\"]i = 0\r\nwhile 1==1:\r\n  print(i)\r\n  i = i + 1\r\n  if i >= 5:\r\n    print(\"Breaking\")\r\n    [b]break[/b]\r\n\r\nprint(\"Finished\")[/code]\r\n[b]Result: [/b][code format=\"raw\" ]>>>\r\n0\r\n1\r\n2\r\n3\r\n4\r\nBreaking\r\nFinished\r\n>>>[/code]\r\n[note]Using the [b]break [/b]statement outside of a loop causes an error.[/note]"},{"id":4991,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98006,"text":"continue","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which statement ends the current iteration and continues with the next one?","textContent":"[h1]continue[/h1]\r\n\r\nAnother statement that can be used within loops is [b]continue[/b]. \r\nUnlike [b]break[/b], [b]continue [/b]jumps back to the top of the loop, rather than stopping it.[code format=\"py\" codeId=\"310\"]i = 0\r\nwhile True:\r\n   i = i +1\r\n   if i == 2:\r\n      print(\"Skipping 2\")\r\n      [b]continue[/b]\r\n   if i == 5:\r\n      print(\"Breaking\")\r\n      [b]break[/b]\r\n   print(i)\r\n\r\nprint(\"Finished\")[/code]\r\n[b]Result: [/b][code format=\"raw\" ]>>>\r\n1\r\nSkipping 2\r\n3\r\n4\r\nBreaking\r\nFinished\r\n>>>[/code]\r\nBasically, the [b]continue [/b]statement stops the current iteration and continues with the next one.\r\n[note]Using the [b]continue [/b]statement outside of a loop causes an error.[/note]"}]}}