{"lesson":{"id":2167,"name":"Interfaces","type":0,"mode":1,"videoID":"AU07jJc_qMQ","tags":"interfaces","quizzes":[{"id":4280,"number":1,"videoStart":425.0,"videoEnd":632.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95522,"text":"only one","isCorrect":true,"properties":{}},{"id":95523,"text":"none","isCorrect":false,"properties":{}},{"id":95524,"text":"multiple","isCorrect":false,"properties":{}},{"id":95525,"text":"only two","isCorrect":false,"properties":{}}],"question":"In Java, how many superclasses can your inherited subclass have?","textContent":"[h1]Interfaces[/h1]\r\n\r\nAn [b]interface [/b]is a completely abstract class that contains only abstract methods.\r\nSome specifications for interfaces:\r\n- Defined using the [b]interface [/b]keyword.\r\n- May contain only static final variables.\r\n- Cannot contain a constructor because interfaces cannot be instantiated.\r\n- Interfaces can extend other interfaces.\r\n- A class can implement any number of interfaces.\r\n\r\nAn example of a simple interface:[code format=\"java\"][b]interface [/b]Animal {\r\n  public void eat();\r\n  public void makeSound();\r\n}[/code]\r\nInterfaces have the following properties:\r\n- An interface is implicitly abstract. You do not need to use the abstract keyword while declaring an interface.\r\n- Each method in an interface is also implicitly abstract, so the abstract keyword is not needed.\r\n- Methods in an interface are implicitly public.\r\n[note]A class can inherit from just [b]one [/b]superclass, but can implement [b]multiple [/b]interfaces![/note]"},{"id":4281,"number":2,"videoStart":631.5,"videoEnd":744.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99615,"text":"class","isCorrect":true,"properties":{}},{"id":99616,"text":"Animal","isCorrect":true,"properties":{}},{"id":99617,"text":"void","isCorrect":true,"properties":{}},{"id":99618,"text":"return","isCorrect":false,"properties":{}},{"id":99619,"text":"abstract","isCorrect":false,"properties":{}},{"id":99620,"text":"Cat","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to implement an interface.\r\n[!raw!]\r\ninterface Animal {\r\n   public void eat();\r\n}\r\n{0} Cat implements {1} {\r\n   public {2} eat() {\r\n      System.out.println(\"Cat eats\");\r\n   }\r\n}","textContent":"[h1]Interfaces[/h1]\r\n\r\nUse the [b]implements [/b]keyword to use an interface with your class.[code format=\"java\" codeId=\"778\"]interface Animal {\r\n  public void eat();\r\n  public void makeSound();\r\n}\r\n\r\nclass Cat [b]implements [/b]Animal {\r\n  public void makeSound() {\r\n    System.out.println(\"Meow\");\r\n  }\r\n  public void eat() {\r\n    System.out.println(\"omnomnom\");\r\n  }\r\n}[/code]\r\n[note]When you implement an interface, you need to override all of its methods.[/note]"}]}}