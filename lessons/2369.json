{"lesson":{"id":2369,"name":"The Storyboard","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4854,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59917,"text":"canvas","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"The background of the storyboard is called the...","textContent":"[h1]Open Your Storyboard[/h1]\r\n\r\nA [b]storyboard [/b]is a visual representation of the app's user interface, showing screens of content and the transitions between them. You see exactly what you're building while you're building it.\r\n\r\nIn the project navigator, select [b]Main.storyboard.[/b]\r\nXcode opens the storyboard in[b] Interface Builder[/b], which is the visual interface editor, located in the editor area. The storyboard's background is called the [b]canvas[/b]. The canvas is used to add and arrange UI elements.\r\n\r\nYour storyboard should look similar to this: [img id=\"1000\" width=\"100%\"] \r\nAt this point, your app's storyboard contains one [b]scene [/b]that represents an app screen showing content. The left-pointing [i]arrow [/i]on the canvas is the [b]storyboard entry point[/b], which means that this scene loads first upon starting the app.\r\n[note]The scene on the canvas doesn't share the iPhone 6 screen's exact dimensions, because it's a generalized representation of your interface. It can be applied to any device, in any orientation.[/note]"},{"id":4855,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59913,"text":"UIView","isCorrect":true,"properties":{}},{"id":59914,"text":"UIController","isCorrect":false,"properties":{}},{"id":59915,"text":"UICanvas","isCorrect":false,"properties":{}},{"id":59916,"text":"UInterface","isCorrect":false,"properties":{}}],"question":"In iOS, all view objects are of type...","textContent":"[h1]Build the Basic UI[/h1]\r\n\r\nXcode provides a library of objects that can be added to a storyboard file.\r\nThe elements in the UI are called [b]views[/b], and they display content to the user.\r\nAll view objects in iOS are of type [b]UIView[/b], or one of its subclasses.\r\nLet's add a text field to our view.\r\nOpen the [b]Object library[/b]. It appears at the bottom of the utility area on the right side of Xcode. [img id=\"1001\" width=\"100%\"]\r\nType [i]text field[/i] in the filter field in the Object library to quickly find the [b]Text Field[/b] object.\r\nDrag a Text Field object from the Object library to your scene: [img id=\"1002\" width=\"100%\"]\r\nIf necessary, click the text field to reveal the [b]resize handles[/b], which appear as small white squares on the element's borders. Drag the resize handles to resize the UI element.[img id=\"1003\" width=\"100%\"] \r\n[note][b]Blue layout guides[/b] appear to help you place, resize and position the text field.[/note]"},{"id":4856,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59867,"text":"Attribute inspector","isCorrect":true,"properties":{}},{"id":59868,"text":"Canvas","isCorrect":false,"properties":{}},{"id":59869,"text":"Navigation","isCorrect":false,"properties":{}},{"id":59870,"text":"Scheme","isCorrect":false,"properties":{}}],"question":"Which area of Xcode allows you to specify different attributes for views?","textContent":"[h1]Placeholder Text[/h1]\r\n\r\nUse the text field's [b]placeholder [/b]text to prompt the user to enter the value you need.\r\nSelect the text field, and open the [b]Attributes inspector[/b] in the utility area, in order to edit the properties of an object in your storyboard. [img id=\"1004\" width=\"100%\"]\r\nEnter the placeholder text and press Return to display it in the text field.\r\nYou can also edit the attributes of the system keyboard that's displayed when a user selects the text field.\r\nMake sure the text field is still selected.\r\nIn the Attributes inspector, find the field labeled [b]Return Key[/b] and select [b]Done[/b].\r\nThis change will make the default Return key on the keyboard more pronounced to the user by changing it into a Done key.\r\n[note]There are many different attributes available for each view. Just go through the list in the Attribute inspector, and you will find many useful options and customizations.[/note]"},{"id":4857,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59871,"text":"View","isCorrect":true,"properties":{}},{"id":59872,"text":"First Responder","isCorrect":false,"properties":{}},{"id":59873,"text":"Entry Point","isCorrect":false,"properties":{}},{"id":59874,"text":"Bottom Layout","isCorrect":false,"properties":{}}],"question":"The button, label, and text field are all listed under which object in the view hierarchy?","textContent":"[h1]Label and Button[/h1]\r\n\r\nWe have added a [b]label [/b](Name) and a [b]button [/b](Submit) to our scene from the Object library: [img id=\"1005\" width=\"100%\"]\r\nA label just displays static text in the UI, while a button is interactive. The user can tap the button to trigger an action that you've defined. In the next lesson, you'll create an action for the button.\r\n[note]You can edit the text of label and/or button by double-clicking.[/note]\r\nThe [b]outline view[/b], which appears on the left side of the canvas, shows you a hierarchical representation of your storyboard objects. You should be able to see the text field, label, and button you just added listed in the hierarchy. [img id=\"1006\" width=\"50%\"] \r\n[note]Not only do views display themselves onscreen and react to user input, they can serve as containers for other views. Views are arranged in a hierarchical structure called the [b]view hierarchy[/b].[/note]"}]}}