{"lesson":{"id":2337,"name":"Basic Operators: Part 1","type":0,"mode":1,"videoID":null,"tags":"operators","quizzes":[{"id":4737,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59181,"text":"Unary","isCorrect":false,"properties":{}},{"id":59182,"text":"Binary","isCorrect":false,"properties":{}},{"id":59183,"text":"Ternary","isCorrect":false,"properties":{}},{"id":59184,"text":"Combinatory","isCorrect":true,"properties":{}}],"question":"Which of the following is not an operator type?","textContent":"[h1]Basic Operators[/h1]\r\n\r\nAn [b]operator [/b]is a special symbol or phrase used to check, change, or combine values. \r\n\r\nOperators are unary, binary, or ternary:\r\n-[b]Unary [/b]Operator: Has a single target (-a). A unary prefix operator is placed before the target (!b). A unary postfix operator is placed after the target (i++).\r\n-[b]Binary [/b]Operator: Has two targets (4 + 5) and is infixed, appearing between the two targets.\r\n-[b]Ternary [/b]Operator: Has three targets. Like C, Swift has one ternary operator, the ternary conditional operator (a ? b : c).\r\n[note]The values targeted by operators are called operands. In the expression 1 + 2, the + symbol is a binary operator; its two operands are the values 1 and 2.[/note]"},{"id":4738,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96525,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What value is stored in the \"result\" variable after the following statement?\r\nvar a = 4 + 2\r\nvar b = 15 - a\r\nvar result = a / (b - a)","textContent":"[h1]Assignment Operator[/h1]\r\n\r\nThe assignment operator (a = b) initializes or updates the value of [b]a[/b] with the value of [b]b[/b]:[code format=\"swift\"]let b = 7\r\nvar a = 42\r\na = b  // a is now equal to 7[/code]\r\n[h1]Arithmetic Operators[/h1]\r\n\r\nSwift supports the four standard arithmetic operators for all number types:\r\n\r\n[b]Addition (+)[/b] [code format=\"swift\"]1 + 2 // equals 3[/code]\r\n[b]Subtraction (-)[/b] [code format=\"swift\"]6 - 2 // equals 4[/code]\r\n[b]Multiplication (*)[/b] [code format=\"swift\"]4 * 3 // equals 12[/code]\r\n[b]Division (/)[/b] [code format=\"swift\"]10.0 / 2.5 // equals 4.0[/code]\r\nThe addition operator is also supported for [b]String concatenation[/b]:\r\n[code format=\"swift\"]\"Hello, \" + \"world\"  // equals \"Hello, world\"[/code]"},{"id":4739,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96526,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What value is stored in the variable \"c\" after the following statements?\r\nvar a = 10,  b = 3\r\nvar c = a % (a - b)","textContent":"[h1]Remainder Operator[/h1]\r\n\r\nThe remainder operator (a % b) calculates the number of multiples of [b]b[/b] that fit within [b]a[/b], and returns the value that is left over, or the [b]remainder[/b].[code format=\"swift\"]9 % 4  // equals 1[/code]\r\nUnlike the remainder operator in C and Objective-C, Swift's remainder operator also operates on floating-point numbers:[code format=\"swift\"]8 % 2.5 // equals 0.5[/code]\r\nIn this example, 8 divided by 2.5 equals 3, with a remainder of 0.5, so the remainder operator returns a Double value of 0.5.\r\n[note]In other languages, the remainder operator (%) is called a [b]modulo [/b]operator. In Swift, however, its behavior for negative numbers means that it is, strictly speaking, a [b]remainder[/b], rather than a modulo operation.[/note]"},{"id":4740,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96527,"text":"2 0 2","isCorrect":false,"properties":{}},{"id":96528,"text":"2 0 1","isCorrect":false,"properties":{}},{"id":96529,"text":"2 1 2","isCorrect":false,"properties":{}},{"id":96530,"text":"2 1 1","isCorrect":true,"properties":{}}],"question":"Which choice is the output value of the following code:\r\nvar a = 0\r\nlet b = ++a\r\nlet c = a++\r\nprint(\"\\(a)  \\(b)  \\(c)\")","textContent":"[h1]Increment and Decrement Operators[/h1]\r\n\r\nSwift's increment operator (++) and decrement operator (--) are used as shortcuts that increase or decrease the value of a numeric variable by 1.[code format=\"swift\"]var i = 0\r\n[b]++[/b]i  // i now equals 1[/code]\r\n[note]++i is shorthand for saying i = i + 1.\r\n--i can be used as shorthand for i = i - 1.[/note]\r\nIf the operator appears before the variable, it increments the variable before returning its value.\r\nIf the operator appears after the variable, it increments the variable after returning its value.\r\n\r\nLike C, Swift provides compound assignment operators that combine assignment (=) with another operation. [code format=\"swift\"]var a = 1\r\na [b]+=[/b] 2\r\n// a is now equal to 3[/code]\r\n[note]The expression a += 2 is shorthand for a = a + 2. The addition and the assignment are combined into one operator that performs both tasks at the same time.[/note]"}]}}