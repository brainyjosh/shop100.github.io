{"lesson":{"id":2137,"name":"A Hello World Program","type":0,"mode":1,"videoID":"SHIT5VkNrCg","tags":null,"quizzes":[{"id":4199,"number":1,"videoStart":74.0,"videoEnd":159.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99484,"text":"main","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which method is the starting point for all Java programs?","textContent":"[h1]Your First Java Program[/h1]\r\n\r\nNow that you've seen the \"Hello World\" program, we'll explain how it works. \r\nOnce again, here is the code: [code format=\"java\" codeId=\"716\"][b]class[/b] MyClass {\r\n  public static void [b]main[/b](String[ ] args) {\r\n    System.out.println(\"Hello World\");\r\n  }\r\n}[/code]\r\nIn Java, every line of code that can actually run needs to be inside a [b]class[/b].\r\nIn our example, we named the class [b]MyClass[/b]. You will learn more about classes in the upcoming modules.\r\n\r\nIn Java, each application has an entry point, or a starting point, which is a method called [b]main[/b]. Along with main, the keywords [b]public [/b]and [b]static [/b]will also be explained later. \r\n[note]As a summary:\r\n- Every program in Java must have a [b]class[/b].\r\n- Every Java program starts from the [b]main[/b] method.[/note]"},{"id":4200,"number":2,"videoStart":159.0,"videoEnd":238.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106628,"text":"hello","isCorrect":false,"properties":{"prefix":"void ","postfix":"()"}}],"question":"Fill in the blank to declare a method called \"hello()\".","textContent":"[h1]The main Method[/h1]\r\n\r\nTo run our program, the [b]main [/b]method must be identical to this signature:[code format=\"java\" ][b]public static void main(String[ ] args)[/b][/code]\r\n- [b]public[/b]: anyone can access it\r\n- [b]static[/b]: method can be run without creating an instance of the class containing the main method\r\n- [b]void[/b]: method doesn't return any value\r\n- [b]main[/b]: the name of the method\r\n\r\nFor example, the following code declares a method called [b]test[/b], which does not return anything and has no parameters:[code format=\"java\" ]void test()[/code]\r\n[note]The method's parameters are declared inside the parentheses that follow the name of the method. \r\nFor [b]main[/b], it's an array of strings called [b]args[/b]. We will use it in our next lesson, so don't worry if you don't understand it all now.[/note]"},{"id":4201,"number":3,"videoStart":238.0,"videoEnd":377.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95316,"text":"System.printText()","isCorrect":false,"properties":{}},{"id":95317,"text":"System.out()","isCorrect":false,"properties":{}},{"id":95318,"text":"System.out.println()","isCorrect":true,"properties":{}},{"id":95319,"text":"out.writeText() ","isCorrect":false,"properties":{}}],"question":"Which method prints text in a Java program?","textContent":"[h1]System.out.println()[/h1]\r\n\r\nNext is the body of the [b]main [/b]method, enclosed in curly braces: [code format=\"java\"]{\r\n   System.out.println(\"Hello World!\");\r\n}[/code]\r\nThe [b]println [/b]method prints a line of text to the screen.\r\nThe [b]System [/b]class and its [b]out [/b]stream are used to access the [b]println [/b]method.\r\n[note]In classes, methods, and other flow-control structures code is always enclosed in curly braces { }.[/note]"},{"id":4202,"number":4,"videoStart":377.0,"videoEnd":418.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105648,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":105649,"text":"main","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a valid Java program.\r\n[!raw!]\r\n{0} Apples {\r\n    public static void {1}(String[ ]args) {\r\n    System.out.println(\"Hello, World!\");\r\n   }\r\n}","textContent":"[h1]Semicolons in Java[/h1]\r\n\r\nYou can pass a different text as the parameter to the [b]println [/b]method to print it. [code format=\"java\" codeId=\"717\"]class MyClass {\r\n  public static void main(String[ ] args) {\r\n    [b]System.out.println(\"I am learning Java\");[/b]\r\n  }\r\n}[/code]\r\nIn Java, each code statement must end with a [b]semicolon[/b].  \r\n[note]Remember: do not use [b]semicolons [/b]after method and class declarations that follow with the body defined using the curly braces.[/note]"}]}}