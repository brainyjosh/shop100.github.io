{"lesson":{"id":1629,"name":"Multi-Dimensional Arrays","type":0,"mode":1,"videoID":"B3iC40frU4M","tags":"arrays","quizzes":[{"id":2854,"number":1,"videoStart":4.0,"videoEnd":90.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94821,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94822,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to declare a two-dimensional array multiArr which has 2 rows and 4 columns.\r\n[!raw!]\r\nint multiArr[{0}][{1}];","textContent":"[h1]Multi-Dimensional Arrays[/h1]\r\n\r\nA [b]multi-dimensional[/b] array holds one or more arrays. Declare a multidimensional array as follows.[code format=\"cpp\"]type name[size1][size2]...[sizeN];[/code]\r\nHere, we've created a [b]two-dimensional[/b] 3x4 integer array:[code format=\"cpp\"]int x[3][4];[/code]\r\nVisualize this array as a table composed of 3 rows, and 4 columns.[img id=\"2422\" width=\"100%\"]"},{"id":2856,"number":2,"videoStart":91.0,"videoEnd":284.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97701,"text":"0","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97702,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to print arr's element's value to the screen, which is located at the first row and the second column.\r\n[!raw!]\r\ncout << arr[{0}][{1}] << endl;","textContent":"[h1]Two-Dimensional Arrays[/h1]\r\n\r\nMulti-dimensional arrays may be initialized by specifying bracketed values for each row. \r\nFollowing is an array with 2 rows and 3 columns: [code format=\"cpp\" ]int x[2][3] = {\r\n  {2, 3, 4}, // 1st row\r\n  {8, 9, 10} // 2nd row\r\n};[/code]\r\nYou can also write the same initialization using just one row.[code format=\"cpp\" ]int x[2][3] = {{2, 3, 4}, {8, 9, 10}};[/code]\r\nThe elements are accessed by using the row index and column index of the array. \r\nFor example: [code format=\"cpp\" codeId=\"221\"]int x[2][3] = {{2, 3, 4}, {8, 9, 10}};\r\ncout << [b]x[0][2][/b] << endl;\r\n\r\n//Outputs 4[/code]\r\n[note]The first index 0 refers to the first row. The second index 2 refers to the 3rd element of the first row, which is 4. [/note]"},{"id":2857,"number":3,"videoStart":284.6,"videoEnd":343.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94827,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94828,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94829,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to declare a multidimensional array with 2 rows and 3 columns. Enter the value using cin for the element in the second column of the second row.\r\n[!raw!]\r\nint arr[2][{0}];\r\ncin >> arr[{1}][{2}];","textContent":"[h1]Multi-Dimensional Arrays[/h1]\r\n\r\nArrays can contain an unlimited number of dimensions.[code format=\"cpp\"]string threeD[42][8][3];[/code]\r\nThe example above declares a [b]three-dimensional [/b]array of strings. As we did previously, it's possible to use index numbers to access and modify the elements.\r\n[note]Arrays more than three dimensions are harder to manage.[/note]"}]}}