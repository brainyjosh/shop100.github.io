{"lesson":{"id":2724,"name":"Return Values from Methods","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5713,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113150,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113151,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113152,"text":"temp","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a method that returns the quotient of its parameters, and then call the method with x and y as its arguments.\r\n[!raw!]\r\n{0} temp(a, b)\r\n  {1} a/b\r\nend\r\n\r\nx= 8\r\ny = 2\r\nputs {2}(x, y)","textContent":"[h1]Returning Values[/h1]\r\n\r\nUntil now all the methods we have defined output values. Sometimes you need a method to perform an action and return the result so that the returned value can be used further in the program (for example, by assigning the return value to a variable). \r\nThe [b]return [/b]keyword is used to return a value from a method.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1048\"]def sum(a, b)\r\n  res = a+b\r\n  [b]return[/b] res\r\nend\r\n\r\nx = sum(5, 23)\r\nputs x[/code]\r\n[note]The [b]sum [/b]method returns the sum of its parameters, which is then assigned to variable [b]x[/b].[/note]"},{"id":5714,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113702,"text":"5","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the return value of the following method?\r\ndef test\r\n  a = 8\r\n  b = 3\r\n  c = a-b\r\nend","textContent":"[h1]Returning Values[/h1]\r\n\r\nYou can return multiple values from a method by separating them with commas in the [b]return [/b]statement.\r\n[b]For example:[/b][code format=\"rb\" codeId=\"1049\"]def squares(a, b, c)\r\n  return a*a, b*b, c*c\r\nend\r\n\r\narr = squares(2, 3, 6)\r\nputs arr[/code]\r\nThe result is an array containing the returned values.\r\n\r\nEven when you do not explicitly include a [b]return [/b]statement in your method, Ruby [b]always returns[/b] the evaluated result of the last line of the method that is executed. \r\n[b]For example:[/b][code format=\"rb\" codeId=\"1050\"]def demo(a, b)\r\n  a = b-2\r\n  b = a-3\r\nend\r\n\r\nputs demo(5, 6)\r\n# outputs 1[/code]\r\nThe above method will return the result of its last expression, which is b = a-3.\r\n[note]Any code in the method after a [b]return [/b]statement will not execute, because a method stops executing once the [b]return [/b]is executed.\r\n[b]For example:[/b]\r\ndef demo(a)\r\n a = 5\r\n return a\r\n  a = 9\r\nend\r\n\r\nThe method above will return the value 5. The statement a=9 is ignored.[/note]"},{"id":5715,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113157,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\ndef calc(a, b)\r\n  return a*a, b*b, a*b\r\nend\r\nputs calc(3, 2).length","textContent":"[h1]Chaining Methods[/h1]\r\n\r\nBecause all methods return a value, we can chain multiple methods together, as well as chain methods with iterators.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1051\"]def square(x)\r\n  x*x\r\nend\r\n\r\nsquare(4).times {puts \"Hi\"}[/code]\r\nIn the code above we chained our defined [b]square [/b]method with the [b]times [/b]iterator. As square(4) will return 16, the loop will run and output \"Hi\" 16 times.\r\n[note]If anywhere along the chain there is a [b]nil [/b]or an error, the entire chained call will break down.[/note]"},{"id":5716,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113164,"text":"an array","isCorrect":true,"properties":{}},{"id":113165,"text":"a symbol","isCorrect":false,"properties":{}},{"id":113166,"text":"a method","isCorrect":false,"properties":{}}],"question":"When a method returns multiple values, the returned object is:","textContent":"[h1]Methods as Arguments[/h1]\r\n\r\nWe can also pass methods as arguments to other methods. The returned values of those methods will be used as the actual values for the arguments, for example: [code format=\"rb\" codeId=\"1052\"]def add(a, b)\r\n  a+b\r\nend\r\n\r\ndef mult(a, b)\r\n  a*b\r\nend\r\n\r\nx = mult(add(2, 3), add(4, 7))\r\nputs x\r\n# outputs 55[/code]\r\nWe defined two methods, [b]add [/b]and [b]mult[/b], and passed two calls to the [b]add [/b]method as arguments to [b]mult[/b].\r\n[note]Lets break down the code:\r\nadd(2, 3) returns 5\r\nadd(4, 7) returns 11\r\nso mult(add(2, 3), add(4, 7)) is the same as mult(5, 11) which returns 55.[/note]"}]}}