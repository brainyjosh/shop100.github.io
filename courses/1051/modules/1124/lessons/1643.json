{"lesson":{"id":1643,"name":"Pass by Reference with Pointers","type":0,"mode":1,"videoID":"_ja8iizm7nk","tags":"pointers","quizzes":[{"id":2926,"number":1,"videoStart":4.0,"videoEnd":56.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78065,"text":"Pass by reference and pass by name","isCorrect":false,"properties":{}},{"id":78066,"text":"Pass by value and pass by name","isCorrect":false,"properties":{}},{"id":78067,"text":"Pass by reference and pass by value","isCorrect":true,"properties":{}}],"question":"What are the two different ways to pass arguments into functions?","textContent":"[h1]Function Arguments[/h1]\r\n\r\nThere are two ways to pass arguments to a function as the function is being called.\r\n\r\n[b]By value:[/b] This method copies the argument's actual value into the function's formal parameter. Here, we can make changes to the parameter within the function without having any effect on the argument.\r\n\r\n[b]By reference:[/b] This method copies the argument's reference into the formal parameter. Within the function, the reference is used to access the actual argument used in the call. This means that any change made to the parameter affects the argument.\r\n[note]By default, C++ uses call[b] by value[/b] to pass arguments.[/note]"},{"id":2927,"number":2,"videoStart":57.0,"videoEnd":143.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97791,"text":"Pass the copy of the variable as the argument","isCorrect":true,"properties":{}},{"id":97792,"text":"Pass the address of the variable as the argument","isCorrect":false,"properties":{}},{"id":97793,"text":"Pass the main function as the argument","isCorrect":false,"properties":{}}],"question":"Pass by value means:","textContent":"[h1]Passing by Value[/h1]\r\n\r\nBy default, arguments in C++ are passed [b]by value[/b].\r\nWhen passed by value, a copy of the argument is passed to the function.\r\n\r\n[b]Example: [/b][code format=\"cpp\" codeId=\"250\"]void myFunc(int x) {\r\n  x = 100;\r\n}\r\n\r\nint main() {\r\n  int var = 20;\r\n  myFunc(var);\r\n  cout << var;\r\n}\r\n// Outputs 20[/code]\r\n[note]Because a copy of the argument is passed to the function, the original argument is not modified by the function.[/note]"},{"id":2928,"number":3,"videoStart":144.5,"videoEnd":266.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97794,"text":"arg","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to pass the variable arg by value to the 'passByValue' function:\r\n[!raw!]\r\nvoid passByValue(int x) {\r\n  x = 99;\r\n}\r\nint main()\r\n{\r\n  int arg = 13;\r\n  passByValue({0});\r\n  return 0;\r\n}","textContent":"[h1]Passing by Reference[/h1]\r\n\r\n[b]Pass-by-reference[/b] copies an argument's address into the formal parameter. Inside the function, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\r\nTo pass the value by reference, argument [b]pointers [/b]are passed to the functions just like any other value. [code format=\"cpp\" codeId=\"251\"]void myFunc(int *x) {\r\n  *x = 100;\r\n}\r\n\r\nint main() {\r\n  int var = 20;\r\n  myFunc([b]&var[/b]);\r\n  cout << var;\r\n}\r\n// Outputs 100[/code]\r\nAs you can see, we passed the variable directly to the function using the [b]address-of operator &[/b]. \r\nThe function declaration says that the function takes a [b]pointer [/b]as its parameter (defined using the [b]* operator[/b]).\r\n[note]As a result, the function has actually changed the argument's value, as accessed it via the pointer.[/note]"},{"id":2930,"number":4,"videoStart":290.0,"videoEnd":479.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78072,"text":"Can modify the actual variable passed to it","isCorrect":true,"properties":{}},{"id":78073,"text":"Receives just a copy of the actual argument","isCorrect":false,"properties":{}},{"id":78074,"text":"Is a recursive function","isCorrect":false,"properties":{}}],"question":"A function taking an argument by reference:","textContent":"[h1]Summary[/h1]\r\n\r\n[i][/i][b]Passing by value: [/b]This method copies the actual value of an argument into the formal parameter of the function. In this case, changes made to the parameter inside the function have no effect on the argument.\r\n\r\n[b]Passing by reference:[/b] This method copies the reference of an argument into the formal parameter. Inside the function, the reference is used to access the actual argument used in the call. So, changes made to the parameter also affect the argument.\r\n[note]In general, passing by value is faster and more effective. Pass by reference when your function needs to modify the argument, or when you need to pass a data type, that uses a lot of memory and is expensive to copy.[/note]"}]}}