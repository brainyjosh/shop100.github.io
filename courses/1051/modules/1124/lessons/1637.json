{"lesson":{"id":1637,"name":"Functions with Multiple Parameters","type":0,"mode":1,"videoID":"fQ_CBGVfGbM","tags":"functions","quizzes":[{"id":2900,"number":1,"videoStart":17.5,"videoEnd":127.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94940,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94941,"text":",","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing parts of the following code to define a function hello, which returns int and takes two parameters.\r\n[!raw!]\r\n{0} hello(int a{1} int b)\r\n{\r\n // do something..\r\n}","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nYou can define as many parameters as you want for your functions, by separating them with [b]commas[/b].\r\n\r\nLet's create a simple function that returns the sum of two parameters.[code format=\"cpp\"]int addNumbers([b]int x, int y[/b]) {\r\n // code goes here\r\n}[/code]\r\nAs defined, the [b]addNumbers [/b]function takes two parameters of type [b]int[/b], and returns [b]int[/b].\r\n[note][b]Data type[/b] and [b]name [/b]should be defined for each parameter.[/note]"},{"id":2901,"number":2,"videoStart":128.5,"videoEnd":206.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94942,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94943,"text":"x","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94944,"text":"answer","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing parts of the function addNumbers which takes two integer variables x and y, and returns their sum. Sum is calculated and stored in the 'answer' variable.\r\n[!raw!]\r\nint addNumbers(int x, {0} y)\r\n{\r\n  int answer = {1} + y;\r\n  return {2};\r\n}","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nNow let's calculate the sum of the two parameters and return the result: [code format=\"cpp\"]int addNumbers(int x, int y) {\r\n  int result = x + y;\r\n  [b]return [/b]result;\r\n}[/code]"},{"id":2902,"number":3,"videoStart":207.0,"videoEnd":326.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97754,"text":"y","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97755,"text":"86","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97756,"text":"result","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in code to call function addNumbers from main with parameter values 43 and 86. Return value is stored in the variable result, and then printed to the screen using cout.\r\n[!raw!]\r\nint addNumbers(int x, int y) {\r\n return x + {0};\r\n}\r\nint main()\r\n{\r\n int result = addNumbers(43, {1});\r\n cout << {2} << endl;\r\n return 0;\r\n}","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nNow we can call the function.[code format=\"cpp\" codeId=\"236\"]int addNumbers(int x, int y) {\r\n  int result = x + y;\r\n  return result;\r\n}\r\n\r\nint main() {\r\n  cout << addNumbers(50, 25);\r\n  // Outputs 75\r\n}[/code]\r\nYou can also assign the returned value to a variable.[code format=\"cpp\" codeId=\"237\"]int main() {\r\n  int x = addNumbers(35, 7);\r\n  cout << x;\r\n  // Outputs 42\r\n}[/code]"},{"id":2903,"number":4,"videoStart":327.0,"videoEnd":366.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97757,"text":"Only one","isCorrect":false,"properties":{}},{"id":97758,"text":"One or two","isCorrect":false,"properties":{}},{"id":97759,"text":"As many as you want","isCorrect":true,"properties":{}}],"question":"How many parameters can a function have?","textContent":"[h1]Multiple Parameters[/h1]\r\n\r\nYou can add as many parameters to a single function as you want.\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"238\"]int addNumbers(int x, int y, int z, int a) {\r\n  int result = x + y + z + a;\r\n  return result;\r\n}[/code]\r\n[note]If you have multiple parameters, remember to separate them with [b]commas[/b], both when declaring them and when passing the arguments.[/note]"}]}}