{"lesson":{"id":1901,"name":"Operator Overloading","type":0,"mode":1,"videoID":"PgGhEovFhd0","tags":"operator-overloading","quizzes":[{"id":3740,"number":1,"videoStart":24.0,"videoEnd":87.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78984,"text":"class","isCorrect":true,"properties":{}},{"id":78985,"text":"public","isCorrect":true,"properties":{}},{"id":78986,"text":"Sally","isCorrect":true,"properties":{}},{"id":78987,"text":"~Sally","isCorrect":false,"properties":{}},{"id":78988,"text":"private","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a class ''Sally'', with only a constructor in its public section.\r\n[!raw!]\r\n{0} Sally \r\n{\r\n{1}:\r\n {2}();\r\n};","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nMost of the C++ built-in operators can be redefined or [b]overloaded[/b].  \r\nThus, operators can be used with user-defined types as well (for example, allowing you to [b]add [/b]two objects together).\r\n\r\nThis chart shows the operators that can be overloaded.  [img id=\"2463\" width=\"100%\"]\r\n[note]Operators that can't be overloaded include :: | .* | . | ?:[/note]"},{"id":3741,"number":2,"videoStart":88.0,"videoEnd":155.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95132,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95133,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95134,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a class ''Sally'',  with two constructors, one default constructor (without parameters), and a constructor with one integer parameter.\r\n[!raw!]\r\n{0} Sally\r\n{\r\n{1}:\r\n Sally(); \r\n Sally({2});\r\n};","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nLet's declare a sample class to demonstrate operator overloading: [code format=\"cpp\"]class MyClass {\r\n public:\r\n  int var;\r\n  MyClass() {}\r\n  MyClass(int a)\r\n  : var(a) { }\r\n};[/code]\r\nOur class has two constructors and one member variable.\r\n[note]We will be overloading the + operator, to enable adding two objects of our class together.[/note]"},{"id":3742,"number":3,"videoStart":156.0,"videoEnd":203.5,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95139,"text":"overload_it","isCorrect":false,"properties":{}},{"id":95140,"text":"operator","isCorrect":true,"properties":{}},{"id":95141,"text":"friend","isCorrect":false,"properties":{}},{"id":95142,"text":"this","isCorrect":false,"properties":{}}],"question":"Which choice is the keyword for overloading an operator in C++?","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nOverloaded operators are functions, defined by the keyword [b]operator [/b]followed by the symbol for the operator being defined.\r\nAn overloaded operator is similar to other functions in that it has a [b]return type[/b] and a[b] parameter list[/b].\r\n\r\nIn our example we will be overloading the [b]+ operator[/b]. It will [b]return [/b]an object of our class and take an object of our class as its [b]parameter[/b]. [code format=\"cpp\"]class MyClass {\r\n public:\r\n  int var;\r\n  MyClass() {}\r\n  MyClass(int a)\r\n  : var(a) { }\r\n\r\n  [b]MyClass operator+(MyClass &obj) {\r\n  }[/b]\r\n};[/code]\r\n[note]Now, we need to define what the function does.[/note]"},{"id":3743,"number":4,"videoStart":204.0,"videoEnd":333.5,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97844,"text":"operator+","isCorrect":true,"properties":{}},{"id":97845,"text":"Test","isCorrect":true,"properties":{}},{"id":97846,"text":"+","isCorrect":true,"properties":{}},{"id":97847,"text":"class","isCorrect":false,"properties":{}},{"id":97848,"text":"const","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define an overloaded + operator for the class ''Test''.\r\n[!raw!]\r\nTest Test::{0}(Test obj) {\r\n {1} newObj;\r\n newObj.mem = \r\n  mem {2} obj.mem;\r\n return newObj;\r\n}","textContent":"[h1]Operator Overloading[/h1]\r\n\r\nWe need our + operator to return a new [b]MyClass [/b]object with a member variable equal to the sum of the two objects' member variables.[code format=\"cpp\" ]class MyClass {\r\n public:\r\n  int var;\r\n  MyClass() {}\r\n  MyClass(int a)\r\n  : var(a) { }\r\n\r\n  MyClass operator+(MyClass &obj) {\r\n   [b]MyClass res;\r\n   res.var= this->var+obj.var;\r\n[/b]   [b]return res;[/b] \r\n  }\r\n};[/code]\r\nHere, we declared a new [b]res [/b]object. We then assigned the sum of the member variables of the current object ([b]this[/b]) and the parameter object ([b]obj[/b]) to the [b]res [/b]object's var member variable. The [b]res [/b]object is returned as the result.\r\n\r\nThis gives us the ability to create objects in main and use the overloaded + operator to add them together.[code format=\"cpp\" codeId=\"266\"]int main() {\r\n  MyClass obj1(12), obj2(55);\r\n  [b]MyClass res = obj1+obj2;[/b]\r\n\r\n  cout << res.var;\r\n}\r\n\r\n//Outputs 67[/code]\r\n[note]With overloaded operators, you can use any custom logic needed. However, it's not possible to alter the operators' precedence, grouping, or number of operands.[/note]"}]}}