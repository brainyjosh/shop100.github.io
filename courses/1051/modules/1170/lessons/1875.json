{"lesson":{"id":1875,"name":"Destructors","type":0,"mode":1,"videoID":"4P4Im0vF_mU","tags":"destructors","quizzes":[{"id":3663,"number":1,"videoStart":24.5,"videoEnd":58.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78216,"text":"Constructor runs when an object is deleted","isCorrect":false,"properties":{}},{"id":78217,"text":"Constructor runs when an object is created; destructor runs when it is deleted","isCorrect":true,"properties":{}},{"id":78218,"text":"Destructor runs when you create an object","isCorrect":false,"properties":{}}],"question":"Which statement about C++ constructors and destructors is the correct one?","textContent":"[h1]Destructors[/h1]\r\n\r\nRemember constructors? They're special member functions that are automatically called when an object is created.\r\n[b]Destructors [/b]are special functions, as well. They're called when an object is [b]destroyed [/b]or [b]deleted[/b].\r\n[note]Objects are destroyed when they go out of scope, or whenever the [b]delete [/b]expression is applied to a pointer directed at an object of a class.[/note]"},{"id":3664,"number":2,"videoStart":58.0,"videoEnd":164.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95036,"text":"~","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the destructor sign.","textContent":"[h1]Destructors[/h1]\r\n\r\nThe name of a [b]destructor [/b]will be exactly the same as the class, only prefixed with a [b]tilde (~)[/b]. A destructor can't return a value or take any parameters.[code format=\"cpp\"]class MyClass {\r\n  public: \r\n    [b]~MyClass() {\r\n     [/b]// some code\r\n[b]    }[/b]\r\n};[/code]\r\n[note]Destructors can be very useful for releasing resources before coming out of the program. This can include closing files, releasing memory, and so on.[/note]"},{"id":3665,"number":3,"videoStart":166.0,"videoEnd":177.5,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95037,"text":"~MyClass()","isCorrect":true,"properties":{}},{"id":95038,"text":"destructor()","isCorrect":false,"properties":{}},{"id":95039,"text":"MyClass~~","isCorrect":false,"properties":{}},{"id":95040,"text":"! MyClass()","isCorrect":false,"properties":{}}],"question":"Fill in the blank to declare a destructor for class MyClass.\r\n[!raw!]\r\nclass MyClass {\r\npublic:\r\n   MyClass();\r\n   {0};\r\n};","textContent":"[h1]Destructors[/h1]\r\n\r\nFor example, let's declare a [b]destructor [/b]for our MyClass class, in its header file [b]MyClass.h[/b]: [code format=\"cpp\"]class MyClass\r\n{\r\n  public:\r\n   MyClass();\r\n   [b]~MyClass();[/b]\r\n};[/code]"},{"id":3666,"number":4,"videoStart":178.0,"videoEnd":211.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95041,"text":"~MyClass()","isCorrect":true,"properties":{}},{"id":95042,"text":"cout","isCorrect":true,"properties":{}},{"id":95043,"text":"<<","isCorrect":true,"properties":{}},{"id":95044,"text":">>","isCorrect":false,"properties":{}},{"id":95045,"text":"destructor","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a destructor for class ''MyClass'', which prints some text in its body on the screen.\r\n[!raw!]\r\nMyClass::{0} {\r\n {1} {2} \"some text\";\r\n }","textContent":"[h1]Destructors[/h1]\r\n\r\nAfter declaring the destructor in the header file, we can write the implementation in the source file MyClass.cpp: [code format=\"cpp\"]#include \"MyClass.h\"\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nMyClass::MyClass()\r\n{\r\n  cout<<\"Constructor\"<<endl;\r\n}\r\n\r\n[b]MyClass::~MyClass()\r\n{\r\n  cout<<\"Destructor\"<<endl;\r\n}[/b][/code]\r\n[note]Note that we included the <iostream> header, so that we can use [b]cout[/b].[/note]"},{"id":3667,"number":5,"videoStart":232.0,"videoEnd":262.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78233,"text":"A destructor can't have any parameters","isCorrect":true,"properties":{}},{"id":78234,"text":"Destructor always returns double","isCorrect":false,"properties":{}},{"id":78235,"text":"We cannot overload a destructor","isCorrect":true,"properties":{}},{"id":78236,"text":"Destructor has no name","isCorrect":false,"properties":{}}],"question":"Which of the following statements are true about destructors?","textContent":"[h1]Destructors[/h1]\r\n\r\nSince destructors can't take parameters, they also can't be overloaded. \r\nEach class will have just [b]one [/b]destructor.\r\n[note]Defining a destructor is not mandatory; if you don't need one, you don't have to define one.[/note]"},{"id":3668,"number":6,"videoStart":263.0,"videoEnd":355.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106650,"text":"...class member variables","isCorrect":false,"properties":{}},{"id":106651,"text":"...called when an object is deleted","isCorrect":true,"properties":{}},{"id":106652,"text":"...called only if a constructor is not called","isCorrect":false,"properties":{}}],"question":"Destructors are...","textContent":"[h1]Destructors[/h1]\r\n\r\nLet's return to our main.[code format=\"cpp\" codeId=\"258\"]#include <iostream>\r\n[b]#include \"MyClass.h\"[/b]\r\nusing namespace std;\r\n\r\nint main() {\r\n  MyClass obj;\r\n\r\n  return 0;\r\n}[/code]\r\nWe included the class' header file and then created an object of that type.\r\nThis returns the following output: [code format=\"cpp\" ]Constructor\r\nDestructor[/code]\r\nWhen the program runs, it first creates the object and calls the constructor. The object is deleted and the destructor is called when the program's execution is completed.\r\n[note]Remember that we printed \"Constructor\" from the constructor and \"Destructor\" from the destructor.[/note]"}]}}