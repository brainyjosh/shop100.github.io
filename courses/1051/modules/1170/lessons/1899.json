{"lesson":{"id":1899,"name":"The Friend Keyword","type":0,"mode":1,"videoID":"WCFGNdXSzus","tags":"classes friend","quizzes":[{"id":3733,"number":1,"videoStart":7.0,"videoEnd":141.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95110,"text":"friend","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the keyword for making a function a friend function for a class.","textContent":"[h1]Friend Functions[/h1]\r\n\r\nNormally, private members of a class cannot be accessed from outside of that class.\r\nHowever, declaring a [b]non-member [/b]function as a [b]friend [/b]of a class allows it to access the class' private members. This is accomplished by including a declaration of this external function within the class, and preceding it with the keyword [b]friend[/b]. \r\nIn the example below, [b]someFunc()[/b], which is not a member function of the class, is a friend of [b]MyClass [/b]and can access its private members. [code format=\"cpp\"]class MyClass {\r\n public:\r\n  MyClass() {\r\n   regVar = 0;\r\n  };\r\n private:\r\n  int regVar;\r\n    \r\n  [b]friend void someFunc(MyClass &obj);[/b]\r\n};[/code]\r\n[note]Note that when passing an object to the function, we need to pass it [b]by reference[/b], using the & operator.[/note]"},{"id":3734,"number":2,"videoStart":142.0,"videoEnd":222.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95111,"text":"friend","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing keyword to make the function ''foo'' friend for the class MyClass.\r\n[!raw!]\r\nclass MyClass {\r\npublic:\r\n {0} void foo();\r\n};\r\n","textContent":"[h1]Friend Functions[/h1]\r\n\r\nThe function [b]someFunc()[/b] is defined as a regular function outside the class. It takes an object of type [b]MyClass [/b]as its parameter, and is able to access the private data members of that object.[code format=\"cpp\"]class MyClass {\r\n public:\r\n  MyClass() {\r\n   regVar = 0;\r\n  };\r\n private:\r\n  int regVar;\r\n    \r\n [b]friend [/b]void someFunc(MyClass &obj);\r\n};\r\n\r\nvoid someFunc(MyClass &obj) {\r\n  obj.regVar = 42;\r\n  cout << obj.regVar;\r\n}[/code]\r\nThe [b]someFunc()[/b] function changes the private member of the object and prints its value.\r\n[note]To make its members accessible, the class has to declare the function as a [b]friend [/b]in its definition. You cannot \"make\" a function a friend to a class without the class \"giving away\" its friendship to that function.[/note]"},{"id":3735,"number":3,"videoStart":226.0,"videoEnd":268.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97840,"text":"...cannot modify a private member within a class","isCorrect":false,"properties":{}},{"id":97841,"text":"...can modify all members of a class, including private members","isCorrect":true,"properties":{}},{"id":97842,"text":"...can modify only public members","isCorrect":false,"properties":{}}],"question":"A friend function...","textContent":"[h1]Friend Functions[/h1]\r\n\r\nNow we can create an object in main and call the [b]someFunc()[/b] function:[code format=\"cpp\" codeId=\"264\"]int main() {\r\n  MyClass obj;\r\n  someFunc(obj);\r\n}\r\n\r\n//Outputs 42[/code]\r\n[b]someFunc()[/b] had the ability to modify the private member of the object and print its value.\r\n\r\nTypical use cases of [b]friend [/b]functions are operations that are conducted between two different classes accessing private members of both. \r\n[note]You can declare a function [b]friend [/b]across any number of classes.\r\nSimilar to friend functions, you can define a [b]friend class[/b], which has access to the private members of another class.[/note]"}]}}