{"lesson":{"id":1898,"name":"Composition, Part 2","type":0,"mode":1,"videoID":"jCaxfmcDYjs","tags":"classes","quizzes":[{"id":3730,"number":1,"videoStart":7.0,"videoEnd":118.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95098,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95099,"text":"x","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare ''People's'' constructor, taking two parameters and initializing its private members: name and dateOfBirth.\r\n[!raw!]\r\nPeople::People(string x, Birthday bo)\r\n {0} name({1}), dateOfBirth(bo) \r\n   {  \r\n   }","textContent":"[h1]Composition[/h1]\r\n\r\nNow, our [b]Person [/b]class has a member of type [b]Birthday[/b]:[code format=\"cpp\"]class Person {\r\n public:\r\n  Person(string n, Birthday b)\r\n  : name(n),\r\n    bd(b)\r\n  {\r\n  }\r\n private:\r\n  string name;\r\n  [b]Birthday bd;[/b]\r\n};[/code]\r\n[note]Composition is used for objects that share a [b]has-a[/b] relationship, as in \"A [b]Person [/b]has a [b]Birthday[/b]\".[/note]"},{"id":3731,"number":2,"videoStart":151.0,"videoEnd":224.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95100,"text":"printInfo","isCorrect":true,"properties":{}},{"id":95101,"text":"dateOfBirth","isCorrect":true,"properties":{}},{"id":95102,"text":"printDate","isCorrect":true,"properties":{}},{"id":95103,"text":"const","isCorrect":false,"properties":{}},{"id":95104,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define the printInfo() function, which prints ''People's'' name and birthdate, using dateOfBirth's printDate() function.\r\n[!raw!]\r\nvoid People::{0}() {\r\n cout << name << endl;\r\n {1}.{2}();\r\n}","textContent":"[h1]Composition[/h1]\r\n\r\nLet's add a [b]printInfo() [/b]function to our Person class, that prints the data of the object: [code format=\"cpp\"]class Person {\r\n public:\r\n  Person(string n, Birthday b)\r\n  : name(n),\r\n  bd(b)\r\n  {\r\n  }\r\n  [b]void printInfo()\r\n  {\r\n   cout << name << endl;\r\n   bd.printDate();\r\n  }[/b]\r\n private:\r\n  string name;\r\n  Birthday bd;\r\n};[/code]\r\n[note]Notice that we can call the [b]bd [/b]member's [b]printDate()[/b] function, since it's of type [b]Birthday[/b], which has that function defined.[/note]"},{"id":3732,"number":3,"videoStart":300.0,"videoEnd":381.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97835,"text":"Birthday","isCorrect":true,"properties":{}},{"id":97836,"text":"birthObj","isCorrect":true,"properties":{}},{"id":97837,"text":"string","isCorrect":false,"properties":{}},{"id":97838,"text":"People","isCorrect":false,"properties":{}},{"id":97839,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare an object of type ''People'', which takes a string as the first parameter for its constructor and a ''Birthday'' object as the second. Declare a ''Birthday'' object 'birthObj' before passing it to ''People's'' constructor.\r\n[!raw!]\r\n{0} birthObj(10, 30, 1989);\r\nPeople john(\"John\", {1});","textContent":"[h1]Composition[/h1]\r\n\r\nNow that we've defined our [b]Birthday [/b]and [b]Person [/b]classes, we can go to our main, create a [b]Birthday [/b]object, and then pass it to a [b]Person [/b]object.[code format=\"cpp\" codeId=\"263\"]int main() {\r\n  [b]Birthday [/b]bd(2, 21, 1985);\r\n  [b]Person [/b]p(\"David\", bd);\r\n  p.printInfo();\r\n}\r\n\r\n/*Outputs\r\nDavid\r\n2/21/1985\r\n*/[/code]\r\nWe've created a [b]Birthday [/b]object for the date of 2/21/1985. Next, we created a [b]Person [/b]object and passed the [b]Birthday [/b]object to its constructor. Finally, we used the [b]Person [/b]object's [b]printInfo()[/b] function to print its data.\r\n[note]In general, [b]composition [/b]serves to keep each individual class relatively simple, straightforward, and focused on performing one task. It also enables each sub-object to be self-contained, allowing for reusability (we can use the [b]Birthday [/b]class within various other classes).[/note]"}]}}