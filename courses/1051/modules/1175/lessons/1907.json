{"lesson":{"id":1907,"name":"Inheritance","type":0,"mode":1,"videoID":"gq2Igdc-OSI","tags":"inheritance","quizzes":[{"id":3756,"number":1,"videoStart":7.0,"videoEnd":158.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78989,"text":"Derived class (Mother) and Base class (Daughter)","isCorrect":false,"properties":{}},{"id":78990,"text":"Base class (Mother) and Derived class (Daughter)","isCorrect":true,"properties":{}},{"id":78991,"text":"Both are Base classes","isCorrect":false,"properties":{}}],"question":"What are the technical terms for the ''Mother'' and ''Daughter'' classes?","textContent":"[h1]Inheritance[/h1]\r\n\r\n[b]Inheritance [/b]is one of the most important concepts of object-oriented programming.\r\nInheritance allows us to define a class based on another class. This facilitates greater ease in creating and maintaining an application.  \r\n\r\nThe class whose properties are inherited by another class is called the [b]Base[/b] class. The class which inherits the properties is called the [b]Derived[/b] class. For example, the [b]Daughter [/b]class (derived) can be inherited from the [b]Mother [/b]class (base).\r\nThe derived class inherits all feature from the base class, and can have its own additional features.  [img id=\"2465\" width=\"100%\"]\r\n[note]The idea of inheritance implements the [b]is a[/b] relationship. For example, mammal IS-A animal, dog IS-A mammal, hence dog IS-A animal as well.[/note]"},{"id":3757,"number":2,"videoStart":159.0,"videoEnd":218.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95156,"text":"Mother","isCorrect":true,"properties":{}},{"id":95157,"text":"cout","isCorrect":true,"properties":{}},{"id":95158,"text":"class","isCorrect":false,"properties":{}},{"id":95159,"text":"cin","isCorrect":false,"properties":{}},{"id":95160,"text":"<<","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a function ''sayName()'' for the ''Mother class'', which prints ''I'm a mother'' to the screen.\r\n[!raw!]\r\nvoid {0}::sayName() {\r\n {1} << \"I'm a mother\";\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nTo demonstrate inheritance, let's create a [b]Mother [/b]class and a [b]Daughter [/b]class: [code format=\"cpp\"]class Mother\r\n{\r\n public:\r\n  Mother() {};\r\n  void sayHi() {\r\n    cout << \"Hi\";\r\n  } \r\n};\r\n\r\nclass Daughter \r\n{\r\n public: \r\n  Daughter() {};\r\n};[/code]\r\nThe Mother class has a public method called [b]sayHi()[/b].\r\n[note]The next step is to [b]inherit [/b](derive) the Daughter from the Mother.[/note]"},{"id":3758,"number":3,"videoStart":219.0,"videoEnd":285.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95161,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing keyword to inherit ''Daughter'' from the ''Mother''.\r\n[!raw!]\r\nclass Daughter : {0} Mother\r\n{\r\n};","textContent":"[h1]Inheritance[/h1]\r\n\r\nThis syntax derives the [b]Daughter [/b]class from the [b]Mother [/b]class.[code format=\"cpp\"]class Daughter [b]: public Mother[/b]\r\n{\r\n public: \r\n  Daughter() {};\r\n};[/code]\r\nThe Base class is specified using a [b]colon [/b]and an [b]access specifier[/b]:[b] public [/b]means, that all public members of the base class are public in the derived class. \r\n[note]In other words, all public members of the [b]Mother [/b]class become public members of the [b]Daughter [/b]class.[/note]"},{"id":3759,"number":4,"videoStart":286.0,"videoEnd":401.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97849,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing symbol to inherit the Derived class from the Base class.\r\n[!raw!]\r\nclass Derived {0} public Base\r\n{\r\n};","textContent":"[h1]Inheritance[/h1]\r\n\r\nAs all public members of the Mother class become public members for the Daughter class, we can create an object of type Daughter and call the [b]sayHi()[/b] function of the Mother class for that object: [code format=\"cpp\" codeId=\"267\"]#include <iostream>\r\nusing namespace std;\r\n\r\nclass Mother\r\n{\r\n public:\r\n  Mother() {};\r\n  void sayHi() {\r\n   cout << \"Hi\";\r\n  }\r\n};\r\n\r\nclass Daughter[b]: public Mother[/b]\r\n{\r\n public:\r\n  Daughter() {};\r\n};\r\n\r\nint main() {\r\n  Daughter d;\r\n  [b]d.sayHi();[/b]\r\n}\r\n//Outputs \"Hi\"[/code]\r\nA derived class inherits all base class methods with the following exceptions:\r\n- Constructors, destructors\r\n- Overloaded operators\r\n- The friend functions\r\n[note]A class can be derived from multiple classes by specifying the base classes in a [b]comma-separated[/b] list. For example: [b]class Daughter: public Mother, public Father[/b][/note]"}]}}