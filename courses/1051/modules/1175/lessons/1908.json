{"lesson":{"id":1908,"name":"Protected Members","type":0,"mode":1,"videoID":"DHAAy4GJ684","tags":"inheritance","quizzes":[{"id":3760,"number":1,"videoStart":45.0,"videoEnd":149.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":114280,"text":"...class member function only","isCorrect":false,"properties":{}},{"id":114281,"text":"...everyone","isCorrect":true,"properties":{}},{"id":114282,"text":"...derived class's member functions only","isCorrect":false,"properties":{}}],"question":"A class' public members are available to...","textContent":"[h1]Access Specifiers[/h1]\r\n\r\nUp to this point, we have worked exclusively with [b]public [/b]and [b]private [/b]access specifiers. \r\nPublic members may be accessed from anywhere outside of the class, while access to private members is limited to their class and friend functions.\r\n[note]As we've seen previously, it's a good practice to use public methods to access private class variables.[/note]"},{"id":3762,"number":2,"videoStart":159.0,"videoEnd":232.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95166,"text":"members are available to everyone","isCorrect":false,"properties":{}},{"id":95167,"text":"members are available to derived class members","isCorrect":true,"properties":{}},{"id":95168,"text":"members are private","isCorrect":false,"properties":{}}],"question":"What does protected mean?","textContent":"[h1]Protected[/h1]\r\n\r\nThere is one more access specifier - [b]protected[/b].\r\nA [b]protected [/b]member variable or function is very similar to a private member, with one difference - it can be accessed in the derived classes.[code format=\"cpp\"]class Mother {\r\n public:\r\n  void sayHi() {\r\n   cout << var;\r\n  }\r\n\r\n private:\r\n  int var=0;\r\n\r\n [b]protected:\r\n[/b]  int someVar;\r\n};[/code]\r\n[note]Now [b]someVar [/b]can be accessed by any class that is [b]derived [/b]from the Mother class.[/note]"},{"id":3763,"number":3,"videoStart":232.0,"videoEnd":392.5,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106375,"text":"class","isCorrect":true,"properties":{}},{"id":106376,"text":"protected","isCorrect":true,"properties":{}},{"id":106377,"text":"public","isCorrect":true,"properties":{}},{"id":106378,"text":"Base","isCorrect":false,"properties":{}},{"id":106379,"text":"Derived","isCorrect":false,"properties":{}},{"id":106380,"text":"foo","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a protected member in the Base class and to access it from the Derived class' ''foo'' function.\r\n[!raw!]\r\n{0} Base {\r\n{1}:\r\n int baseVar;\r\n};\r\nclass Derived : {2} Base {\r\npublic:\r\n void foo() { \r\n   baseVar = 12; \r\n   }\r\n};","textContent":"[h1]Type of Inheritance[/h1]\r\n\r\nAccess specifiers are also used to specify the [b]type of inheritance[/b]. \r\nRemember, we used [b]public [/b]to inherit the Daughter class: [code format=\"cpp\" ]class Daughter: [b]public [/b]Mother[/code]\r\n[b]private [/b]and [b]protected [/b]access specifiers can also be used here.\r\n\r\n[b]Public [/b]Inheritance: public members of the base class become public members of the derived class and protected members of the base class become protected members of the derived class. A base class's private members are never accessible directly from a derived class, but can be accessed through calls to the public and protected members of the base class.\r\n\r\n[b]Protected [/b]Inheritance: public and protected members of the base class become protected members of the derived class.\r\n\r\n[b]Private [/b]Inheritance: public and protected members of a private base class become private members of the derived class.\r\n[note]Public inheritance is the most commonly used inheritance type. \r\nIf no access specifier is used when inheriting classes, the type becomes [b]private [/b]by default.[/note]"}]}}