{"lesson":{"id":1913,"name":"Module 8 Quiz","type":1,"mode":0,"videoID":null,"tags":null,"quizzes":[{"id":3782,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":76443,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing keyword to publicly inherit the class ''D'' from the ''Base'' class.\r\n[!raw!]\r\nclass D : {0} Base\r\n{\r\n};","textContent":null},{"id":3783,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":23551,"text":"protected","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which keyword makes class members accessible to only its derived class members?","textContent":null},{"id":3784,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":23552,"text":"The base class destructor is called before the derived class destructor","isCorrect":false,"properties":{}},{"id":23553,"text":"The derived class destructor is called before the base class destructor","isCorrect":true,"properties":{}}],"question":"Select the statement that expresses the general rule for destructors in inheritance.","textContent":null},{"id":3785,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":23554,"text":"*","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":23555,"text":"&","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":23556,"text":"&","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare ''Dog'' and ''Cat'' objects, and two ''Pet'' pointers pointing to the ''Dog'' object and the ''Cat'' objects, respectively.\r\n[!raw!]\r\nDog dogObj; Cat catObj;\r\nPet{0} pet1 = {1}dogObj;\r\nPet* pet2 = {2}catObj;","textContent":null},{"id":3786,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":23557,"text":"virtual","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":23558,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":23559,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a ''Person'' class, with the ''hello()'' virtual function, and then declare a ''Student'' class that inherits from the ''Person'' class and overrides its ''hello()'' virtual function.\r\n[!raw!]\r\nclass Person {\r\npublic:\r\n {0} void hello() { \r\n   cout << \"Person says hello\"; }\r\n};\r\n{1} Student : {2} Person {\r\npublic:\r\n void hello() { \r\n   cout << \"Student says hello\"; }\r\n}","textContent":null},{"id":3787,"number":6,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":23562,"text":"virtual","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":23563,"text":"=","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to make ''foo'' a pure virtual function:\r\n[!raw!]\r\n{0} void foo() {1} 0;\r\n","textContent":null}]}}