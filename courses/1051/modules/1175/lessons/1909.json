{"lesson":{"id":1909,"name":"Derived Class Constructor & Destructor","type":0,"mode":1,"videoID":"Z_vJEKU9WTg","tags":"inheritance","quizzes":[{"id":3765,"number":1,"videoStart":4.0,"videoEnd":121.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97850,"text":"Mother","isCorrect":true,"properties":{}},{"id":97851,"text":"~Mother","isCorrect":true,"properties":{}},{"id":97852,"text":"public","isCorrect":false,"properties":{}},{"id":97853,"text":"protected","isCorrect":false,"properties":{}},{"id":97854,"text":"define","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a constructor and a destructor for the ''Mother'' class.\r\n[!raw!]\r\n{0}::Mother() {\r\n cout << \"constructor\" << endl;\r\n}\r\nMother::{1}() {\r\n cout << \"destructor\" << endl;\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nWhen inheriting classes, the base class' constructor and destructor are not inherited.\r\nHowever, they are being called when an object of the derived class is created or deleted.\r\n\r\nTo further explain this behavior, let's create a sample class that includes a constructor and a destructor:[code format=\"cpp\" ]class Mother {\r\n public:\r\n Mother() \r\n {\r\n  cout <<\"Mother ctor\"<<endl;\r\n }\r\n ~Mother()\r\n {\r\n  cout <<\"Mother dtor\"<<endl;\r\n }\r\n};[/code]\r\nCreating an object in main results in the following output: [code format=\"cpp\" codeId=\"268\"]int main() {\r\n  Mother m;\r\n}\r\n/* Outputs\r\nMother ctor\r\nMother dtor\r\n*/[/code]\r\n[note]The object is created and then deleted, when the program finishes to run.[/note]"},{"id":3766,"number":2,"videoStart":122.0,"videoEnd":247.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95180,"text":"class","isCorrect":true,"properties":{}},{"id":95181,"text":"B","isCorrect":true,"properties":{}},{"id":95182,"text":"public","isCorrect":true,"properties":{}},{"id":95183,"text":"D","isCorrect":true,"properties":{}},{"id":95184,"text":"protected","isCorrect":false,"properties":{}},{"id":95185,"text":"this","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a ''B'' class with its own constructor and a ''D'' class with its own constructor, where ''D'' inherits ''B''.\r\n[!raw!]\r\n{0} B {\r\npublic:\r\n {1}() { \r\n   cout << \"B's constructor\"; }\r\n};\r\nclass D : {2} B {\r\n {3}() { \r\n    cout << \"D's constructor\"; }\r\n};","textContent":"[h1]Inheritance[/h1]\r\n\r\nNext, let's create a [b]Daughter [/b]class, with its own constructor and destructor, and make it a derived class of the [b]Mother[/b]:[code format=\"cpp\"]class Daughter: public Mother {\r\npublic:\r\n Daughter()\r\n {\r\n  cout <<\"Daughter ctor\"<<endl;\r\n }\r\n ~Daughter()\r\n {\r\n  cout <<\"Daughter dtor\"<<endl;\r\n }\r\n};[/code]"},{"id":3767,"number":3,"videoStart":248.0,"videoEnd":443.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97858,"text":"...the ''D's'' constructor is called before the ''B's'' constructor","isCorrect":false,"properties":{}},{"id":97859,"text":"...the ''B's'' constructor is called before the ''D's'' constructor ","isCorrect":true,"properties":{}},{"id":97860,"text":"...only ''D's'' constructor is called","isCorrect":false,"properties":{}}],"question":"If class ''D'' inherits class ''B'', when an object of class ''D'' is created...","textContent":"[h1]Inheritance[/h1]\r\n\r\nNow, what happens when we create a [b]Daughter [/b]object?[code format=\"cpp\" codeId=\"269\"]int main() {\r\n  Daughter m;\r\n}\r\n\r\n/*Outputs\r\nMother ctor\r\nDaughter ctor\r\nDaughter dtor\r\nMother dtor\r\n*/[/code]\r\nNote that the base class' constructor is called first, and the derived class' constructor is called next.\r\nWhen the object is destroyed, the derived class's destructor is called, and then the base class' destructor is called. \r\n[note]You can think of it as the following: The derived class needs its base class in order to work - that is why the base class is set up first.[/note]"},{"id":3768,"number":4,"videoStart":444.0,"videoEnd":515.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78390,"text":"...the ''D'' class destructor is called before its base's destructor","isCorrect":true,"properties":{}},{"id":78391,"text":"...the base class destructor is called before the ''D's'' destructor","isCorrect":false,"properties":{}}],"question":"If class ''D'' is derived from class ''B'', when an object of ''D'' is destroyed...","textContent":"[h1]Summary[/h1]\r\n\r\n[b]Constructors[/b]\r\nThe base class constructor is called first.\r\n\r\n[b]Destructors[/b] \r\nThe derived class destructor is called first, and then the base class destructor gets called. \r\n[note]This sequence makes it possible to specify initialization and de-initialization scenarios for your derived classes.[/note]"}]}}