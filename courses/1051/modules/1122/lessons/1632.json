{"lesson":{"id":1632,"name":"Dynamic Memory","type":0,"mode":1,"videoID":"CSVRA4_xOkw","tags":"pointers","quizzes":[{"id":2869,"number":1,"videoStart":101.5,"videoEnd":171.5,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94906,"text":"new int","isCorrect":false,"properties":{"prefix":"","postfix":";"}}],"question":"Type in the code that allocates memory for an int variable (use the 'new' keyword):","textContent":"[h1]Static & Dynamic Memory[/h1]\r\n\r\nTo be successful as a C++ programmer, it's essential to have a good understanding of how [b]dynamic memory[/b] works.\r\nIn a C++ program, memory is divided into two parts:\r\n[b]The stack[/b]: All of your local variables take up memory from the stack.\r\n[b]The heap[/b]: Unused program memory that can be used when the program runs to [b]dynamically [/b]allocate the memory.\r\n\r\nMany times, you are not aware in advance how much memory you will need to store particular information in a defined variable and the size of required memory can be determined at run time.\r\nYou can allocate memory at run time within the heap for the variable of a given type using the [b]new [/b]operator, which returns the address of the space allocated. [code format=\"cpp\"][b]new [/b]int;[/code]\r\n[note]This allocates the memory size necessary for storing an [b]integer [/b]on the [b]heap[/b], and returns that address.[/note]"},{"id":2870,"number":2,"videoStart":171.0,"videoEnd":303.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94907,"text":"*","isCorrect":false,"properties":{"prefix":"int ","postfix":""}}],"question":"Type in a code that declares a pointer to int named ptr to hold the address returned by the new int; expression.\r\n[!raw!]\r\n{0} ptr = new int;","textContent":"[h1]Dynamic Memory[/h1]\r\n\r\nThe allocated address can be stored in a [b]pointer[/b], which can then be dereferenced to access the variable.\r\nExample: [code format=\"cpp\"]int *p = [b]new [/b]int;\r\n*p = 5;[/code]\r\nWe have dynamically allocated memory for an integer, and assigned it a value of 5.\r\n[note]The pointer [b]p[/b] is stored in the [b]stack [/b]as a local variable, and holds the [b]heap[/b]'s allocated address as its value. The value of 5 is stored at that address in the heap.[/note]"},{"id":2872,"number":3,"videoStart":304.0,"videoEnd":449.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97728,"text":"delete","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What keyword is used to free the allocated memory in C++?","textContent":"[h1]Dynamic Memory[/h1]\r\n\r\nFor local variables on the [b]stack[/b], managing memory is carried out automatically.\r\nOn the [b]heap[/b], it's necessary to manually handle the dynamically allocated memory, and use the [b]delete [/b]operator to free up the memory when it's no longer needed. [code format=\"cpp\" ][b]delete [/b]pointer;[/code]\r\nThis statement releases the memory pointed to by [b]pointer[/b].\r\n\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"225\"]int *p = [b]new [/b]int; // request memory\r\n*p = 5; // store value\r\n\r\ncout << *p << endl; // use value\r\n\r\n[b]delete [/b]p; // free up the memory[/code]\r\n[note]Forgetting to free up memory that has been allocated with the [b]new [/b]keyword will result in memory leaks, because that memory will stay allocated until the program shuts down.[/note]"},{"id":2873,"number":4,"videoStart":450.0,"videoEnd":505.5,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97729,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97730,"text":"delete","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to allocate a memory for an int on the heap, point to it with 'ptr', and then free the allocated memory.\r\n[!raw!]\r\nint * ptr = {0} int;\r\n{1} ptr;","textContent":"[h1]Dangling Pointers[/h1]\r\n\r\nThe [b]delete [/b]operator frees up the memory allocated for the variable, but does not delete the pointer itself, as the pointer is stored on the stack.\r\n\r\nPointers that are left pointing to non-existent memory locations are called [b]dangling pointers[/b].\r\nFor example: [code format=\"cpp\" codeId=\"226\"]int *p = [b]new [/b]int; // request memory\r\n*p = 5; // store value\r\n\r\n[b]delete [/b]p; // free up the memory\r\n// now p is a dangling pointer\r\n\r\np = [b]new [/b]int; // reuse for a new address[/code]\r\n[note]The [b]NULL [/b]pointer is a constant with a value of zero that is defined in several of the standard libraries, including iostream.\r\nIt's a good practice to assign NULL to a pointer variable when you declare it, in case you do not have exact address to be assigned. A pointer assigned NULL is called a [b]null pointer[/b]. For example: int *ptr = NULL;[/note]"},{"id":2874,"number":5,"videoStart":729.0,"videoEnd":831.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97731,"text":"new allocates space dynamically on the heap","isCorrect":true,"properties":{}},{"id":97732,"text":"new returns a floating-point number","isCorrect":false,"properties":{}},{"id":97733,"text":"delete de-allocates memory on the heap","isCorrect":true,"properties":{}},{"id":97734,"text":"delete uninstalls the program from your computer","isCorrect":false,"properties":{}}],"question":"Which of the following is a correct statement?","textContent":"[h1]Dynamic Memory[/h1]\r\n\r\nDynamic memory can also be allocated for arrays.\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"227\"]int *p = NULL; // Pointer initialized with null\r\np = [b]new [/b]int[20]; // Request memory\r\n[b]delete [][/b] p; // Delete array pointed to by p[/code]\r\nNote the [b]brackets [/b]in the syntax.\r\n[note]Dynamic memory allocation is useful in many situations, such as when your program depends on input. As an example, when your program needs to read an image file, it doesn't know in advance the size of the image file and the memory necessary to store the image.[/note]"}]}}