{"lesson":{"id":1631,"name":"More on Pointers","type":0,"mode":1,"videoID":"W0aE-w61Cb8","tags":"pointers","quizzes":[{"id":2866,"number":1,"videoStart":220.0,"videoEnd":405.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105468,"text":"&","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":105469,"text":"p","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing parts to declare the x variable with a value of 25 and a p pointer containing the x's address. Print the memory location stored in the pointer to the screen.\r\n[!raw!]\r\nint x = 25;\r\nint * p = {0}x;\r\ncout << {1} << endl;","textContent":"[h1]Pointer Operations[/h1]\r\n\r\nThere are two operators for pointers:\r\n[b]Address-of [/b]operator (&): returns the memory address of its operand. \r\n[b]Contents-of[/b] (or [b]dereference[/b]) operator (*):  returns the value of the variable located at the address specified by its operand.\r\n\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"224\"]int var = 50;\r\nint  *p;\r\np = &var;\r\n\r\ncout << var << endl;\r\n// Outputs 50 (the value of var)\r\n\r\ncout << p << endl;\r\n// Outputs 0x29fee8 (var's memory location)\r\n\r\ncout << [b]*p[/b] << endl;\r\n/* Outputs 50 (the value of the variable\r\n stored in the pointer p) */[/code]\r\n[note]The asterisk (*) is used in declaring a pointer for the simple purpose of indicating that it is a pointer (The asterisk is part of its type compound specifier). Don't confuse this with the [b]dereference [/b]operator, which is used to obtain the value located at the specified address. They are simply two different things represented with the same sign.[/note]"},{"id":2868,"number":2,"videoStart":405.5,"videoEnd":545.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":94904,"text":"&","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":94905,"text":"*","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to declare two variables, a and b; and two pointers, pa and pb, pointing to a and b, respectively. The value of a is changed via pointer pa, adding to it the value of b accessed via pointer pb.\r\n[!raw!]\r\nint a = 12; int b = 13;\r\nint * pa = &a;\r\nint * pb = {0}b;\r\n*pa += {1}pb; // same as a += b;","textContent":"[h1]Dereferencing[/h1]\r\n\r\nThe [b]dereference [/b]operator (*) is basically an [b]alias [/b]for the variable the pointer points to.\r\n[b]For example: [/b][code format=\"cpp\"]int x = 5;\r\nint *p = &x;\r\n\r\nx = x + 4;\r\nx = *p + 4;\r\n*p = *p + 4;[/code] \r\nAll three of the preceding statements are equivalent, and return the same result. We can access the variable by dereferencing the variable's pointer.\r\n[note]As [b]p[/b] is pointing to the variable [b]x[/b], dereferencing the pointer ([b]*p[/b]) is representing exactly the same as the variable [b]x[/b].[/note]"}]}}