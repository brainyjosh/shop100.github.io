{"lesson":{"id":1713,"name":"Encapsulation","type":0,"mode":1,"videoID":null,"tags":"encapsulation","quizzes":[{"id":3152,"number":1,"videoStart":0.0,"videoEnd":50.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":78123,"text":"Hide details of a class realization","isCorrect":true,"properties":{}},{"id":78124,"text":"Declare a function","isCorrect":false,"properties":{}},{"id":78125,"text":"Assign values to variables","isCorrect":false,"properties":{}}],"question":"Encapsulation allows you to:","textContent":"[h1]Encapsulation[/h1]\r\n\r\n[b][/b]Part of the meaning of the word [b]encapsulation [/b]is the idea of \"surrounding\" an entity, not just to keep what's inside together, but also to [b]protect [/b]it.\r\nIn object orientation, encapsulation means more than simply combining attributes and behavior together within a class; it also means restricting access to the inner workings of that class.\r\n\r\nThe key principle here is that an object only reveals what the other application components require to effectively run the application. All else is kept out of view. \r\n[note]This is called [b]data hiding[/b].[/note]"},{"id":3153,"number":2,"videoStart":51.0,"videoEnd":212.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105476,"text":"To encapsulate an object's attributes and methods","isCorrect":true,"properties":{}},{"id":105477,"text":"To provide functions to class users","isCorrect":false,"properties":{}},{"id":105478,"text":"To hide everything about the object, only exposing what is necessary","isCorrect":true,"properties":{}},{"id":105479,"text":"To create instances of a class","isCorrect":false,"properties":{}}],"question":"The idea of encapsulation is (select two):","textContent":"[h1]Encapsulation [/h1]\r\n\r\nFor example, if we take our [b]BankAccount [/b]class, we do not want some other part of our program to reach in and change the [b]balance [/b]of any object, without going through the [b]deposit()[/b] or [b]withdraw()[/b] behaviors.\r\nWe should [b]hide [/b]that attribute, control access to it, so it is accessible only by the object itself.\r\nThis way, the [b]balance [/b]cannot be directly changed from outside of the object and is accessible only using its methods.\r\nThis is also known as \"[b]black boxing[/b]\", which refers to closing the inner working zones of the object, except of the pieces that we want to make public.\r\nThis allows us to change attributes and implementation of methods without altering the overall program. For example, we can come back later and change the data type of the [b]balance [/b]attribute.\r\n[note]In summary the benefits of encapsulation are:\r\n- [b]Control [/b]the way data is accessed or modified.\r\n- Code is more [b]flexible [/b]and easy to change with new requirements.\r\n- [b]Change [/b]one part of code without affecting other part of code.[/note]"}]}}