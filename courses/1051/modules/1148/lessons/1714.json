{"lesson":{"id":1714,"name":"Example of Encapsulation","type":0,"mode":1,"videoID":"jTS7JTud1qQ","tags":"encapsulation","quizzes":[{"id":3154,"number":1,"videoStart":21.0,"videoEnd":127.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97798,"text":"string","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97799,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97800,"text":"obj","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in a code to declare a class MyClass, with one data-member named myData of type string, then assign to it a value \"I love C++\" from main. Don't forget to include a header file for string data type.\r\n[!raw!]\r\n#include <iostream>\r\n#include <{0}>\r\n{1} MyClass\r\n{\r\n public: \r\n  string myData;\r\n};\r\nint main()\r\n{\r\nMyClass obj;\r\n{2}.myData = \"I love C++\";\r\n}","textContent":"[h1]Access Specifiers [/h1]\r\n\r\nAccess specifiers are used to set access levels to particular members of the class.\r\nThe three levels of access specifiers are [b]public[/b], [b]protected[/b], and [b]private[/b].\r\n\r\nA [b]public [/b]member is accessible from outside the class, and anywhere within the scope of the class object.\r\n\r\n[b]For example:[/b] [code format=\"cpp\" codeId=\"253\"]#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nclass myClass {\r\n  [b]public:[/b]\r\n    string name;\r\n};\r\n\r\nint main() {\r\n  myClass myObj;\r\n [b] myObj.name = \"SoloLearn\";[/b]\r\n  cout << myObj.name;\r\n  return 0;\r\n}\r\n\r\n//Outputs \"SoloLearn\"[/code]\r\nThe [b]name [/b]attribute is [b]public[/b]; it can be accessed and modified from outside the code.\r\n[note]Access modifiers only need to be declared once; multiple members can follow a single access modifier.\r\nNotice the [b]colon [/b](:) that follows the [b]public [/b]keyword.[/note]"},{"id":3155,"number":2,"videoStart":139.5,"videoEnd":295.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97801,"text":"private","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97802,"text":"public","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97803,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a class MyClass, with one private data-member named myData of type int. Declare a public function setMyData(), which sets the myData value to the one specified by its argument.\r\n[!raw!]\r\nclass MyClass\r\n{\r\n{0}:\r\n int myData;\r\n{1}:\r\n void setMyData({2} arg) {  \r\n    myData = arg;\r\n  }\r\n};","textContent":"[h1]Private[/h1]\r\n\r\nA [b]private [/b]member cannot be accessed, or even viewed, from outside the class; it can be accessed only from within the class.\r\nA [b]public [/b]member function may be used to access the [b]private [/b]members. For example: [code format=\"cpp\" codeId=\"254\"]#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nclass myClass {\r\n [b] public:[/b]\r\n    void setName(string x) {\r\n      name = x;\r\n    }\r\n  [b]private:[/b]\r\n    string name;\r\n};\r\n\r\nint main() {\r\n  myClass myObj;\r\n  [b]myObj.setName(\"John\");[/b]\r\n\r\n  return 0;\r\n}[/code]\r\nThe [b]name [/b]attribute is [b]private [/b]and not accessible from the outside. \r\nThe public [b]setName()[/b] method is used to set the [b]name [/b]attribute.\r\n[note]If no access specifier is defined, all members of a class are set to [b]private [/b]by default.[/note]"},{"id":3156,"number":3,"videoStart":296.0,"videoEnd":389.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95006,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95007,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a get method for class MyClass's data-member myData. A get method for myData is a public function named getMyData() which returns the value of myData.\r\n[!raw!]\r\nclass MyClass\r\n{\r\nprivate:\r\n int myData;\r\npublic:\r\n {0} getMyData() {\r\n  {1} myData;\r\n }\r\n};","textContent":"[h1]Access Specifiers[/h1]\r\n\r\nWe can add another public method in order to get the value of the attribute.[code format=\"cpp\"]class myClass {\r\n  public:\r\n    void setName(string x) {\r\n      name = x;\r\n    }\r\n    [b]string getName() {\r\n      return name;\r\n    }[/b]\r\n  private:\r\n    string name;\r\n};[/code]\r\n[note]The [b]getName()[/b] method returns the value of the private [b]name [/b]attribute.[/note]"},{"id":3157,"number":4,"videoStart":390.0,"videoEnd":483.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97804,"text":"14","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":97805,"text":"obj","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Type in the missing parts to declare a MyClass object, and set its data member's value to 14, then print its value to the screen. Do all mentioned operations via the public functions setMyData and getMyData.\r\n[!raw!]\r\nint main()\r\n{\r\n MyClass obj;\r\n obj.setMyData({0});\r\n cout << {1}.getMyData() << endl;\r\n}","textContent":"[h1]Access Specifiers[/h1]\r\n\r\nPutting it all together: [code format=\"cpp\" codeId=\"255\"]#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nclass myClass {\r\n  public:\r\n    [b]void [/b]setName(string x) {\r\n      name = x;\r\n    }\r\n    string getName() {\r\n      return name;\r\n    }\r\n  [b]private[/b]:\r\n    string name;\r\n};\r\n\r\nint main() {\r\n  myClass myObj;\r\n  myObj.setName(\"John\");\r\n  cout << myObj.getName();\r\n\r\n  return 0;\r\n}\r\n\r\n//Outputs \"John\"[/code]\r\nWe used encapsulation to hide the [b]name [/b]attribute from the outside code. Then we provided access to it using public methods. Our class data can be read and modified only through those methods.\r\n[note]This allows for changes to the implementation of the methods and attributes, without affecting the outside code.[/note]"}]}}