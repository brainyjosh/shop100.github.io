{"lesson":{"id":1916,"name":"Class Templates","type":0,"mode":1,"videoID":"U2QvTsMvWmM","tags":"templates","quizzes":[{"id":3798,"number":1,"videoStart":3.0,"videoEnd":63.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95248,"text":"template","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95249,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95250,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a template class ''MyClass''.\r\n[!raw!]\r\n{0} <{1} T>\r\n{2} MyClass\r\n { \r\n };","textContent":"[h1]Class Templates[/h1]\r\n\r\nJust as we can define function templates, we can also define [b]class templates[/b], allowing classes to have members that use template parameters as types.\r\nThe same syntax is used to define the class template: [code format=\"cpp\"][b]template <class T>[/b]\r\nclass MyClass {\r\n\r\n};[/code]\r\n[note]Just as with function templates, you can define more than one generic data type by using a comma-separated list.[/note]"},{"id":3799,"number":2,"videoStart":68.0,"videoEnd":126.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95251,"text":"template","isCorrect":true,"properties":{}},{"id":95252,"text":"MyClass","isCorrect":true,"properties":{}},{"id":95253,"text":"T","isCorrect":true,"properties":{}},{"id":95254,"text":"memTwo","isCorrect":true,"properties":{}},{"id":95255,"text":"public","isCorrect":false,"properties":{}},{"id":95256,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a template class ''MyClass'' with two template data members: memOne and memTwo. Initialize them in the constructor.\r\n[!raw!]\r\n{0} <class T>\r\nclass {1}\r\n{\r\n{2} memOne;\r\nT {3};\r\npublic:\r\n MyClass(T a, T b) {\r\n  memOne = a;\r\n  memTwo = b;\r\n }\r\n};","textContent":"[h1]Class Templates[/h1]\r\n\r\nAs an example, let's create a class [b]Pair[/b], that will be holding a pair of values of a generic type. [code format=\"cpp\"]template <class [b]T[/b]>\r\nclass Pair {\r\n private:\r\n  [b]T[/b] first, second;\r\n public:\r\n  Pair ([b]T[/b] a, [b]T[/b] b):\r\n   first(a), second(b) {\r\n  }\r\n};[/code]\r\n[note]The code above declares a class template [b]Pair[/b], with two private variables of a generic type, and one constructor to initialize the variables.[/note]"},{"id":3800,"number":3,"videoStart":158.0,"videoEnd":261.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95257,"text":"template","isCorrect":true,"properties":{}},{"id":95258,"text":"<T>","isCorrect":true,"properties":{}},{"id":95259,"text":"cout","isCorrect":true,"properties":{}},{"id":95260,"text":"class","isCorrect":false,"properties":{}},{"id":95261,"text":"this","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a ''MyClass'' member function ''hello()'', where ''MyClass'' is a template class, and ''hello()'' prints ''Hi'' to the screen.\r\n[!raw!]\r\n{0} <class T>\r\nvoid MyClass{1}::hello()\r\n{\r\n  {2} << \"Hi\" << endl;\r\n}","textContent":"[h1]Class Templates[/h1]\r\n\r\nA specific syntax is required in case you define your member functions outside of your class - for example in a separate source file.\r\nYou need to specify the [b]generic type[/b] in angle brackets after the class name. \r\nFor example, to have a member function [b]bigger() [/b]defined outside of the class, the following syntax is used: [code format=\"cpp\"]template <class T>\r\nclass Pair {\r\n private:\r\n  T first, second;\r\n public:\r\n  Pair (T a, T b):\r\n   first(a), second(b){\r\n  }\r\n  [b]T bigger();[/b]\r\n};\r\n\r\n[b]template <class T>\r\nT Pair<T>::bigger() {\r\n [/b] // some code\r\n[b]}[/b][/code]"},{"id":3801,"number":4,"videoStart":293.0,"videoEnd":358.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95262,"text":"template","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95263,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":95264,"text":"?","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define the ''bigger'' function:\r\n[!raw!]\r\n{0} <{1} T>\r\nT MyClass<T>::bigger()\r\n{\r\n return (first > second {2} first : second);\r\n}","textContent":"[h1]Class Templates[/h1]\r\n\r\nThe [b]bigger [/b]function returns the greater value of the two member variables.[code format=\"cpp\"]template <class T>\r\nclass Pair {\r\n private:\r\n  T first, second;\r\n public:\r\n  Pair (T a, T b):\r\n   first(a), second(b){\r\n  }\r\n  T bigger();\r\n};\r\n\r\ntemplate <class T>\r\nT Pair<T>::bigger() {\r\n  return (first>second ? first : second);\r\n}[/code]\r\n[note]The ternary operator compares the two variables, returning the greater one.[/note]"},{"id":3802,"number":5,"videoStart":358.0,"videoEnd":522.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97893,"text":"int","isCorrect":false,"properties":{"prefix":"<","postfix":">"}}],"question":"Fill in the blank to declare the ''MyClass'' object with ''integer'' as its template parameter.\r\n[!raw!]\r\nMyClass{0} obj;","textContent":"[h1]Class Templates[/h1]\r\n\r\nTo create objects of the template class for different types, specify the data type in angle brackets, as we did when defining the function outside of the class.\r\nHere, we create a Pair object for integers.[code format=\"cpp\" codeId=\"279\"]Pair [b]<int>[/b] obj(11, 22);\r\ncout << obj.bigger();\r\n// Outputs 22[/code]\r\nWe can use the same class to create an object that stores any other type.[code format=\"cpp\" codeId=\"280\"]Pair <[b]double[/b]> obj(23.43, 5.68);\r\ncout << obj.bigger();\r\n// Outputs 23.43[/code]"}]}}