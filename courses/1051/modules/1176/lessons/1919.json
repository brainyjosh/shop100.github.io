{"lesson":{"id":1919,"name":"More on Exceptions","type":0,"mode":1,"videoID":"5369xtKS42s","tags":"exceptions","quizzes":[{"id":3810,"number":1,"videoStart":22.0,"videoEnd":99.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104731,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104732,"text":"cin","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare an integer variable ''myVar'', and enter a number value into it.\r\n[!raw!]\r\n{0} myVar;\r\n{1} >> myVar;","textContent":"[h1]Exception Handling[/h1]\r\n\r\nException handling is particularly useful when dealing with user input.\r\nFor example, for a program that requests user input of two numbers, and then outputs their division, be sure that you handle division by zero, in case your user enters 0 as the second number.[code format=\"cpp\" codeId=\"941\"]int main() {\r\n  int num1;\r\n  cout <<\"Enter the first number:\";\r\n  cin >> num1;\r\n\r\n  int num2;\r\n  cout <<\"Enter the second number:\";\r\n  cin >> num2;\r\n\r\n  cout <<\"Result:\"<<num1 / num2;\r\n}[/code]\r\nThis program works perfectly if the user enters any number besides 0.\r\n[note]In case of 0 the program crashes, so we need to handle that input.[/note]"},{"id":3811,"number":2,"videoStart":152.0,"videoEnd":238.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104733,"text":"int a; int b;","isCorrect":false,"properties":{}},{"id":104734,"text":"cin >> a >> b;","isCorrect":false,"properties":{}},{"id":104735,"text":"if (b == 0)","isCorrect":false,"properties":{}},{"id":104736,"text":"throw 0;","isCorrect":false,"properties":{}},{"id":104737,"text":"cout << a / b << endl;","isCorrect":false,"properties":{}}],"question":"Rearrange the code to declare two integer variables: a and b, print to the screen the division equation a/b. If b is equal to 0, throw an exception with a 0 value.","textContent":"[h1]Exception Handling[/h1]\r\n\r\nIn the event that the second number is equal to 0, we need to [b]throw [/b]an exception.[code format=\"cpp\" codeId=\"942\"]int main() {\r\n  int num1;\r\n  cout <<\"Enter the first number:\";\r\n  cin >> num1;\r\n\r\n  int num2;\r\n  cout <<\"Enter the second number:\";\r\n  cin >> num2;\r\n\r\n [b] if(num2 == 0) {\r\n   throw 0;\r\n  } [/b]\r\n\r\n  cout <<\"Result:\"<<num1 / num2;  \r\n}[/code]\r\nThis code throws an exception with the code 0 of type integer.\r\n[note]Next stop: Using the [b]try/catch[/b] block to handle the exception![/note]"},{"id":3812,"number":3,"videoStart":239.0,"videoEnd":410.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104738,"text":"...","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing part to catch every kind of exception in the catch block.\r\n[!raw!]\r\ntry {\r\n // ...some code\r\n} catch ({0}) {\r\n}","textContent":"[h1]Exception Handling[/h1]\r\n\r\nNow we need to handle the thrown exception using a [b]try/catch[/b] block.[code format=\"cpp\" codeId=\"943\"]int main() {\r\n [b]try [/b]{\r\n  int num1;\r\n  cout <<\"Enter the first number:\";\r\n  cin >> num1;\r\n\r\n  int num2;\r\n  cout <<\"Enter the second number:\";\r\n  cin >> num2;\r\n\r\n  if(num2 == 0) {\r\n   [b]throw [/b]0;\r\n  } \r\n\r\n  cout <<\"Result:\"<<num1 / num2; \r\n }\r\n [b]catch[/b](int x) {\r\n  cout <<\"Division by zero!\";\r\n }\r\n}[/code]\r\nThis results in the output of \"Division by zero!\" as an alternative to a program crash, when 0 is entered as the second number.\r\n\r\nIn our case, we catch exceptions of type [b]integer [/b]only. It's possible to specify that your catch block handles any type of exception thrown in a try block. To accomplish this, add an [b]ellipsis (...) [/b]between the parentheses of catch: [code format=\"cpp\" ]try {\r\n  // code\r\n} [b]catch(...) [/b]{\r\n  // code to handle exceptions\r\n}[/code]"}]}}