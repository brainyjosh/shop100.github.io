{"lesson":{"id":1921,"name":"More on Files","type":0,"mode":1,"videoID":"qdkabVYgV24","tags":"files","quizzes":[{"id":3819,"number":1,"videoStart":18.0,"videoEnd":172.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95301,"text":"int main() {","isCorrect":false,"properties":{}},{"id":95302,"text":"ofstream fileObj(\"myfile.txt\");","isCorrect":false,"properties":{}},{"id":95303,"text":"fileObj << \"I can work with files\";","isCorrect":false,"properties":{}},{"id":95304,"text":"fileObj.close();  }","isCorrect":false,"properties":{}}],"question":"Rearrange the code to declare a file object with ''myfile.txt'' associated with it. Insert ''I can work with files'' to the file, then close the file.","textContent":"[h1]Working with Files[/h1]\r\n\r\nYou can also provide the path to your file using the [b]ofstream [/b]objects constructor, instead of calling the [b]open[/b] function.[code format=\"cpp\"]#include <fstream>\r\nusing namespace std;\r\n\r\nint main() {\r\n  [b]ofstream MyFile(\"test.txt\");[/b]\r\n\r\n  MyFile << \"This is awesome! \\n\";\r\n  MyFile.close();\r\n}[/code]\r\n[note]As with the [b]open [/b]function, you can provide a full path to your file located in a different directory.[/note]"},{"id":3820,"number":2,"videoStart":180.0,"videoEnd":256.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95305,"text":"is_open","isCorrect":false,"properties":{"prefix":"","postfix":"()"}}],"question":"Type in the function name which checks whether the file is open or not.","textContent":"[h1]Working with Files[/h1]\r\n\r\nUnder certain circumstances, such as when you don't have file permissions, the [b]open [/b]function can fail. \r\nThe [b]is_open()[/b] member function checks whether the file is open and ready to be accessed.[code format=\"cpp\"]#include <iostream>\r\n#include <fstream>\r\nusing namespace std;\r\n\r\nint main() {\r\n  ofstream MyFile(\"test.txt\");\r\n\r\n [b] if (MyFile.is_open())[/b] {\r\n   MyFile << \"This is awesome! \\n\";\r\n  }\r\n  else {\r\n   cout << \"Something went wrong\";\r\n  }\r\n  MyFile.close();\r\n}[/code]"},{"id":3821,"number":3,"videoStart":256.0,"videoEnd":352.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104744,"text":"ofstream fileObj(\"myfile.txt\");","isCorrect":false,"properties":{}},{"id":104745,"text":"if (fileObj.is_open()) {","isCorrect":false,"properties":{}},{"id":104746,"text":"fileObj << \"I can work with files\";","isCorrect":false,"properties":{}},{"id":104747,"text":"} else {","isCorrect":false,"properties":{}},{"id":104748,"text":"cout << \"Something went wrong\" << endl; } ","isCorrect":false,"properties":{}}],"question":"Rearrange the code to declare a file object and an associated file ''myfile.txt''. Write ''I can work with files'' to the file if the file is open. Otherwise, print ''Something went wrong'' to the screen.","textContent":"[h1]File Opening Modes[/h1]\r\n\r\nAn optional second parameter of the [b]open [/b]function defines the [b]mode [/b]in which the file is opened. This list shows the supported modes. [img id=\"2457\" width=\"100%\"]\r\nAll these flags can be combined using the bitwise operator OR (|).\r\nFor example, to open a file in write mode and truncate it, in case it already exists, use the following syntax:[code format=\"cpp\" ]ofstream outfile;\r\noutfile.open(\"file.dat\", ios::out | ios::trunc );[/code]\r\n[h2]Reading from a File[/h2]\r\nYou can read information from a file using an [b]ifstream [/b]or [b]fstream[/b] object. [code format=\"cpp\" codeId=\"944\"]#include <iostream>\r\n#include <fstream>\r\nusing namespace std;\r\n\r\nint main () {\r\n  string line;\r\n  [b]ifstream [/b]MyFile(\"test.txt\");\r\n  while ( getline (MyFile, line) ) {\r\n   cout << line << '\\n';\r\n  }\r\n  MyFile.close();\r\n}[/code]The [b]getline [/b]function reads characters from an input stream and places them into a string.\r\n[note]The example above reads a text file and prints the contents to the screen. \r\nOur [b]while [/b]loop uses the [b]getline [/b]function to read the file line by line.[/note]"}]}}