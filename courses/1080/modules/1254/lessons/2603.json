{"lesson":{"id":2603,"name":"Introduction to Methods","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5422,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103151,"text":"Main","isCorrect":true,"properties":{}},{"id":103152,"text":"Start","isCorrect":false,"properties":{}},{"id":103153,"text":"Console","isCorrect":false,"properties":{}},{"id":103154,"text":"using","isCorrect":false,"properties":{}}],"question":"Every C# program starts with the method:","textContent":"[h1]What is a Method?[/h1]\r\n\r\nA [b]method [/b] is a group of statements that perform a particular task.\r\nIn addition to the C# built-in methods, you may also define your own. \r\n\r\nMethods have many advantages, including:\r\n- Reusable code.\r\n- Easy to test.\r\n- Modifications to a method do not affect the calling program.\r\n- One method can accept many different inputs.\r\n[note]Every valid C# program has at least one method, the [b]Main [/b]method.[/note]"},{"id":5423,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103156,"text":"void","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"If you do not want your method to return a value, you should use the return type:","textContent":"[h1]Declaring Methods[/h1]\r\n\r\nTo use a method, you need to [b]declare [/b]the method and then [b]call[/b] it.\r\nEach method declaration includes:\r\n- the return type\r\n- the method name\r\n- an optional list of parameters. [code format=\"cs\" ]<return type> name(type1 par1, type2 par2, â€¦ , typeN parN)\r\n{\r\n    List of statements\r\n}[/code]\r\nFor example, the following method has an int parameter and returns the number squared: [code format=\"cs\" ][b]int [/b]Sqr(int x)\r\n{\r\n  int result = x*x;\r\n  [b]return [/b]result;\r\n}[/code]\r\nThe [b]return [/b]type of a method is declared before its name. In the example above, the return type is [b]int[/b], which indicates that the method returns an integer value. When a method returns a value, it must include a [b]return [/b]statement. Methods that return a value are often used in assignment statements.\r\nOccasionally, a method performs the desired operations without returning a value. Such methods have a return type [b]void[/b]. In this case, the method cannot be called as part of an assignment statement.\r\n[note][b]void [/b]is a basic data type that defines a valueless state.[/note]"},{"id":5424,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103217,"text":"void","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103218,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a method that does not return a value and displays \"Welcome\" to the screen:\r\n[!raw!]\r\nstatic {0} Greet()\r\n{\r\n  Console.WriteLine(\"Welcome\");\r\n{1}","textContent":"[h1]Calling Methods[/h1]\r\n\r\nParameters are optional; that is, you can have a method with no parameters.\r\nAs an example, let's define a method that does not return a value, and just prints a line of text to the screen. [code format=\"cs\" ]static void SayHi()\r\n{\r\n  Console.WriteLine(\"Hello\");\r\n}[/code]\r\nOur method, entitled [b]SayHi[/b], returns [b]void[/b], and has no parameters. \r\nTo execute a method, you simply call the method by using the name and any required arguments in a statement. [code format=\"cs\" codeId=\"853\"]static void SayHi()\r\n{\r\n  Console.WriteLine(\"Hello\");\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n  [b]SayHi();[/b]\r\n}\r\n//Outputs \"Hello\"[/code]\r\n[note]The [b]static [/b]keyword will be discussed later; it is used to make methods accessible in Main.[/note]"},{"id":5425,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103219,"text":"static","isCorrect":true,"properties":{}},{"id":103220,"text":"void","isCorrect":true,"properties":{}},{"id":103221,"text":"Func","isCorrect":true,"properties":{}},{"id":103222,"text":"return","isCorrect":false,"properties":{}},{"id":103223,"text":"using","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to declare a valid method and call it in Main:\r\n[!raw!]\r\n{0} {1} Func() \r\n{\r\n  Console.Write(\"test\");\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  {2}();\r\n}","textContent":"[h1]Calling Methods[/h1]\r\n\r\nYou can call the same method multiple times: [code format=\"cs\" codeId=\"854\"]static void SayHi()\r\n{\r\n  Console.WriteLine(\"Hello\");\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n  SayHi();\r\n  SayHi();\r\n  SayHi();\r\n}\r\n/* Outputs:\r\nHello\r\nHello\r\nHello \r\n*/[/code]"}]}}