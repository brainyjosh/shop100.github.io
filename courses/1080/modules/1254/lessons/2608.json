{"lesson":{"id":2608,"name":"Passing Arguments","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":5434,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103274,"text":"5","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nstatic void Test(int x) {\r\n  x = 8;\r\n}\r\nstatic void Main() {\r\n  int a = 5;\r\n  Test(a);\r\n  Console.WriteLine(a); \r\n}","textContent":"[h1]Passing Arguments[/h1]\r\n\r\nThere are three ways to pass arguments to a method when the method is called: By [b]value[/b], By [b]reference[/b], and as [b]Output[/b].\r\n\r\n[b][/b]By [b]value [/b]copies the argument's value into the method's formal parameter. Here, we can make changes to the parameter within the method without having any effect on the argument.\r\n[note]By default, C# uses call [b]by value[/b] to pass arguments.[/note]\r\nThe following example demonstrates by value: [code format=\"cs\" codeId=\"861\"]static void Sqr(int x)\r\n{\r\n  x = x * x;\r\n}\r\nstatic void Main()\r\n{\r\n  int a = 3;\r\n  Sqr(a);\r\n\r\n  Console.WriteLine(a); // Outputs [b]3[/b]\r\n}[/code]\r\nIn this case, [b]x[/b] is the parameter of the [b]Sqr [/b]method and [b]a[/b] is the actual argument passed into the method.\r\n[note]As you can see, the [b]Sqr [/b]method does not change the original value of the variable, as it is passed by [b]value[/b], meaning that it operates on the [b]value[/b], not the actual variable.[/note]"},{"id":5435,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103284,"text":"ref","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103285,"text":"ref","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103286,"text":"temp","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a method that swaps the values of its two arguments.\r\n[!raw!]\r\nvoid Swap({0} int x, {1} int y)\r\n{\r\n  int temp;\r\n  temp = x;\r\n  x = y;\r\n  y = {2};\r\n}","textContent":"[h1]Passing by Reference[/h1]\r\n\r\nPass by [b]reference [/b]copies an argument's memory address into the formal parameter. Inside the method, the address is used to access the actual argument used in the call. This means that changes made to the parameter affect the argument.\r\nTo pass the value by reference, the [b]ref [/b]keyword is used in both the call and the method definition: [code format=\"cs\" codeId=\"862\"]static void Sqr([b]ref [/b]int x)\r\n{\r\n  x = x * x;\r\n}\r\nstatic void Main()\r\n{\r\n  int a = 3;\r\n  Sqr([b]ref [/b]a);\r\n\r\n  Console.WriteLine(a); // Outputs [b]9[/b]\r\n}[/code]\r\nThe [b]ref [/b]keyword passes the memory address to the method parameter, which allows the method to operate on the actual variable.\r\n[note]The [b]ref [/b]keyword is used both when defining the method and when calling it.[/note]"},{"id":5436,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103305,"text":"out","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103306,"text":"name","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103307,"text":"out","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to ask for user input in the method and return the value entered using output parameters.\r\n[!raw!]\r\nstatic void Ask({0} string name)\r\n{\r\n  {1} = Console.ReadLine();\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  string nm;\r\n  Ask({2} nm);\r\n}","textContent":"[h1]Passing by Output[/h1]\r\n\r\n[b]Output [/b]parameters are similar to reference parameters, except that they transfer data out of the method rather than accept data in. They are defined using the [b]out [/b]keyword.\r\nThe variable supplied for the output parameter need not be initialized since that value will not be used. Output parameters are particularly useful when you need to return multiple values from a method.\r\n[b]For example: [/b][code format=\"cs\" codeId=\"863\"]static void GetValues([b]out [/b]int x, [b]out [/b]int y)\r\n{\r\n  x = 5;\r\n  y = 42;\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  int a, b;\r\n  GetValues([b]out [/b]a, [b]out [/b]b);\r\n  //Now a equals 5, b equals 42\r\n}[/code]\r\nUnlike the previous reference type example, where the value 3 was referred to the method, which changed its value to 9, output parameters get their value from the method (5 and 42 in the above example).\r\n[note]Similar to the [b]ref [/b]keyword, the [b]out [/b]keyword is used both when defining the method and when calling it.[/note]"}]}}