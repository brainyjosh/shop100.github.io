{"lesson":{"id":2624,"name":"Properties","type":0,"mode":1,"videoID":null,"tags":"properties","quizzes":[{"id":5466,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103514,"text":"set","isCorrect":true,"properties":{}},{"id":103515,"text":"get","isCorrect":true,"properties":{}},{"id":103516,"text":"undo","isCorrect":false,"properties":{}},{"id":103517,"text":"delete","isCorrect":false,"properties":{}}],"question":"Which of the following are accessors?","textContent":"[h1]Properties[/h1]\r\n\r\nAs we have seen in the previous lessons, it is a good practice to encapsulate members of a class and provide access to them only through public methods.\r\nA [b]property [/b]is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they actually include special methods called [b]accessors[/b].\r\nThe accessor of a property contains the executable statements that help in getting (reading or computing) or setting (writing) a corresponding field. Accessor declarations can include a [b]get [/b]accessor, a [b]set [/b]accessor, or both. \r\n[b]For example: [/b] [code format=\"cs\" ]class Person\r\n{\r\n  private string name; //field\r\n\r\n  [b]public string Name[/b] //property\r\n  [b]{\r\n    get { return name; }\r\n    set { name = value; }\r\n  }[/b]\r\n}[/code]\r\nThe Person class has a [b]Name [/b]property that has both the [b]set [/b]and the [b]get [/b]accessors.\r\nThe set accessor is used to assign a value to the name variable; get is used to return its value. \r\n[note][b]value [/b]is a special keyword, which represents the value we assign to a property using the [b]set [/b]accessor. \r\nThe name of the property can be anything you want, but coding conventions dictate properties have the same name as the private field with a capital letter.[/note]"},{"id":5467,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103527,"text":"get","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103528,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103529,"text":"value","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define valid get and set accessors for the age member:\r\n[!raw!]\r\nclass Dog\r\n{\r\n  private int age;\r\n  public int Age\r\n  {\r\n    {0} { {1} age; }\r\n    set { age = {2}; }\r\n  }\r\n}","textContent":"[h1]Properties[/h1]\r\n\r\nOnce the property is defined, we can use it to assign and read the private member: [code format=\"cs\" codeId=\"871\"]class Person\r\n{\r\n  private string name;\r\n  public string Name\r\n  {\r\n    get { return name; }\r\n    set { name = value; }\r\n  }\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Person p = new Person();\r\n [b] p.Name = \"Bob\";[/b]\r\n  Console.WriteLine([b]p.Name[/b]);\r\n}[/code]\r\n[note]The property is accessed by its name, just like any other public member of the class.[/note]"},{"id":5468,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106314,"text":"get","isCorrect":false,"properties":{}},{"id":106315,"text":"set","isCorrect":true,"properties":{}},{"id":106316,"text":"return","isCorrect":false,"properties":{}}],"question":"Skipping which accessor creates a read-only property?","textContent":"[h1]Properties[/h1]\r\n\r\nAny accessor of a property can be omitted. \r\nFor example, the following code creates a property that is read-only: [code format=\"cs\" ]class Person\r\n{\r\n  private string name;\r\n  public string Name\r\n  {\r\n    get { return name; }\r\n  }\r\n}[/code]\r\n[note]A property can also be [b]private[/b], so it can be called only from within the class.[/note]"},{"id":5469,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103540,"text":"get","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103541,"text":"*","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a read-only property X. The return value of the accessor should be the square of x.\r\n[!raw!]\r\nclass A {\r\n  private int x=8;\r\n  public int X {\r\n    {0} { return x{1}x; }\r\n  }\r\n}","textContent":"[h1]Properties[/h1]\r\n\r\nSo, why use properties? Why not just declare the member variable public and access it directly?\r\nWith properties you have the option to control the logic of accessing the variable. \r\nFor example, you can check if the value of [b]age [/b]is greater than 0, before assigning it to the variable: [code format=\"cs\" ]class Person\r\n{\r\n  private int age=0;\r\n  public int Age\r\n  {\r\n    get { return age; }\r\n    set {\r\n      [b]if (value > 0)\r\n        age = value;[/b]\r\n    }\r\n  }\r\n}[/code]\r\n[note]You can have any custom logic with [b]get [/b]and [b]set [/b]accessors.[/note]"},{"id":5470,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103548,"text":"int","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103549,"text":"get;","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create an auto-property named Age of type int.\r\n[!raw!]\r\nclass Dog\r\n{\r\n  public {0} Age { {1} set; }\r\n}","textContent":"[h1]Auto-Implemented Properties[/h1]\r\n\r\nWhen you do not need any custom logic, C# provides a fast and effective mechanism for declaring private members through their properties.\r\nFor example, to create a private member that can only be accessed through the [b]Name [/b]property's [b]get [/b]and [b]set[/b] accessors, use the following syntax: [code format=\"cs\" ]public string Name { [b]get; set;[/b] }[/code]\r\nAs you can see, you do not need to declare the private field name separately - it is created by the property automatically. [b]Name [/b]is called an [b]auto-implemented property[/b]. Also called auto-properties, they allow for easy and short declaration of private members.\r\nWe can rewrite the code from our previous example using an auto-property: [code format=\"cs\" codeId=\"872\"]class Person\r\n{\r\n  [b]public string Name { get; set; }[/b]\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Person p = new Person();\r\n  p.Name = \"Bob\";\r\n  Console.WriteLine(p.Name);\r\n}\r\n// Outputs \"Bob\"[/code]"}]}}