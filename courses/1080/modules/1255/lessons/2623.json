{"lesson":{"id":2623,"name":"Constructors","type":0,"mode":1,"videoID":null,"tags":"constructors","quizzes":[{"id":5464,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103494,"text":"When the class is being declared","isCorrect":false,"properties":{}},{"id":103495,"text":"When a class object is created","isCorrect":true,"properties":{}},{"id":103496,"text":"Never","isCorrect":false,"properties":{}}],"question":"When is the constructor called?","textContent":"[h1]Constructors[/h1]\r\n\r\nA class constructor is a special member method of a class that is executed whenever a new object of that class is created.\r\nA constructor has exactly the same name as its class, is public, and does not have any return type.\r\n[b]For example:[/b] [code format=\"cs\" ]class Person\r\n{\r\n  private int age;\r\n  [b]public Person()\r\n  {\r\n    Console.WriteLine(\"Hi there\");\r\n  }[/b]\r\n}[/code]\r\n Now, upon the creation of an object of type Person, the constructor is automatically called. [code format=\"cs\" codeId=\"869\"]static void Main(string[] args)\r\n{\r\n  Person p = new Person();\r\n}\r\n// Outputs \"Hi there\"[/code]\r\n[note]This can be useful in a number of situations. For example, when creating an object of type BankAccount, you could send an email notification to the owner.\r\nThe same functionality could be achieved using a separate public method. The advantage of the constructor is that it is called automatically.[/note]"},{"id":5465,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103501,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nclass Dog\r\n{\r\n  public Dog()\r\n  { Console.WriteLine(1); }\r\n\r\n  public Dog(string name)\r\n  { Console.WriteLine(name); }\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Dog d = new Dog(\"2\");\r\n}","textContent":"[h1]Constructors[/h1]\r\n\r\nConstructors can be very useful for setting initial values for certain member variables.\r\nA default constructor has no parameters. However, when needed, parameters can be added to a constructor. This makes it possible to assign an initial value to an object when it's created, as shown in the following example: [code format=\"cs\" codeId=\"870\"]class Person\r\n{\r\n  private int age;\r\n  private string name;\r\n  [b]public Person(string nm)\r\n  {\r\n    name = nm;\r\n  }[/b]\r\n  public string getName()\r\n  {\r\n    return name;\r\n  }\r\n}\r\nstatic void Main(string[] args)\r\n {\r\n  Person p = new Person(\"David\");\r\n  Console.WriteLine(p.getName());\r\n}\r\n//Outputs \"David\"[/code]\r\nNow, when the object is created, we can pass a parameter that will be assigned to the [b]name [/b]variable.\r\n[note]Constructors can be [b]overloaded [/b]like any method by using different numbers of parameters.[/note]"}]}}