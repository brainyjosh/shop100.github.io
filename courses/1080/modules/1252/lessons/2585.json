{"lesson":{"id":2585,"name":"Getting User Input","type":0,"mode":1,"videoID":null,"tags":"input","quizzes":[{"id":5369,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102719,"text":"Console","isCorrect":true,"properties":{}},{"id":102720,"text":"ReadLine","isCorrect":true,"properties":{}},{"id":102721,"text":"WriteLine","isCorrect":false,"properties":{}},{"id":102722,"text":"temp","isCorrect":false,"properties":{}},{"id":102723,"text":"Main","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to take user input and store it in the temp variable:\r\n[!raw!]\r\nstring temp;\r\ntemp = {0}.{1}();","textContent":"[h1]User Input[/h1]\r\n\r\nYou can also prompt the user to enter data and then use the [b]Console.ReadLine[/b] method to assign the input to a string variable.\r\nThe following example asks the user for a name and then displays a message that includes the input: [code format=\"cs\" codeId=\"814\"]static void Main(string[] args)\r\n{\r\n   string yourName;\r\n   Console.WriteLine(\"What is your name?\");\r\n\r\n   yourName = [b]Console.ReadLine()[/b];\r\n \r\n   Console.WriteLine(\"Hello {0}\", yourName);\r\n}[/code]\r\nThe [b]Console.ReadLine[/b] method waits for user input and then assigns it to the variable. The next statement displays a formatted string containing Hello with the user input. For example, if you enter David, the output will be Hello David.\r\n[note]Note the empty parentheses in the [b]ReadLine [/b]method. This means that it does not take any arguments.[/note]"},{"id":5370,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104445,"text":"Convert","isCorrect":true,"properties":{}},{"id":104446,"text":"ToDouble","isCorrect":true,"properties":{}},{"id":104447,"text":"Console","isCorrect":false,"properties":{}},{"id":104448,"text":"Write","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to make the following program work:\r\n[!raw!]\r\ndouble n;\r\nstring x = \"77\";\r\nn = {0}.{1}(x);","textContent":"[h1]User Input[/h1]\r\n\r\nThe [b]Console.ReadLine()[/b] method returns a [b]string [/b]value. \r\nIf you are expecting another type of value (such as int or double), the entered data must be converted to that type.\r\nThis can be done using the [b]Convert.ToXXX[/b] methods, where XXX is the .NET name of the type that we want to convert to. For example, methods include [b]Convert.ToDouble[/b] and [b]Convert.ToBoolean[/b].\r\nFor integer conversion, there are three alternatives available based on the bit size of the integer: [b]Convert.ToInt16[/b], [b]Convert.ToInt32[/b] and [b]Convert.ToInt64[/b]. The default int type in C# is 32-bit.\r\nLetâ€™s create a program that takes an integer as input and displays it in a message: [code format=\"cs\" codeId=\"815\"]static void Main(string[] args)\r\n{\r\n  int age = [b]Convert.ToInt32[/b](Console.ReadLine());\r\n  Console.WriteLine(\"You are {0} years old\", age);\r\n}[/code]\r\n[note]If, in the program above, a non-integer value is entered (for example, letters), the [b]Convert [/b]will fail and cause an error.[/note]"}]}}