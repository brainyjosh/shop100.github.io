{"lesson":{"id":2590,"name":"Assignment & Increment Operators","type":0,"mode":1,"videoID":null,"tags":"operators","quizzes":[{"id":5380,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102822,"text":"x -= 4;","isCorrect":false,"properties":{}},{"id":102823,"text":"x += 5;","isCorrect":true,"properties":{}},{"id":102824,"text":"x = y + 5;","isCorrect":false,"properties":{}}],"question":"What is the alternative for x = x + 5?","textContent":"[h1]Assignment Operators[/h1]\r\n\r\nThe = [b]assignment [/b]operator assigns the value on the right side of the operator to the variable on the left side. \r\n\r\nC# also provides [b]compound assignment operators[/b] that perform an operation and an assignment in one statement. \r\n[b]For example: [/b][code format=\"cs\" codeId=\"823\"]int x = 42;\r\n[b]x += 2[/b]; // equivalent to x = x + 2\r\n[b]x -= 6[/b]; // equivalent to x = x - 6[/code]"},{"id":5381,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102831,"text":"/","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":102832,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing part of the following code to divide x by 3 using the shorthand division operator.\r\n[!raw!]\r\nint x = 42;\r\nx {0}= {1};","textContent":"[h1]Assignment Operators[/h1]\r\n\r\nThe same shorthand syntax applies to the multiplication, division, and modulus operators.[code format=\"cs\" ]x *= 8; // equivalent to x = x * 8\r\nx /= 5; // equivalent to x = x / 5\r\nx %= 2; // equivalent to x = x % 2[/code]"},{"id":5382,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102838,"text":"7","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nint x = 6;\r\nx++;\r\nConsole.WriteLine(x);","textContent":"[h1]Increment Operator[/h1]\r\n\r\nThe [b]increment [/b]operator is used to increase an integer's value by one, and is a commonly used C# operator. [code format=\"cs\" ][b]x++;[/b] //equivalent to x = x + 1[/code]\r\n[b]For example: [/b][code format=\"cs\" codeId=\"824\"]int x = 10;\r\nx++;\r\nConsole.WriteLine(x);\r\n\r\n//Outputs 11[/code]"},{"id":5383,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102855,"text":"x++ uses x's value then increments it","isCorrect":true,"properties":{}},{"id":102856,"text":"++x increments x's value before using it","isCorrect":true,"properties":{}},{"id":102857,"text":"x++ increments x's value before using it","isCorrect":false,"properties":{}},{"id":102858,"text":"++x uses x's value before incrementing it","isCorrect":false,"properties":{}}],"question":"What's the difference between ++x and x++?","textContent":"[h1]Prefix & Postfix Forms[/h1]\r\n\r\nThe increment operator has two forms, [b]prefix [/b]and [b]postfix[/b].[b][/b][code format=\"cs\" ]++x; //prefix\r\nx++; //postfix[/code]\r\n[b]Prefix [/b]increments the value, and then proceeds with the expression. \r\n[b]Postfix [/b]evaluates the expression and then performs the incrementing.\r\n\r\n[b]Prefix example:[/b] [code format=\"cs\" codeId=\"825\"]int x = 3;\r\nint y = [b]++x[/b];\r\n// x is 4, y is 4[/code]\r\n[b]Postfix example:[/b] [code format=\"cs\" codeId=\"826\"]int x = 3;\r\nint y = [b]x++[/b];\r\n// x is 4, y is 3[/code]\r\n[note]The [b]prefix [/b]example increments the value of x, and then assigns it to y.\r\nThe [b]postfix [/b]example assigns the value of x to y, and then increments x.[/note]"},{"id":5384,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":102861,"text":"--","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the missing operator to decrease the value of x by one.\r\n[!raw!]\r\nint x = 42;\r\nx{0};\r\nConsole.WriteLine(x);","textContent":"[h1]Decrement Operator[/h1]\r\n\r\nThe [b]decrement [/b]operator (--) works in much the same way as the increment operator, but instead of increasing the value, it decreases it by one.[code format=\"cs\" ]--x; // prefix\r\nx--; // postfix[/code]"}]}}