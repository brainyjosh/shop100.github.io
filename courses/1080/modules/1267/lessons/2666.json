{"lesson":{"id":2666,"name":"Static Members","type":0,"mode":1,"videoID":null,"tags":"static","quizzes":[{"id":5533,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103737,"text":"static","isCorrect":true,"properties":{}},{"id":103738,"text":"void","isCorrect":true,"properties":{}},{"id":103739,"text":"function","isCorrect":false,"properties":{}},{"id":103740,"text":"~Main","isCorrect":false,"properties":{}},{"id":103741,"text":"new","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to have a valid Main method:\r\n[!raw!]\r\n{0} {1} Main(string[] args)","textContent":"[h1]Static[/h1]\r\n\r\nNow it's time to discuss the [b]static [/b]keyword.\r\nYou first noticed it in the Main method's declaration: [code format=\"cs\" ][b]static [/b]void Main(string[] args)[/code]\r\nClass members (variables, properties, methods) can also be declared as [b]static[/b]. This makes those members belong to the class itself, instead of belonging to individual objects. No matter how many objects of the class are created, there is only [b]one [/b]copy of the static member.\r\n[b]For example:[/b] [code format=\"cs\" ]class Cat {\r\n[b]  [/b]public [b]static [/b]int count=0;\r\n  public Cat() {\r\n    count++;\r\n  }\r\n}[/code]\r\nIn this case, we declared a public member variable [b]count[/b], which is [b]static[/b]. The constructor of the class increments the [b]count [/b]variable by one.\r\n[note]No matter how many [b]Cat [/b]objects are instantiated, there is always only one [b]count [/b]variable that belongs to the [b]Cat [/b]class because it was declared [b]static[/b].[/note]"},{"id":5538,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103777,"text":"Math","isCorrect":true,"properties":{}},{"id":103778,"text":"PI","isCorrect":true,"properties":{}},{"id":103779,"text":"static","isCorrect":false,"properties":{}},{"id":103780,"text":"void","isCorrect":false,"properties":{}},{"id":103781,"text":"return","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to assign the value of the Math class static PI variable to x.\r\n[!raw!]\r\ndouble x = {0}.{1};","textContent":"[h1]Static[/h1]\r\n\r\nBecause of their global nature, static members can be accessed directly using the [b]class name[/b] without an object.\r\n[b]For example:[/b] [code format=\"cs\" codeId=\"886\"]class Cat {\r\n  public [b]static [/b]int count=0;\r\n  public Cat() {\r\n    count++;\r\n  }\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  Cat c1 = new Cat();\r\n  Cat c2 = new Cat();\r\n\r\n  Console.WriteLine([b]Cat.count[/b]);\r\n}\r\n//Outputs 2[/code]\r\nAs you can see, we can access the static variable using the class name: [b]Cat.count[/b].\r\nThe [b]count [/b]variable is shared between all Cat objects. For this class, each time an object is created, the static value is incremented. The program above demonstrates this when 2 is displayed after creating two objects of that class.\r\n[note]You must access [b]static [/b]members using the class name. If you try to access them via an object of that class, you will generate an error.[/note]"},{"id":5540,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103794,"text":"static","isCorrect":true,"properties":{}},{"id":103795,"text":"void","isCorrect":false,"properties":{}},{"id":103796,"text":"recursive","isCorrect":false,"properties":{}}],"question":"To be able to directly call a method in Main, it should be:","textContent":"[h1]Static Methods[/h1]\r\n\r\nThe same concept applies to [b]static [/b]methods. \r\n[b]For example: [/b][code format=\"cs\" codeId=\"887\"]class Dog\r\n{\r\n [b] public static void Bark() {\r\n    Console.WriteLine(\"Woof\");\r\n  }[/b]\r\n}\r\nstatic void Main(string[] args)\r\n{\r\n  [b]Dog.Bark();[/b]\r\n}\r\n// Outputs \"Woof\"[/code]\r\nStatic methods can access [b]only [/b]static members. \r\n[note]The Main method is [b]static[/b], as it is the starting point of any program. Therefore any method called directly from Main had to be [b]static[/b].[/note]"},{"id":5541,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103812,"text":"class","isCorrect":true,"properties":{}},{"id":103813,"text":"static","isCorrect":true,"properties":{}},{"id":103814,"text":"Person()","isCorrect":true,"properties":{}},{"id":103815,"text":"void","isCorrect":false,"properties":{}},{"id":103816,"text":"int","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to initialize the static Age property of the Person class using a static constructor:\r\n[!raw!]\r\n{0} Person {\r\n  public {1} int Age { get; set; }\r\n  static {2} {\r\n    Age = 0;\r\n  }\r\n}","textContent":"[h1]Static[/h1]\r\n\r\n[b]Constant[/b] members are static by definition.\r\n[b]For example:[/b] [code format=\"cs\" codeId=\"888\"]class MathClass {\r\n  public [b]const[/b] int ONE = 1;\r\n}\r\nstatic void Main(string[] args) {\r\n  Console.Write(MathClass.ONE);\r\n}\r\n//Outputs 1[/code]\r\nAs you can see, we access the property [b]ONE [/b]using the name of the class, just like a static member. This is because all [b]const [/b]members are [b]static [/b]by default.\r\n\r\n[h2]Static Constructors[/h2]\r\nConstructors can be declared [b]static [/b]to initialize static members of the class.\r\nThe static constructor is automatically called once when we access a static member of the class.\r\n[b] For example: [/b] [code format=\"cs\" codeId=\"889\"]class SomeClass {\r\n  public static int X { get; set; }\r\n  public static int Y { get; set; }\r\n \r\n  [b]static SomeClass()[/b] {\r\n    X = 10;\r\n    Y = 20;\r\n  }\r\n}[/code]\r\n[note]The constructor will get called once when we try to access SomeClass.X or SomeClass.Y.[/note]"}]}}