{"lesson":{"id":2680,"name":"Derived Class Constructor & Destructor","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":5562,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103950,"text":"one","isCorrect":true,"properties":{}},{"id":103951,"text":"none","isCorrect":false,"properties":{}},{"id":103952,"text":"multiple","isCorrect":false,"properties":{}}],"question":"What is the maximum number of base classes a sealed class can have?","textContent":"[h1]Inheritance[/h1]\r\n\r\nConstructors are called when objects of a class are created. With inheritance, the base class constructor and destructor are not inherited, so you should define constructors for the derived classes.\r\nHowever, the base class constructor and destructor are being invoked automatically when an object of the derived class is created or deleted. \r\nConsider the following example: [code format=\"cs\" ]class Animal {\r\n  public Animal() {\r\n    Console.WriteLine(\"Animal created\");\r\n  }\r\n  ~Animal() {\r\n    Console.WriteLine(\"Animal deleted\");\r\n  }\r\n}\r\nclass Dog: Animal {\r\n  public Dog() {\r\n    Console.WriteLine(\"Dog created\");\r\n  }\r\n  ~Dog() {\r\n    Console.WriteLine(\"Dog deleted\");\r\n  }\r\n}[/code]\r\nWe have defined the Animal class with a constructor and destructor and a derived Dog class with its own constructor and destructor.\r\n[note]So what will happen when we create an object of the derived class? Tap next to find out![/note]"},{"id":5563,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106313,"text":"9","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the value of x after a B object is created?\r\nclass A {\r\n  public int x=7;\r\n  public A() {\r\n    x++;\r\n  }\r\n}\r\nclass B: A {\r\n  public B() {\r\n    x++;\r\n  }\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nLet's create a Dog object: [code format=\"cs\" codeId=\"900\"]static void Main(string[] args) {\r\n  Dog d = new Dog();\r\n}\r\n/*Outputs\r\nAnimal created\r\nDog created\r\nDog deleted\r\nAnimal deleted\r\n*/[/code]\r\nNote that the base class constructor is called first and the derived class constructor is called next.\r\nWhen the object is destroyed, the derived class destructor is invoked and then the base class destructor is invoked.\r\n[note]You can think of it as the following: The derived class needs its base class in order to work, which is why the base class constructor is called first.[/note]"}]}}