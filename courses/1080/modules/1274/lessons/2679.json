{"lesson":{"id":2679,"name":"Protected Members","type":0,"mode":1,"videoID":null,"tags":"protected sealed","quizzes":[{"id":5560,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103915,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103916,"text":"protected","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to make the Area method of the Shape class accessible only in the derived class:\r\n[!raw!]\r\n{0} Shape {\r\n  public int H {get; set;}\r\n  public int W {get; set;}\r\n  {1} int Area() {\r\n    return H * W;\r\n  }\r\n}","textContent":"[h1]protected[/h1]\r\n\r\nUp to this point, we have worked exclusively with [b]public [/b]and [b]private [/b]access modifiers.\r\nPublic members may be accessed from anywhere outside of the class, while access to private members is limited to their class. \r\nThe [b]protected[/b] access modifier is very similar to [b]private[/b] with one difference; it can be accessed in the derived classes. So, a [b]protected[/b] member is accessible only from derived classes.\r\n[b]For example:[/b] [code format=\"cs\" codeId=\"897\"]class Person {\r\n  [b]protected [/b]int Age {get; set;}\r\n  [b]protected [/b]string Name {get; set;}\r\n}\r\nclass Student : Person {\r\n  public Student(string nm) {\r\n    Name = nm;\r\n  }\r\n  public void Speak() {\r\n    Console.Write(\"Name: \"+[b]Name[/b]);\r\n  }\r\n}\r\nstatic void Main(string[] args) {\r\n  Student s = new Student(\"David\");\r\n  s.Speak();\r\n  //Outputs \"Name: David\"\r\n}[/code]\r\nAs you can see, we can access and modify the [b]Name[/b] property of the base class from the derived class.\r\nBut, if we try to access it from outside code, we will get an error: [code format=\"cs\" codeId=\"898\"]static void Main(string[] args) {\r\n    Student s = new Student(\"David\");\r\n  [b]s.Name = \"Bob\"; //Error[/b]\r\n}[/code]"},{"id":5561,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103926,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103927,"text":"sealed","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103928,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to derive a class B from class A and prevent class B from being inherited.\r\n[!raw!]\r\n{0} A {\r\n} \r\n{1} class B {2} A {\r\n}","textContent":"[h1]sealed[/h1]\r\n\r\nA class can prevent other classes from inheriting it, or any of its members, by using the [b]sealed[/b] modifier.\r\n[b]For example: [/b][code format=\"cs\" codeId=\"899\"][b]sealed [/b]class Animal {\r\n  //some code\r\n}\r\nclass Dog : Animal { } //Error[/code]\r\nIn this case, we cannot derive the Dog class from the Animal class because Animal is [b]sealed[/b].\r\n[note]The [b]sealed[/b] keyword provides a level of protection to your class so that other classes cannot inherit from it.[/note]"}]}}