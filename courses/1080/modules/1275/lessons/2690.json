{"lesson":{"id":2690,"name":"Exception Handling","type":0,"mode":1,"videoID":null,"tags":"exceptions","quizzes":[{"id":5585,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104184,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the maximum index of the following array?\r\nint[] arr = new int[] { 4, 5, 8 };","textContent":"[h1]Exceptions[/h1]\r\n\r\nAn [b]exception [/b]is a problem that occurs during program execution. Exceptions cause abnormal termination of the program. \r\nAn exception can occur for many different reasons. Some examples:\r\n- A user has entered invalid data.\r\n- A file that needs to be opened cannot be found.\r\n- A network connection has been lost in the middle of communications.\r\n- Insufficient memory and other issues related to physical resources.\r\n\r\nFor example, the following code will produce an exception when run because we request an index which does not exist: [code format=\"cs\" codeId=\"910\"]int[] arr = new int[] { 4, 5, 8 };\r\nConsole.Write(arr[[b]8[/b]]);[/code]\r\n[note]As you can see, exceptions are caused by user error, programmer error, or physical resource issues. However, a well-written program should handle all possible exceptions.[/note]"},{"id":5586,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104776,"text":"try","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104777,"text":"catch","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to handle all possible exceptions.\r\n[!raw!]\r\nint x = 12;\r\nint y = 0;\r\n{0} {\r\n  int z = x / y;\r\n  Console.WriteLine(z);\r\n}\r\n{1} (Exception e) {\r\n  Console.WriteLine(\"Error\");\r\n}","textContent":"[h1]Handling Exceptions[/h1]\r\n\r\nC# provides a flexible mechanism called the[b] try-catch[/b] statement to handle exceptions so that a program won't crash when an error occurs.\r\nThe try and catch blocks are used similar to: [code format=\"cs\" codeId=\"911\"][b]try [/b]{\r\n  int[] arr = new int[] { 4, 5, 8 };\r\n  Console.Write(arr[8]);\r\n}\r\n[b]catch(Exception e) [/b]{\r\n  Console.WriteLine(\"An error occurred\");\r\n}\r\n//Outputs \"An error occurred\"[/code]\r\nThe code that might generate an exception is placed in the [b]try [/b]block. If an exception occurs, the catch blocks is executed without stopping the program.\r\nThe type of exception you want to catch appears in parentheses following the keyword [b]catch[/b]. \r\nWe use the general [b]Exception[/b] type to handle all kinds of exceptions. We can also use the exception object [b]e[/b] to access the exception details, such as the original error message ([b]e.Message[/b]): [code format=\"cs\" codeId=\"912\"]try {\r\n  int[] arr = new int[] { 4, 5, 8 };\r\n  Console.Write(arr[8]);\r\n}\r\ncatch(Exception e) {\r\n  Console.WriteLine([b]e.Message[/b]);\r\n}\r\n// Index was outside the bounds of the array.[/code]\r\n[note]You can also catch and handle different exceptions separately. Tap next to learn more![/note]"},{"id":5587,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104696,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the value of x after this code?\r\nint[] arr = {2, 5, 3};\r\nint x = 0;\r\ntry {\r\n  x = arr[5];\r\n}\r\ncatch (Exception e) {\r\n  x = arr[x];\r\n}","textContent":"[h1]Handling Multiple Exceptions[/h1]\r\n\r\nA single [b]try [/b]block can contain multiple [b]catch [/b]blocks that handle different exceptions separately. \r\nException handling is particularly useful when dealing with user input.\r\nFor example, for a program that requests user input of two numbers and then outputs their quotient, be sure that you handle division by zero, in case your user enters 0 as the second number. [code format=\"cs\"]int x, y;\r\ntry {\r\n  x = Convert.ToInt32(Console.Read());\r\n  y = Convert.ToInt32(Console.Read());\r\n  Console.WriteLine(x / y);\r\n}\r\ncatch ([b]DivideByZeroException [/b]e) {\r\n  Console.WriteLine(\"Cannot divide by 0\");\r\n}\r\ncatch([b]Exception [/b]e) {\r\n  Console.WriteLine(\"An error occurred\");\r\n}[/code]\r\nThe above code handles the [b]DivideByZeroException [/b]separately. The last [b]catch [/b]handles all the other exceptions that might occur. If multiple exceptions are handled, the [b]Exception [/b]type must be defined last.\r\nNow, if the user enters 0 for the second number, \"Cannot divide by 0\" will be displayed. \r\nIf, for example, the user enters non-integer values, \"An error occurred\" will be displayed.\r\n[note]The following exception types are some of the most commonly used: FileNotFoundException, FormatException, IndexOutOfRangeException, InvalidOperationException, OutOfMemoryException.[/note]"},{"id":5588,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104225,"text":"Exception","isCorrect":true,"properties":{}},{"id":104226,"text":"System","isCorrect":false,"properties":{}},{"id":104227,"text":"Main","isCorrect":false,"properties":{}}],"question":"Which class should you use to handle all possible exceptions?","textContent":"[h1]finally[/h1]\r\n\r\nAn optional [b]finally [/b]block can be used after the [b]catch [/b]blocks. The [b]finally [/b]block is used to execute a given set of statements, whether an exception is thrown or not. \r\n[b]For example: [/b][code format=\"cs\" codeId=\"914\"]int result=0;\r\nint num1 = 8;\r\nint num2 = 4;\r\ntry {\r\n  result = num1 / num2;\r\n}\r\ncatch (DivideByZeroException e) {\r\n  Console.WriteLine(\"Error\");\r\n}\r\n[b]finally [/b]{\r\n  Console.WriteLine(result);\r\n}[/code]\r\n[note]The[b] finally [/b]block can be used, for example, when you work with files or other resources. These should be closed or released in the [b]finally [/b]block, whether an exception is raised or not.[/note]"}]}}