{"lesson":{"id":2626,"name":"Arrays","type":0,"mode":1,"videoID":null,"tags":"arrays","quizzes":[{"id":5503,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103579,"text":"double","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103580,"text":"new","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103581,"text":"42","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to instantiate an array of 42 elements of type double:\r\n[!raw!]\r\n{0}[ ] a = {1} double[{2}];","textContent":"[h1]Arrays[/h1]\r\n\r\nC# provides numerous built-in classes to store and manipulate data.\r\nOne example of such a class is the [b]Array [/b]class.\r\nAn array is a data structure that is used to store a collection of data. You can think of it as a collection of variables of the [b]same type[/b].\r\nFor example, consider a situation where you need to store 100 numbers. Rather than declare 100 different variables, you can just declare an array that stores 100 [b]elements[/b].\r\nTo declare an array, specify its element types with square brackets: [code format=\"cs\" ]int[ ] myArray;[/code]\r\nThis statement declares an array of integers.\r\nSince arrays are [b]objects[/b], we need to instantiate them with the [b]new [/b]keyword: [code format=\"cs\" ]int[ ] myArray = [b]new int[5][/b]; [/code]\r\nThis instantiates an array named myArray that holds 5 integers.\r\n[note]Note the [b]square brackets[/b] used to define the number of elements the array should hold.[/note]"},{"id":5504,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103583,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"The third element of an array has index:","textContent":"[h1]Arrays[/h1]\r\n\r\nAfter creating the array, you can assign values to individual elements by using the [b]index number[/b]: [code format=\"raw\" ]int[ ] myArray = new int[5];\r\nmyArray[0] = 23;[/code]\r\nThis will assign the value 23 to the first element of the array.\r\n[note]Arrays in C# are zero-indexed meaning the first member has index 0, the second has index 1, and so on.[/note]"},{"id":5505,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103596,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":103597,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to instantiate the array with initial values:\r\n[!raw!]\r\nint[ ] a = {0}1, 2, 3{1};","textContent":"[h1]Arrays[/h1]\r\n\r\nWe can provide initial values to the array when it is declared by using curly brackets:[code format=\"cs\" ]string[ ] names = new string[3] {\"John\", \"Mary\", \"Jessica\"};\r\ndouble[ ] prices = new double[4] {3.6, 9.8, 6.4, 5.9};[/code]\r\nWe can omit the size declaration when the number of elements are provided in the curly braces: [code format=\"cs\" ]string[ ] names = new string[ ] {\"John\", \"Mary\", \"Jessica\"};\r\ndouble[ ] prices = new double[ ] {3.6, 9.8, 6.4, 5.9};[/code]\r\nWe can even omit the [b]new [/b]operator. The following statements are identical to the ones above: [code format=\"cs\" ]string[ ] names = {\"John\", \"Mary\", \"Jessica\"};\r\ndouble[ ] prices = {3.6, 9.8, 6.4, 5.9};[/code]\r\n[note]Array values should be provided in a comma separated list enclosed in {curly braces}.[/note]"},{"id":5506,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":103606,"text":"6","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the value of x after these statements execute?\r\nint[ ] a = {4, 7, 2};\r\nint x = a[0]+a[2];","textContent":"[h1]Arrays[/h1]\r\n\r\nAs mentioned, each element of an array has an index number.\r\nFor example, consider the following array: [code format=\"cs\" ]int[ ] b = {11, 45, 62, 70, 88};[/code]\r\nThe elements of [b]b[/b] have the following indexes: [img id=\"2459\" width=\"100%\"]\r\nTo access individual array elements, place the element's index number in square brackets following the array name. [code format=\"cs\" codeId=\"873\"]Console.WriteLine(b[2]);\r\n//Outputs 62\r\n\r\nConsole.WriteLine(b[3]);\r\n//Outputs 70[/code]\r\n[note]Remember that the first element has index 0.[/note]"}]}}