{"lesson":{"id":2148,"name":"Arrays","type":0,"mode":1,"videoID":"L06uGnF4IpY","tags":"arrays","quizzes":[{"id":4229,"number":1,"videoStart":7.0,"videoEnd":261.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95406,"text":"0","isCorrect":true,"properties":{}},{"id":95407,"text":"1","isCorrect":false,"properties":{}},{"id":95408,"text":"2","isCorrect":false,"properties":{}}],"question":"In Java, an array starts counting from...","textContent":"[h1]Arrays[/h1]\r\n\r\nAn [b]array [/b]is a collection of variables of the same type. \r\nWhen you need to store a list of values, such as numbers, you can store them in an array, instead of declaring separate variables for each number.\r\n\r\nTo declare an array, you need to define the type of the elements with [b]square brackets[/b].\r\nFor example, to declare an array of integers: [code format=\"java\"][b]int[ ][/b] arr;[/code]\r\nThe name of the array is [b]arr[/b]. The type of elements it will hold is [b]int[/b].\r\n\r\nNow, you need to define the array's capacity, or the number of elements it will hold. To accomplish this, use the keyword [b]new[/b].[code format=\"java\"]int[ ] arr = [b]new [/b]int[5];[/code]\r\nThe code above declares an array of 5 integers.\r\nIn an array, the elements are ordered and each has a specific and constant position, which is called an [b]index[/b].\r\n\r\nTo reference elements in an array, type the name of the array followed by the index position within a pair of square brackets.\r\n[b]Example: [/b][code format=\"java\"][b]arr[2] [/b]= 42;[/code]\r\nThis assigns a value of 42 to the element with 2 as its index.\r\n[note]Note that elements in the array are identified with [b]zero-based[/b] index numbers, meaning that the first element's index is 0 rather than one. So, the maximum index of the array int[5] is 4.[/note]"},{"id":4230,"number":2,"videoStart":261.0,"videoEnd":382.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99546,"text":"9","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nint tmp[ ] = {5, 8, 9, 3};\r\nSystem.out.println(tmp[2]);","textContent":"[h1]Initializing Arrays [/h1]\r\n\r\nJava provides a shortcut for instantiating arrays of primitive types and strings. \r\nIf you already know what values to insert into the array, you can use an [b]array literal[/b]. \r\nExample of an array literal:[code format=\"java\" codeId=\"746\"]String[ ] myNames = { \"A\", \"B\", \"C\", \"D\"};\r\nSystem.out.println(myNames[2]);\r\n\r\n// Outputs \"C\"[/code]\r\nPlace the values in a [b]comma-separated[/b] list, enclosed in curly braces. \r\nThe code above automatically initializes an array containing 4 elements, and stores the provided values.\r\n[note]Sometimes you might see the square brackets placed after the array name, which also works, but the preferred way is to place the brackets after the array's data type.[/note]"}]}}