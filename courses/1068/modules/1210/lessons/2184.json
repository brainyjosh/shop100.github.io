{"lesson":{"id":2184,"name":"Iterators","type":0,"mode":1,"videoID":"o9ZYhHdZJNY","tags":"iterators","quizzes":[{"id":4322,"number":1,"videoStart":21.0,"videoEnd":320.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99724,"text":"20","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nList<Integer> list = new ArrayList<Integer>();\r\nlist.add(10);\r\nlist.add(20);\r\nlist.add(30);\r\nIterator<Integer> it = list.iterator();\r\nit.next();\r\nSystem.out.println(it.next());","textContent":"[h1]Iterators\r\n[/h1]\r\nAn [b]Iterator [/b]is an object that enables to cycle through a collection, obtain or remove elements. \r\nBefore you can access a collection through an iterator, you must obtain one. Each of the collection classes provides an [b]iterator[/b]() method that returns an iterator to the start of the collection. By using this iterator object, you can access each element in the collection, one element at a time.\r\n\r\nThe Iterator class provides the following methods:\r\n[b]hasNext[/b](): Returns true if there is at least one more element; otherwise, it returns false.\r\n[b]next[/b](): Returns the next object and advances the iterator.\r\n[b]remove[/b](): Removes the last object that was returned by next from the collection.\r\n\r\nThe Iterator class must be imported from the[b] java.util[/b] package.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"800\"][b]import java.util.Iterator;[/b]\r\nimport java.util.LinkedList;\r\n\r\npublic class MyClass {\r\n   public static void main(String[ ] args) {\r\n  LinkedList<String> animals = new LinkedList<String>();\r\n  animals.add(\"fox\");\r\n  animals.add(\"cat\");\r\n  animals.add(\"dog\");\r\n  animals.add(\"rabbit\");\r\n\r\n  [b]Iterator<String> it = animals.iterator();[/b]\r\n  String value = [b]it.next();[/b]\r\n  System.out.println(value);\r\n}\r\n}\r\n//Outputs \"fox\"[/code]\r\n[note][b]it.next()[/b] returns the first element in the list and then moves the iterator on to the next element.\r\nEach time you call [b]it.next()[/b], the iterator moves to the next element of the list.[/note]"},{"id":4323,"number":2,"videoStart":320.0,"videoEnd":358.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99725,"text":"Iterator","isCorrect":true,"properties":{}},{"id":99726,"text":"Integer","isCorrect":true,"properties":{}},{"id":99727,"text":"iterator","isCorrect":true,"properties":{}},{"id":99728,"text":"hasNext","isCorrect":true,"properties":{}},{"id":99729,"text":"next","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to iterate and print all of the items in the list of Integers.\r\n[!raw!]\r\n{0}<{1}> it = list.{2}();\r\nwhile (it.{3}()) {\r\n  System.out.println(it.{4}());\t\r\n}","textContent":"[h1]Iterators[/h1]\r\n\r\n[b][/b]Typically, [b]iterators [/b]are used in loops. At each iteration of the loop, you can access the corresponding list element.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"801\"]import java.util.Iterator;\r\nimport java.util.LinkedList;\r\n\r\npublic class MyClass {\r\n  public static void main(String[ ] args) {\r\n    LinkedList<String> animals = new LinkedList<String>();\r\n    animals.add(\"fox\");\r\n    animals.add(\"cat\");\r\n    animals.add(\"dog\");\r\n    animals.add(\"rabbit\");\r\n     \r\n    Iterator<String> it = animals.iterator();\r\n   [b] while(it.hasNext()) {\r\n      String value = it.next();\r\n      System.out.println(value);   \r\n     }[/b]\r\n  }\r\n}\r\n/*\r\nfox\r\ncat\r\ndog\r\nrabbit\r\n*/[/code]\r\n[note]Here, the [b]while [/b]loop determines whether the iterator has additional elements, prints the value of the element, and advances the iterator to the next.[/note]"}]}}