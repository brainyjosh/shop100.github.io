{"lesson":{"id":2188,"name":"Creating & Writing Files","type":0,"mode":1,"videoID":"Bws9aQuAcdg","tags":"files","quizzes":[{"id":4330,"number":1,"videoStart":26.0,"videoEnd":154.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95658,"text":"ArrayList","isCorrect":false,"properties":{}},{"id":95659,"text":"Formatter","isCorrect":true,"properties":{}},{"id":95660,"text":"Scanner","isCorrect":false,"properties":{}},{"id":95661,"text":"Set","isCorrect":false,"properties":{}}],"question":"Which class is used to write content to files?","textContent":"[h1]Creating Files[/h1]\r\n\r\n[b]Formatter[/b], another useful class in the java.util package, is used to create content and write it to files.\r\n[b]Example:[/b][code format=\"java\"][b]import java.util.Formatter;[/b]\r\n\r\npublic class MyClass {\r\n   public static void main(String[ ] args) {\r\n  try {\r\n    [b]Formatter [/b]f = new [b]Formatter[/b](\"C:\\\\sololearn\\\\test.txt\");\r\n  } catch (Exception e) {\r\n      System.out.println(\"Error\");\r\n  }\r\n  }\r\n}[/code]\r\nThis creates an empty file at the specified path. If the file already exists, this will overwrite it.\r\n[note]Again, you need to surround the code with a [b]try/catch[/b] block, as the operation can fail.[/note]"},{"id":4331,"number":2,"videoStart":154.0,"videoEnd":407.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99734,"text":"Formatter f = new Formatter(\"a.txt\");","isCorrect":true,"properties":{}},{"id":99735,"text":"f.format(\"%s\", \"Hi \");","isCorrect":true,"properties":{}},{"id":99736,"text":"f.format(\"%s\", \"there\");","isCorrect":true,"properties":{}},{"id":99737,"text":"f.close();","isCorrect":true,"properties":{}}],"question":"Rearrange the code to write \"Hi there\" to the file.","textContent":"[h1]Writing to Files[/h1]\r\n\r\nOnce the file is created, you can write content to it using the same Formatter object's [b]format[/b]() method.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"802\"]import java.util.Formatter;\r\n\r\npublic class MyClass {\r\n   public static void main(String[ ] args) {\r\n  try {\r\n    Formatter f = new Formatter(\"C:\\\\sololearn\\\\test.txt\");\r\n    [b]f.format(\"%s %s %s\", \"1\",\"John\", \"Smith \\r\\n\");\r\n    f.format(\"%s %s %s\", \"2\",\"Amy\", \"Brown\");[/b]\r\n    f.close();    \r\n  } catch (Exception e) {\r\n    System.out.println(\"Error\");\r\n  }\r\n  }\r\n}[/code]\r\nThe [b]format[/b]() method formats its parameters according to its first parameter. \r\n%s mean a string and get's replaced by the first parameter after the format. The second %s get's replaced by the next one, and so on. So, the format [b]%s %s %s[/b] denotes three strings that are separated with spaces.\r\nNote:[b] \\r\\n[/b] is the newline symbol in Windows.\r\nThe code above creates a file with the following content:[code format=\"java\" ]1 John Smith \r\n2 Amy Brown[/code]\r\n[note]Don't forget to [b]close [/b]the file once you're finished writing to it![/note]"}]}}