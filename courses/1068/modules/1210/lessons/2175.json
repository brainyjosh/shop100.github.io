{"lesson":{"id":2175,"name":"Exception Handling","type":0,"mode":1,"videoID":"K_-3OLkXkzY","tags":"exceptions","quizzes":[{"id":4301,"number":1,"videoStart":8.0,"videoEnd":178.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106055,"text":"We cannot catch any exceptions","isCorrect":false,"properties":{}},{"id":106056,"text":"If we don't catch exceptions, the program can shut down","isCorrect":true,"properties":{}},{"id":106057,"text":"Exception catching is a good practice","isCorrect":true,"properties":{}},{"id":106058,"text":"Exception catching improves program interface design","isCorrect":false,"properties":{}}],"question":"Which two of the following statements are true?","textContent":"[h1]Exceptions[/h1]\r\n\r\nAn [b]exception [/b]is a problem that occurs during program execution. Exceptions cause abnormal termination of the program. \r\n[b]Exception handling[/b] is a powerful mechanism that handles runtime errors to maintain normal application flow.\r\n\r\nAn exception can occur for many different reasons. Some examples:\r\n- A user has entered invalid data.\r\n- A file that needs to be opened cannot be found.\r\n- A network connection has been lost in the middle of communications.\r\n- Insufficient memory and other issues related to physical resources.\r\n[note]As you can see, exceptions are caused by user error, programmer error, or physical resource issues. However, a well-written program should handle all possible exceptions.[/note]"},{"id":4303,"number":2,"videoStart":178.0,"videoEnd":347.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99671,"text":"try","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99672,"text":"catch","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to handle any possible exceptions.\r\n[!raw!]\r\nint x = 12;\r\nint y = 0;\r\n{0} {\r\n   int z = x / y;\r\n   System.out.println(z);\r\n}\r\n{1} (Exception e) {\r\n   System.out.println(\"Error\");\r\n}","textContent":"[h1]Exception Handling[/h1]\r\n\r\nExceptions can be caught using a combination of the [b]try [/b]and [b]catch [/b]keywords.\r\nA try/catch block is placed around the code that might generate an exception. \r\n[b]Syntax:[/b] [code format=\"java\" ][b]try [/b]{\r\n  //some code\r\n} [b]catch (Exception e)[/b] {\r\n  //some code to handle errors\r\n}[/code]\r\nA [b]catch [/b]statement involves declaring the type of exception you are trying to catch. If an exception occurs in the [b]try [/b]block, the [b]catch [/b]block that follows the [b]try [/b]is checked. If the type of exception that occurred is listed in a [b]catch [/b]block, the exception is passed to the [b]catch [/b]block much as an argument is passed into a method parameter.\r\nThe [b]Exception [/b]type can be used to catch all possible exceptions.\r\n\r\nThe example below demonstrates exception handling when trying to access an array index that does not exist: [code format=\"java\" codeId=\"788\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    [b]try[/b] {\r\n      int a[ ] = new int[2];\r\n      System.out.println(a[5]);\r\n    } [b]catch [/b](Exception e) {\r\n      System.out.println(\"An error occurred\");\r\n    }\r\n  }\r\n}\r\n//Outputs \"An error occurred\"[/code]\r\nWithout the [b]try/catch[/b] block this code should crash the program, as a[5] does not exist.\r\n[note]Notice the ([b]Exception e)[/b] statement in the [b]catch [/b]block - it is used to catch all possible Exceptions.[/note]"}]}}