{"lesson":{"id":2178,"name":"The equals() method","type":0,"mode":1,"videoID":"kk4e1kjzb7Q","tags":"equals","quizzes":[{"id":4308,"number":1,"videoStart":108.0,"videoEnd":228.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106617,"text":"true","isCorrect":false,"properties":{}},{"id":106618,"text":"false","isCorrect":true,"properties":{}},{"id":106619,"text":"undefined","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\nclass A {\r\n private int x;\t\r\n public static void main(String[ ] args) {\r\n   A a = new A();\r\n   a.x = 5;\r\n   A b = new A();\r\n   b.x = 5;\r\n   System.out.println(a == b);\t\t\t\r\n }\r\n}","textContent":"[h1]Comparing Objects[/h1]\r\n\r\nRemember that when you create objects, the variables store references to the objects.\r\nSo, when you compare objects using the equality testing operator ([b]==[/b]), it actually compares the references and not the object values.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"785\"]class Animal {\r\n  String name;\r\n  Animal(String n) {\r\n    name = n;\r\n  }\r\n}\r\n\r\nclass MyClass {\r\n  public static void main(String[ ] args) {\r\n    Animal a1 = new Animal(\"Robby\");\r\n    Animal a2 = new Animal(\"Robby\");\r\n    System.out.println([b]a1 == a2[/b]);\r\n  }\r\n}\r\n//Outputs [b]false[/b][/code]\r\n[note]Despite having two objects with the same name, the equality testing returns false, because we have two different objects (two different references or memory locations).[/note]"},{"id":4309,"number":2,"videoStart":228.0,"videoEnd":454.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100278,"text":"boolean","isCorrect":true,"properties":{}},{"id":100279,"text":"return","isCorrect":true,"properties":{}},{"id":100280,"text":"A","isCorrect":true,"properties":{}},{"id":100281,"text":"equals","isCorrect":true,"properties":{}},{"id":100282,"text":"b","isCorrect":false,"properties":{}},{"id":100283,"text":"new","isCorrect":false,"properties":{}},{"id":100284,"text":"x","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to check whether the two objects of type A are semantically equal.\r\n[!raw!]\r\nclass A {\r\n   private int x;\r\n   public {0} equals(Object o) {\r\n    {1} ((A)o).x == this.x;\r\n   }\t\r\n   public static void main(String[ ] args)  {\r\n    A a = new A();\r\n    a.x = 9;\r\n    A b = new {2}();\r\n    b.x = 5;\r\n    System.out.println(a.{3}(b));\r\n   }\r\n}","textContent":"[h1][b]equals()[/b][/h1]\r\n\r\nEach object has a predefined [b]equals[/b]() method that is used for semantical equality testing.\r\nBut, to make it work for our classes, we need to override it and check the conditions we need.\r\nThere is a simple and fast way of generating the equals() method, other than writing it manually.\r\nJust right click in your class, go to [b]Source[/b]->[b]Generate hashCode() and equals()...[/b] [img id=\"2439\" width=\"100%\"]\r\nThis will automatically create the necessary methods. [code format=\"java\" ]class Animal {\r\n  String name;\r\n  Animal(String n) {\r\n    name = n;\r\n  }\r\n  @Override\r\n  public int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\r\n    return result;\r\n  }\r\n  @Override\r\n  public boolean [b]equals[/b](Object obj) {\r\n    if (this == obj)\r\n      return true;\r\n    if (obj == null)\r\n      return false;\r\n    if (getClass() != obj.getClass())\r\n      return false;\r\n    Animal other = (Animal) obj;\r\n    if (name == null) {\r\n      if (other.name != null)\r\n        return false;\r\n    } else if (!name.equals(other.name))\r\n      return false;\r\n    return true;\r\n  }\r\n}[/code]\r\nThe automatically generated hashCode() method is used to determine where to store the object internally. Whenever you implement [b]equals[/b], you MUST also implement [b]hashCode[/b].\r\nWe can run the test again, using the [b]equals [/b]method:[code format=\"java\" codeId=\"786\"]public static void main(String[ ] args) {\r\n  Animal a1 = new Animal(\"Robby\");\r\n  Animal a2 = new Animal(\"Robby\");\r\n  System.out.println(a1.equals(a2));\r\n}\r\n//Outputs [b]true[/b][/code]\r\n[note]You can use the same menu to generate other useful methods, such as [b]getters [/b]and [b]setters [/b]for your class attributes.[/note]"}]}}