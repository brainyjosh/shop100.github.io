{"lesson":{"id":2163,"name":"Inheritance","type":0,"mode":1,"videoID":"9JpNY-XAseg","tags":"inheritance","quizzes":[{"id":4269,"number":1,"videoStart":5.0,"videoEnd":222.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":95501,"text":"extends","isCorrect":false,"properties":{"prefix":"class Car ","postfix":" Vehicle { }"}}],"question":"Fill in the blank to inherit the Car class from the Vehicle class.","textContent":"[h1]Inheritance[/h1]\r\n\r\n[b]Inheritance [/b]is the process that enables one class to acquire the properties (methods and variables) of another. With inheritance, the information is placed in a more manageable, hierarchical order.\r\n\r\nThe class inheriting the properties of another is the [b]subclass[/b] (also called derived class, or child class); the class whose properties are inherited is the [b]superclass[/b] (base class, or parent class).\r\n\r\nTo inherit from a class, use the [b]extends [/b]keyword. \r\nThis example shows how to have the class [b]Dog [/b]to inherit from the class [b]Animal[/b]. [code format=\"java\"]class Dog [b]extends[/b] Animal {\r\n // some code\r\n}[/code]\r\n[note]Here, Dog is the [b]subclass[/b], and Animal is the [b]superclass[/b].[/note]"},{"id":4270,"number":2,"videoStart":222.0,"videoEnd":330.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99592,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99593,"text":"extends","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":99594,"text":"dog","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to inherit from the Animal class and call its method in main.\r\n[!raw!]\r\nclass Animal {\r\n   public void makeSound() {\r\n   System.out.println(''Hi'');\r\n   }\r\n}\r\n{0} Dog {1} Animal {\r\n}\r\nclass A {\r\n   public static void main(String args[ ]) {\r\n   Dog dog = new Dog();\r\n   {2}.makeSound();\r\n   }\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nWhen one class is inherited from another class, it inherits all of the superclass' [b]non-private[/b] variables and methods.\r\n[b]Example:[/b] [code format=\"java\" ]class Animal {\r\n  protected int legs;\r\n  public void eat() {\r\n    System.out.println(\"Animal eats\");\r\n  }\r\n}\r\n\r\nclass Dog [b]extends [/b]Animal {\r\n  Dog() {\r\n    [b]legs [/b]= 4;\r\n  }\r\n}[/code]\r\nAs you can see, the Dog class inherits the legs variable from the Animal class.\r\nWe can now declare a Dog object and call the [b]eat [/b]method of its superclass:[code format=\"java\" codeId=\"772\"]class MyClass {\r\n  public static void main(String[ ] args) {\r\n    Dog d = new Dog();\r\n    [b]d.eat();[/b]\r\n  }\r\n}[/code]\r\n[note]Recall the [b]protected [/b]access modifier, which makes the members visible only to the subclasses.[/note]"},{"id":4422,"number":3,"videoStart":330.0,"videoEnd":530.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106033,"text":"True","isCorrect":false,"properties":{}},{"id":106034,"text":"False","isCorrect":true,"properties":{}}],"question":"Private methods are inherited from the super class.","textContent":"[h1]Inheritance[/h1]\r\n\r\nConstructors are not member methods, and so are not inherited by subclasses.\r\nHowever, the constructor of the superclass is called when the subclass is instantiated.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"773\"]class A {\r\n  public A() {\r\n    System.out.println(\"New A\");\r\n  }\r\n}\r\nclass B extends A {\r\n  public B() {\r\n    System.out.println(\"New B\");\r\n  }\r\n}\r\n\r\nclass Program {\r\n  public static void main(String[ ] args) {\r\n      B obj = new B();\r\n  }\r\n}\r\n\r\n/*Outputs\r\n\"New A\"\r\n\"New B\"\r\n*/[/code]\r\n[note]You can access the superclass from the subclass using the [b]super [/b]keyword. \r\nFor example, [b]super.var[/b] accesses the var member of the superclass.[/note]"}]}}