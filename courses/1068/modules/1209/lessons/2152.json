{"lesson":{"id":2152,"name":"Methods","type":0,"mode":1,"videoID":"-IJ5izjbWIA","tags":"methods","quizzes":[{"id":4241,"number":1,"videoStart":22.0,"videoEnd":103.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99559,"text":"hello()","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to call the method \"hello\" from main:\r\n[!raw!]\r\npublic static void main(String[ ] args) {\r\n   {0};\r\n}\r\nstatic void hello() {\r\n   System.out.println(\"hi\");\r\n}","textContent":"[h1]Methods[/h1]\r\n\r\nMethods define [b]behavior[/b]. A method is a collection of statements that are grouped together to perform an operation. System.out.println() is an example of a method. \r\nYou can define your own methods to perform your desired tasks. \r\nLet's consider the following code: [code format=\"java\" codeId=\"752\"]class MyClass {\r\n\r\n  static void [b]sayHello()[/b] {\r\n    System.out.println(\"Hello World!\");\r\n  }\r\n\r\n  public static void main(String[ ] args) {\r\n[b]    sayHello();[/b]\r\n  }\r\n}\r\n// Outputs \"Hello World!\"[/code]\r\nThe code above declares a method called \"sayHello\", which prints a text, and then gets called in [b]main[/b].\r\n[note]To call a method, type its name and then follow the name with a set of parentheses.[/note]"},{"id":4242,"number":2,"videoStart":103.0,"videoEnd":177.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":99560,"text":"one","isCorrect":false,"properties":{}},{"id":99561,"text":"only two","isCorrect":false,"properties":{}},{"id":99562,"text":"as many as you want","isCorrect":true,"properties":{}}],"question":"How many times can you call a method?","textContent":"[h1]Calling Methods [/h1]\r\n\r\nYou can call a method as many times as necessary. \r\nWhen a method runs, the code jumps down to where the method is defined, executes the code inside of it, then goes back and proceeds to the next line.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"753\"]class MyClass {\r\n  \r\n  static void sayHello() {\r\n    System.out.println(\"Hello World!\");\r\n  }\r\n\r\n  public static void main(String[ ] args) {\r\n    sayHello();\r\n    sayHello();\r\n    sayHello();\r\n  }\r\n}\r\n\r\n// Hello World!\r\n// Hello World!\r\n// Hello World![/code]"},{"id":4243,"number":3,"videoStart":177.0,"videoEnd":282.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100233,"text":"16","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What output results from this code?\r\npublic static void main(String[ ] args) {\r\n   doSomething(4);\r\n}\t \r\nstatic void doSomething(int x) {\r\n   System.out.println(x*x); \r\n}","textContent":"[h1]Method Parameters[/h1]\r\n\r\nYou can also create a method that takes some data, called [b]parameters[/b], along with it when you call it. Write parameters within the method's parentheses.\r\nFor example, we can modify our [b]sayHello[/b]() method to take and output a [b]String [/b]parameter.[code format=\"java\" codeId=\"754\"]class MyClass {\r\n  \r\n  static void sayHello([b]String name[/b]) {\r\n    System.out.println(\"Hello \" + [b]name[/b]);\r\n  }\r\n\r\n  public static void main(String[ ] args) {\r\n    sayHello(\"David\");\r\n    sayHello(\"Amy\");\r\n  }\r\n\r\n}\r\n// Hello David\r\n// Hello Amy[/code]\r\nThe method above takes a String called [b]name [/b]as a parameter, which is used in the method's body. Then, when calling the method, we pass the parameter's value inside the parentheses.\r\nMethods can take multiple, comma-separated parameters.\r\n[note]The advantages of using methods instead of simple statements include the following:\r\n- [b]code reuse[/b]: You can write a method once, and use it multiple times, without having to rewrite the code each time.\r\n- [b]parameters[/b]: Based on the parameters passed in, methods can perform various actions.[/note]"}]}}