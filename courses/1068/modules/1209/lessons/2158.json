{"lesson":{"id":2158,"name":"Value & Reference Types","type":0,"mode":1,"videoID":"eRfvgSvf-mM","tags":"value-types reference-types","quizzes":[{"id":4257,"number":1,"videoStart":34.0,"videoEnd":174.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100248,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\npublic static void main(String[ ] args) {\r\n   int x = 4;\r\n   square(x);\r\n   System.out.println(x);\t\t\r\n}\r\nstatic void square(int x) {\r\n   x = x*x;\r\n}","textContent":"[h1]Value Types[/h1]\r\n\r\n[b]Value types[/b] are the basic types, and include byte, short, int, long, float, double, boolean, and char.\r\nThese data types store the values assigned to them in the corresponding memory locations.\r\nSo, when you pass them to a method, you basically operate on the variable's [b]value[/b], rather than on the variable itself.\r\n[b]Example:[/b] [code format=\"java\" codeId=\"761\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    [b]int x = 5;[/b]\r\n    addOneTo([b]x[/b]);\r\n    System.out.println([b]x[/b]);       \r\n  }\r\n  static void addOneTo(int num) {\r\n    num = num + 1;\r\n  }\r\n}\r\n// Outputs \"[b]5[/b]\"[/code]\r\n[note]The method from the example above takes the [b]value [/b]of its parameter, which is why the original variable is not affected and 5 remains as its value.[/note]"},{"id":4258,"number":2,"videoStart":174.0,"videoEnd":401.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":100249,"text":"10","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\npublic static void main(String[ ] args) {\r\n  Person p = new Person();\r\n  p.setAge(25);\r\n  change(p);\r\n  System.out.println(p.getAge());\r\n}\r\nstatic void change(Person p) {\r\n  p.setAge(10);\r\n}","textContent":"[h1]Reference Types\u000b[/h1]\r\n\r\n[b][/b]A [b]reference type[/b] stores a reference (or address) to the memory location where the corresponding data is stored.\r\nWhen you create an object using the constructor, you create a reference variable.\r\nFor example, consider having a [b]Person[/b] class defined: [code format=\"java\" codeId=\"762\"]public class MyClass {\r\n  public static void main(String[ ] args) {\r\n    Person j;\r\n    j = new Person(\"John\");\r\n    j.setAge(20);\r\n    celebrateBirthday(j);\r\n    System.out.println(j.getAge());\r\n  }\r\n  static void celebrateBirthday(Person p) {\r\n    p.setAge(p.getAge() + 1);\r\n  }\r\n}\r\n//Outputs \"[b]21[/b]\"[/code]\r\nThe method [b]celebrateBirthday [/b]takes a Person object as its parameter, and increments its attribute. \r\nBecause [b]j[/b] is a reference type, the method affects the object itself, and is able to change the actual value of its attribute.\r\n[note][b]Arrays [/b]and [b]Strings [/b]are also reference data types.[/note]"}]}}