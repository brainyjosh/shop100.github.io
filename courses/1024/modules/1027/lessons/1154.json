{"lesson":{"id":1154,"name":"Adding Methods","type":0,"mode":1,"videoID":"6lQEtgFnZTY","tags":"objects methods","quizzes":[{"id":1466,"number":1,"videoStart":4.0,"videoEnd":225.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106442,"text":"The current object","isCorrect":true,"properties":{}},{"id":106443,"text":"The name of the given method ","isCorrect":false,"properties":{}},{"id":106444,"text":"The name of the web page","isCorrect":false,"properties":{}}],"question":"The \"this\" keyword in the method means:","textContent":"[h1]Methods[/h1]\r\n\r\n[b]Methods [/b]are functions that are stored as object properties. \r\n\r\nUse the following syntax to create an object method:[code format=\"js\" ]methodName : function() { code lines }[/code]\r\nAccess an object method using the following syntax:[code format=\"js\" ]objectName.methodName()[/code]\r\nA method is a function, belonging to an object. It can be referenced using the [b]this [/b]keyword.\r\nThe [b]this [/b]keyword is used as a reference to the current object, meaning that you can access the objects properties and methods using it.\r\n\r\nDefining methods is done inside the constructor function.\r\n\r\n[b]For Example:[/b] [code format=\"js\" codeId=\"692\"]function person(name, age) {\r\n  this.name = name;  \r\n  this.age = age;\r\n[b]  this.changeName = function (name) {\r\n    this.name = name;\r\n  }[/b]\r\n}\r\n\r\nvar p = new person(\"David\", 21);\r\n[b]p.changeName(\"John\");[/b]\r\n//Now p.name equals to \"John\"[/code]In the example above, we have defined a method named [b]changeName [/b]for our person, which is a function, that takes a parameter [b]name [/b]and assigns it to the [b]name [/b]property of the object. \r\n[b]this.name[/b] refers to the name property of the object.\r\n[note]The [b]changeName [/b]method changes the object's [b]name [/b]property to its argument.[/note]"},{"id":1467,"number":2,"videoStart":226.0,"videoEnd":347.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106446,"text":"mymethod","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Please associate the \"testData\" constructor function below with a method called \"mymethod\":\r\n[!raw!]\r\nfunction testData (first, second) {\r\n  this.first = first;\r\n  this.second = second;\r\n  this.checkData = {0};\r\n}","textContent":"[h1]Methods[/h1]\r\n\r\nYou can also define the function outside of the constructor function and associate it with the object.[code format=\"js\" ]function person(name, age) {\r\n  this.name= name;  \r\n  this.age = age;\r\n [b] this.yearOfBirth = bornYear;[/b]\r\n}\r\nfunction bornYear() {\r\n  return 2016 - this.age;\r\n}[/code]\r\nAs you can see, we have assigned the object's [b]yearOfBirth [/b]property to the [b]bornYear [/b]function.\r\nThe [b]this [/b]keyword is used to access the [i]age [/i]property of the object, which is going to call the method.\r\n[note]Note that it's not necessary to write the function's parentheses when assigning it to an object.[/note]"},{"id":1468,"number":3,"videoStart":347.0,"videoEnd":518.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106455,"text":"The \"this\" keyword","isCorrect":true,"properties":{}},{"id":106456,"text":"Just the name of the property","isCorrect":false,"properties":{}},{"id":106457,"text":"The \"var\" keyword","isCorrect":false,"properties":{}},{"id":106458,"text":"The function's name","isCorrect":false,"properties":{}}],"question":"In order to use the object's properties within a function, use:","textContent":"[h1]Methods[/h1]\r\n\r\nCall the method as usual.[code format=\"js\" codeId=\"693\"]function person(name, age) {\r\n  this.name= name;  \r\n  this.age = age;\r\n  this.yearOfBirth = bornYear;\r\n}\r\nfunction bornYear() {\r\n  return 2016 - this.age;\r\n}\r\n\r\nvar p = new person(\"A\", 22);\r\ndocument.write([b]p.yearOfBirth()[/b]);\r\n// Outputs 1994[/code]\r\n[note]Call the method by the [b]property name[/b] you specified in the constructor function, rather than the function name.[/note]"}]}}