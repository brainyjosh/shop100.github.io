{"lesson":{"id":1866,"name":"Types of Join","type":0,"mode":1,"videoID":"cXQOSQo_RDI","tags":"join","quizzes":[{"id":3626,"number":1,"videoStart":30.5,"videoEnd":133.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96398,"text":"it","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96399,"text":"as","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96400,"text":"ct","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to select item names and names of customers who bought the items. Use custom names to shorten the statement.\r\n[!raw!]\r\nSELECT ct.name, {0}.name\r\nFROM customers {1} ct, items AS it \r\nWHERE it.seller_id={2}.id;","textContent":"[h1]Custom Names[/h1]\r\n\r\nCustom names can be used for tables as well. You can shorten the join statements by giving the tables \"nicknames\":[code format=\"sql\"]SELECT ct.ID, ct.Name, ord.Name, ord.Amount\r\nFROM customers [b]AS ct[/b], orders[b] AS ord[/b]\r\nWHERE ct.ID=ord.Customer_ID\r\nORDER BY ct.ID;[/code]\r\n[note]As you can see, we shortened the table names as we used them in our query.[/note]"},{"id":3627,"number":2,"videoStart":134.0,"videoEnd":256.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96401,"text":"SELECT students.name, universities.name","isCorrect":false,"properties":{}},{"id":96402,"text":"FROM students, universities","isCorrect":false,"properties":{}},{"id":96403,"text":"WHERE","isCorrect":false,"properties":{}},{"id":96404,"text":"students.university_id=universities.id","isCorrect":false,"properties":{}}],"question":"Rearrange the query to select the names of students and the names of the universities where those students study.","textContent":"[h1]Types of Join[/h1]\r\n\r\nThe following are the types of JOIN that can be used in MySQL:\r\n[b]- INNER[/b] JOIN\r\n[b]- LEFT[/b] JOIN\r\n[b]- RIGHT[/b] JOIN\r\n\r\nINNER JOIN is equivalent to JOIN. It returns rows when there is a match between the tables.\r\n\r\n[b]Syntax:[/b] [code format=\"sql\"]SELECT column_name(s)\r\nFROM table1[b] INNER JOIN[/b] table2 \r\n[b]ON [/b]table1.column_name=table2.column_name;[/code]\r\n[note]Note the [b]ON [/b]keyword for specifying the inner join condition.[/note]\r\nThe image below demonstrates how INNER JOIN works: [img id=\"2833\" width=\"100%\"]\r\n[note]Only the records matching the join condition are returned.[/note]"},{"id":3628,"number":3,"videoStart":257.0,"videoEnd":334.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97920,"text":"OUTER","isCorrect":true,"properties":{}},{"id":97921,"text":"ON","isCorrect":true,"properties":{}},{"id":97922,"text":"AS","isCorrect":false,"properties":{}},{"id":97923,"text":"FROM","isCorrect":false,"properties":{}},{"id":97924,"text":"RIGHT","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to outer join the table ''items'' with ''customers''.\r\n[!raw!]\r\nSELECT customers.name, items.name\r\nFROM customers\r\nLEFT {0} JOIN items \r\n{1} customers.id=seller_id","textContent":"[h1]LEFT JOIN[/h1]\r\n\r\nThe [b]LEFT JOIN[/b] returns all rows from the left table, even if there are no matches in the right table. \r\n\r\nThis means that if there are no matches for the [b]ON [/b]clause in the table on the right, the join will still return the rows from the first table in the result.\r\n\r\nThe basic syntax of LEFT JOIN is as follows: [code format=\"sql\" ]SELECT table1.column1, table2.column2...\r\nFROM table1 [b]LEFT OUTER JOIN[/b] table2\r\n[b]ON [/b]table1.column_name = table2.column_name;[/code]\r\n[note]The [b]OUTER [/b]keyword is optional, and can be omitted.[/note]\r\nThe image below demonstrates how LEFT JOIN works: [img id=\"2834\" width=\"100%\"]\r\nConsider the following tables:\r\n[b]customers:[/b] [img id=\"2835\" width=\"100%\"]\r\n[b]items:[/b][img id=\"2993\" width=\"100%\"]  \r\nThe following SQL statement will return all [b]customers[/b], and the [b]items [/b]they might have: [code format=\"sql\" ]SELECT customers.Name, items.Name \r\nFROM customers [b]LEFT OUTER JOIN[/b] items \r\n[b]ON [/b]customers.ID=items.Seller_id;[/code]\r\n[b]Result:[/b][img id=\"2994\" width=\"100%\"]  \r\nThe result set contains all the rows from the left table and matching data from the right table. \r\n[note]If no match is found for a particular row, [b]NULL [/b]is returned.[/note]"},{"id":3629,"number":4,"videoStart":335.0,"videoEnd":452.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":97933,"text":"SELECT students.names, universities.names","isCorrect":false,"properties":{}},{"id":97934,"text":"FROM students","isCorrect":false,"properties":{}},{"id":97935,"text":"RIGHT OUTER JOIN universities","isCorrect":false,"properties":{}},{"id":97936,"text":"ON students.university_id=universities.id","isCorrect":false,"properties":{}}],"question":"Rearrange the code to select student names and all university names (use right join to show all university names).","textContent":"[h1]RIGHT JOIN[/h1]\r\n\r\nThe [b]RIGHT JOIN[/b] returns all rows from the right table, even if there are no matches in the left table. [img id=\"2838\" width=\"100%\"]\r\nThe basic syntax of RIGHT JOIN is as follows: [code format=\"sql\" ]SELECT table1.column1, table2.column2...\r\nFROM table1 [b]RIGHT OUTER JOIN[/b] table2\r\nON table1.column_name = table2.column_name;[/code]\r\n[note]Again, the [b]OUTER [/b]keyword is optional, and can be omitted.[/note]\r\nConsider the same example from our previous lesson, but this time with a RIGHT JOIN: [code format=\"sql\" ]SELECT customers.Name, items.Name FROM customers\r\nRIGHT JOIN items ON customers.ID=items.Seller_id;[/code]\r\n[b]Result:[/b] [img id=\"2995\" width=\"100%\"]  \r\nThe RIGHT JOIN returns all the rows from the right table (items), even if there are no matches in the left table (customers).\r\n[note]There are other types of joins in the SQL language, but they are not supported by MySQL.[/note]"}]}}