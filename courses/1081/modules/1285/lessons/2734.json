{"lesson":{"id":2734,"name":"Structs","type":0,"mode":1,"videoID":null,"tags":"structs","quizzes":[{"id":5751,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113462,"text":"Struct","isCorrect":true,"properties":{}},{"id":113463,"text":"Box","isCorrect":true,"properties":{}},{"id":113464,"text":"new","isCorrect":false,"properties":{}},{"id":113465,"text":"class","isCorrect":false,"properties":{}},{"id":113466,"text":"module","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to create a Struct Box, that has two attributes, width and height, and then instantiate an object from it.\r\n[!raw!]\r\nBox = {0}.new(:h, :w)\r\nb = {1}.new(8, 5)","textContent":"[h1]Structs[/h1]\r\n\r\nIn some cases, there is no need for defining a fully structured class. Sometimes we need just a group of attributes bundled together (for example, defining points in a 2D space using x and y coordinates).\r\nWe could, of course, create a separate class with all the instance variables and methods, but Ruby provides a shortcut to bundle a number of attributes together called a [b]Struct[/b].[code format=\"rb\" ]Point = [b]Struct[/b].new(:x, :y)[/code]\r\nIn the code above, Point is a Struct, having two attribute accessors: x and y. Struct automatically creates its initialize method for the defined accessors, so now we can use Points just like a class, instantiating different objects from it.[code format=\"rb\" codeId=\"1083\"]origin = Point.new(0, 0)\r\ndest = Point.new(15, 42)\r\n\r\nputs dest.y  # 42[/code]\r\n[note][b]Struct [/b]is a built-in Ruby class and makes it shorter to define simple classes, accessors, and their initialize methods.[/note]"},{"id":5753,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113469,"text":"require","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113470,"text":"ostruct","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to make the code work:\r\n[!raw!]\r\n{0} \"{1}\"\r\ndisplay = OpenStruct.new\r\ndisplay.height = 9\r\ndisplay.width =  16","textContent":"[h1]OStruct[/h1]\r\n\r\n[b]OpenStruct [/b](or OStruct) acts very similarly to Struct, except that it doesn't have a defined list of attributes.\r\nTo use OStruct, we need to include the corresponding library using the [b]require [/b]statement. [code format=\"rb\" codeId=\"1084\"][b]require \"ostruct\"[/b]\r\n\r\nperson = [b]OpenStruct[/b].new\r\nperson.name = \"John\"\r\nperson.age = 42\r\nperson.salary = 250\r\n\r\nputs person.name  # John[/code]\r\nAs you can see, we can define any number of attributes on the fly.\r\n[note]OStruct isn't as fast as Struct, but it is more flexible.[/note]"},{"id":5754,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113473,"text":"True","isCorrect":true,"properties":{}},{"id":113474,"text":"False","isCorrect":false,"properties":{}}],"question":"Struct is faster than OStruct.","textContent":"[h1]OStruct[/h1]\r\n\r\nWe can also initialize an OStruct using a hash.\r\n[b]For example:[/b][code format=\"rb\" codeId=\"1085\"]require \"ostruct\"\r\n\r\nperson = OpenStruct.new(name:\"John\", age:42, salary:250)\r\n\r\nputs person.name  # John[/code]\r\n[note]Struct and OStruct provide a simple way to create data structures that have the behavior of a class.[/note]"}]}}