{"lesson":{"id":2772,"name":"Default and Optional Parameters","type":0,"mode":1,"videoID":null,"tags":"methods parameters","quizzes":[{"id":5710,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113121,"text":"10","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113122,"text":"=","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113123,"text":"end","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a method with two parameters with default values 10 and 42 respectfully.\r\n[!raw!]\r\ndef doSmth(x={0}, y{1}42)\r\n  puts x*y\r\n{2}","textContent":"[h1]Default Parameters[/h1]\r\n\r\nYou can also set default values for the parameters, so that the method will still work even if you do not provide all the arguments.\r\n[b]For example:[/b] [code format=\"rb\" ]def sum(a, b=8)\r\n  puts a+b\r\nend[/code]\r\nNow our parameter b has a default value of 8.\r\nIf we pass just one argument, the method will use the value 8 as the second argument: [code format=\"rb\" codeId=\"1045\"]x = 5\r\nsum(x)\r\n# outputs 13[/code]\r\n[note]We can also pass two arguments as before, and the method will work as expected. The default value only comes into play when no value for that argument is provided.[/note]"},{"id":5712,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113125,"text":"25","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\ndef demo x=4, y=2\r\n  puts x**y\r\nend\r\ndemo 5","textContent":"[h1]Parameters[/h1]\r\n\r\nYou can also leave off the parentheses when using methods.\r\nFor example, sum(x, y) can be written as sum x, y. [code format=\"rb\" codeId=\"1046\"]def sum x, y\r\n  puts x+y\r\nend\r\n\r\nsum 6, 9[/code]\r\n[note]This leads to more fluid reading of code, but sometimes it can be confusing.[/note]\r\nLet's create a program that prompts the user to enter a name and then outputs a greeting based on the input. [code format=\"rb\" codeId=\"1053\"]def greet(name=\"\")\r\n  if name==\"\"\r\n    puts \"Greetings!\"\r\n  else\r\n    puts \"Welcome, #{name}\"\r\n  end\r\nend\r\n\r\ngreet(gets.chomp)[/code]\r\nWe defined a method called greet that takes one parameter and outputs a message based on that parameter. \r\nThen we called the greet method passing user input as the argument.\r\n[note]Reminder: [b]gets.chomp[/b] is used to take user input and strip the newline at the end of the input.[/note]"},{"id":5711,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113134,"text":"how","isCorrect":false,"properties":{}},{"id":113135,"text":"are","isCorrect":false,"properties":{}},{"id":113136,"text":"you","isCorrect":true,"properties":{}},{"id":113137,"text":"nothing","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\ndef say(*words)\r\n  puts words[-1]\r\nend\r\nsay(\"how\",\"are\",\"you\")","textContent":"[h1]Optional Parameters[/h1]\r\n\r\nYou can also define methods that take any number of arguments using the following syntax:[code format=\"rb\" codeId=\"1047\"]def someMethod[b](*p)\r\n[/b]  puts p\r\nend\r\n\r\nsomeMethod(25, \"hello\", true)[/code]\r\nNow you can pass any number of arguments to the method.\r\nIn the code above [b]p[/b] is an array. When you pass arguments to the method, they become elements of [b]p[/b].\r\n[note]If you call the method without any arguments, the array [b]p[/b] will be empty.[/note]\r\nThis technique allows optional parameters for a method, for example: [code format=\"rb\" ]def myMethod(a, b, *c)\r\n  #some code\r\nend[/code]\r\n[note][b]myMethod [/b]has two mandatory parameters and an optional one. Therefore, you can pass two or more arguments to the method.[/note]"}]}}