{"lesson":{"id":2725,"name":"Recursion","type":0,"mode":1,"videoID":null,"tags":"recursion","quizzes":[{"id":5717,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113182,"text":"3","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\ndef fib(num)\r\n  if num < 2\r\n    num\r\n  else\r\n    fib(num-1) + fib(num-2)\r\n  end\r\nend\r\nputs fib(4)","textContent":"[h1]Recursion[/h1]\r\n\r\nAnother way of creating loops is [b]recursion[/b]. It involves the concept of methods calling themselves. It is used to solve problems that can be broken up into easier sub-problems of the same type.\r\n\r\nA classic example of a method that is implemented recursively is the [b]factorial [/b]method, which finds the product of all positive integers below a specified number. \r\nFor example, 5! (5 factorial) is 5 * 4 * 3 * 2 * 1 (120). To implement this recursively, notice that 5! = 5 * 4!, 4! = 4 * 3!, 3! = 3 * 2!, and so on. Generally, n! = n * (n-1)!. \r\nFurthermore, 1! = 1. This is known as the [b]base case[/b], as it can be calculated without performing any more factorials. \r\nBelow is a recursive implementation of the factorial method. [code format=\"rb\" codeId=\"1056\"]def fact(n)\r\n  if n<= 1\r\n    1\r\n  else\r\n    n * fact( n - 1 )\r\n  end\r\nend\r\n\r\nputs fact(5)\r\n# outputs 120[/code]\r\nThe [b]if n<=1[/b] block acts as the base case. The base case is the exit condition of the recursion.\r\n[note]Ruby is fast! Try to run the above code for a larger number and see the output.[/note]"},{"id":5718,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113192,"text":"a base case","isCorrect":true,"properties":{}},{"id":113193,"text":"a return statement","isCorrect":false,"properties":{}},{"id":113194,"text":"an infinite loop","isCorrect":false,"properties":{}}],"question":"A valid recursion needs:","textContent":"[h1]Recursion[/h1]\r\n\r\nRecursive methods can become infinite, just like infinite loops. These often occur when you forget to implement the base case.\r\nBelow is an incorrect version of the factorial method. It has no base case: [code format=\"rb\" codeId=\"1057\"]def fact(n)\r\n  n * fact( n - 1 )\r\nend\r\n\r\nputs fact(5)\r\n# outputs \"stack level too deep (SystemStackError)\"[/code]\r\n[note]Remember, an important key concept with recursion is to define and include the base case that makes the recursion stop.[/note]"}]}}