{"lesson":{"id":2722,"name":"Variable Scope","type":0,"mode":1,"videoID":null,"tags":"variables","quizzes":[{"id":5705,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113170,"text":"8","isCorrect":true,"properties":{}},{"id":113171,"text":"5","isCorrect":false,"properties":{}},{"id":113172,"text":"error","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\ndef change\r\n  x = 5\r\nend\r\nx = 8\r\nchange\r\nputs x","textContent":"[h1]Variable Scope[/h1]\r\n\r\nScope defines where in a program a variable is accessible. \r\nRuby has four types of variable scope: [b]local[/b], [b]global[/b], [b]instance [/b]and [b]class[/b].\r\n\r\n[b]Local variables [/b]are local to the code construct in which they are declared. For example, a local variable declared in a method or within a loop cannot be accessed outside of that loop or method. Local variable names must begin with either an underscore or a lowercase letter. \r\n[b]For example:[/b] [code format=\"rb\" ]def calc(x)\r\n  y = 2\r\n  puts x*y\r\nend[/code]\r\nIn the above code [b]x[/b] and [b]y[/b] are both local variables. They are accessible only inside the [b]calc [/b]method.\r\nIf we try to access them outside of the method we will get an error: [code format=\"rb\" codeId=\"1054\"]def calc(x)\r\n  y = 2\r\n  puts x*y\r\nend\r\n\r\nputs y\r\n# output: \"undefined local variable or method 'y' \"[/code]\r\nThe same applies to loops and iterators: [code format=\"rb\" ]arr = [1, 2, 3]\r\narr.each {|x| puts x}[/code]\r\nx is a local variable available only in the iterator block.\r\n[note]You can have different variables with the same name in different scopes.[/note]"},{"id":5706,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113175,"text":"$","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113176,"text":"$name","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a global variable called name and output it.\r\n[!raw!]\r\n{0}name = \"Rob\"\r\nputs {1}","textContent":"[h1]Global Scope[/h1]\r\n\r\n[b]Global [/b]variables in Ruby are accessible from anywhere in the Ruby program, regardless of where they are declared. Global variable names are prefixed with a [b]dollar sign[/b] ($). \r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1055\"][b]$x[/b] = 42\r\n\r\ndef change\r\n  $x = 8\r\nend\r\n\r\nchange\r\nputs $x\r\n# outputs 8[/code]\r\nAs you can see the [b]$x[/b] global variable is accessible in the whole program.\r\n[note]Use of global variables is strongly discouraged. The problem with global variables is that, not only are they visible anywhere in the code, but they can also be changed from anywhere in the application. This can result in hard to find bugs.[/note]"},{"id":5707,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113179,"text":"8","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\n$x = 2\r\ndef change(x)\r\n  $x = x\r\nend\r\nchange(8)\r\nputs $x","textContent":"[h1]Variable Scope[/h1]\r\n\r\nSo why does scope exist? Why couldn't all variables be accessible everywhere so we wouldn't have to care about their scope?\r\nFirst of all, there are naming issues: if you have a big program, you'd have to give all of your variables unique names to avoid conflicts. Imagine keeping track of thousands of variable names.\r\nThen, there are access issues: it's very hard to track who changes what when everyone has the ability to do so. \r\nScope makes the program more predictable and secure.\r\n[note]The other two types of scope in Ruby are [b]instance [/b]and [b]class[/b]. We will learn about them in the next module.[/note]"}]}}