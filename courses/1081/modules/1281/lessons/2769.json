{"lesson":{"id":2769,"name":"Array Manipulations","type":0,"mode":1,"videoID":null,"tags":"arrays","quizzes":[{"id":5885,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117915,"text":"7","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\na = [3, 7, 5]\r\nb = [1, 3]\r\nres = a - b\r\nputs res[0]","textContent":"[h1]Combining Arrays[/h1]\r\n\r\nYou can add two arrays together: [code format=\"rb\" codeId=\"1021\"]a = [1, 2, 3]\r\nb = [4, 5]\r\n\r\nres = a + b\r\nprint res # [1, 2, 3, 4, 5][/code]\r\nYou can also subtract arrays, which will result in the first array removing any elements that also appear in second array. [code format=\"rb\" codeId=\"1022\"]a = [1, 2, 3, 4, 5]\r\nb = [2, 4, 5, 6]\r\n\r\nres = a - b\r\nprint res #[1, 3][/code]\r\n[note]The elements of an array can be duplicated using the * operator and an integer value. For example: [1, 2, 3] * 3 results in [1, 2, 3, 1, 2, 3, 1, 2, 3][/note]"},{"id":5886,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117918,"text":"|","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":117919,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to join the arrays, removing all duplicates, and then output the third element of the resulting array.\r\n[!raw!]\r\nx = [1, 2, 3]\r\ny = [3, 4, 5]\r\nres = x {0} y\r\nputs res[{1}]","textContent":"[h1]Boolean Operations[/h1]\r\n\r\nThe [b]&[/b] operator returns a new array containing the elements common to the two arrays, with no duplicates. [code format=\"rb\" codeId=\"1023\"]a = [2, 3, 7, 8]\r\nb = [2, 7, 9]\r\n\r\nprint a & b # [2, 7][/code]\r\nThe[b] |[/b] operator returns a new array by joining the arrays and removing duplicates. [code format=\"rb\" codeId=\"1024\"]a = [2, 3, 7, 8]\r\nb = [2, 7, 9]\r\n\r\nprint a | b # [2, 3, 7, 8, 9][/code]"},{"id":5887,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117921,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\narr = [2, 4, 6]\r\narr.reverse!\r\nputs arr[1]","textContent":"[h1]Moving Elements[/h1]\r\n\r\nThe [b]reverse [/b]method returns a new array containing the original array elements in reverse order.[code format=\"rb\" codeId=\"1025\"]arr = [5, 3, 8]\r\nres = arr.[b]reverse[/b]\r\nprint res # [8, 3, 5][/code]\r\nYou can also reverse the array in place using the [b]reverse![/b] method:[code format=\"rb\" codeId=\"1026\"]arr = [1, 2, 3]\r\nprint arr.[b]reverse![/b][/code]"},{"id":5888,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113044,"text":"arr","isCorrect":true,"properties":{}},{"id":113045,"text":"uniq!","isCorrect":true,"properties":{}},{"id":113046,"text":"size","isCorrect":true,"properties":{}},{"id":113047,"text":"remove","isCorrect":false,"properties":{}},{"id":113048,"text":"freeze","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to add \"z\" to the array, remove all duplicates, and output the number of its elements.\r\n[!raw!]\r\narr = [\"a\", \"b\", \"a\"]\r\n{0} << \"z\"\r\narr.{1}\r\nputs arr.{2} ","textContent":"[h1]Array Methods[/h1]\r\n\r\nThere are a number of other useful methods available for manipulating arrays.\r\nHere are some of the most used ones:\r\narray.[b]length [/b]or array.[b]size [/b]returns the number of elements in array.\r\narray.[b]sort [/b]returns a new array with the elements sorted\r\narray.[b]uniq [/b]returns a new array with duplicate values removed from array.\r\narray.[b]uniq![/b] removes duplicates in place.\r\narray.[b]freeze [/b]safeguards the array, preventing it from being modified.\r\narray.[b]include?[/b](obj) returns true if obj is present in array, false otherwise.\r\narray.[b]min [/b]returns the element with the minimum value.\r\narray.[b]max [/b]returns the element with the maximum value.\r\n[note]Most of the methods also work for [b]strings[/b], which can be thought of as arrays of characters.[/note]\r\nA [b]for [/b]loop is one way to iterate over an array of elements: [code format=\"rb\" codeId=\"1027\"]arr = [\"a\", \"b\", \"c\"]\r\n[b]for [/b]x [b]in [/b]arr\r\n  puts \"Value: #{x}\"\r\n[b]end[/b][/code]\r\nThis will loop through all the elements of the array and output them one per line.\r\n[note]Ruby has a more elegant way of iterating over array elements. You will learn about [b]iterators [/b]in the coming lessons.[/note]"}]}}