{"lesson":{"id":2708,"name":"Hashes & Symbols","type":0,"mode":1,"videoID":null,"tags":"hashes symbols","quizzes":[{"id":5645,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113052,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113053,"text":"=>","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113054,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a hash.\r\n[!raw!]\r\nm = {0}\"Jan\"{1}1, \"Feb\"=>2, \"Dec\"=>12{2}","textContent":"[h1]Hashes[/h1]\r\n\r\n[b]Hashes [/b](sometimes known as associative arrays, maps, or dictionaries) are similar to arrays in that they are an indexed collection of elements. \r\nHowever, while you index arrays with integers, you can index a hash with [b]anything[/b].\r\nThat is very useful when you want to map values, for example: \"name\" => \"David\". Here, \"name\" is the index (also called the [b]key[/b]) which is mapped to the value \"David\". So, hashes represent [b]key=>value[/b] pairs.\r\nA hash is created with comma separated keys and values inside [b]curly brackets[/b]: [code format=\"rb\" codeId=\"1028\"]ages = { \"David\" => 28, \"Amy\"=> 19, \"Rob\" => 42 }\r\n\r\nputs ages[\"Amy\"] \r\n# outputs 19[/code]\r\nAs you can see, the values are accessed using the same index syntax as with an array.\r\n[note]Compared with arrays, hashes have one significant advantage: they can use any object as an index, even an array. For example: { [1,\"jan\"] => \"January\" }[/note]"},{"id":5890,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113058,"text":"{\"key\"=>value}","isCorrect":false,"properties":{}},{"id":113059,"text":":key","isCorrect":true,"properties":{}},{"id":113060,"text":"key","isCorrect":false,"properties":{}}],"question":"Which of the following is a symbol?","textContent":"[h1]Symbols[/h1]\r\n\r\nIn the previous example we used strings as keys for the hash, but Ruby has a more elegant and faster way for creating and accessing hash indexes than using strings.\r\n[b]Symbols [/b]are similar to strings, but they are immutable, meaning that they cannot be changed.\r\nA [b]symbol [/b]is created using a [b]colon [/b]and a name, for example:[code format=\"rb\" ]a =[b] :id[/b][/code]\r\nIn the code above [b]:id [/b]is a symbol. You can also think of [b]:id[/b] as meaning the name of the variable id, and plain id as meaning the value of the variable.\r\n[note]So why use symbols instead of strings? Using symbols not only saves time when doing comparisons, but also saves memory, because they are only stored once.[/note]"},{"id":5891,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113061,"text":"=>","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113062,"text":":name","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a valid hash and output \"Ruby\".\r\n[!raw!]\r\ncourse = {:name=>\"Ruby\", :score{0}97}\r\nputs course[{1}]","textContent":"[h1]Hashes & Symbols[/h1]\r\n\r\nUses of symbols includes using them as hash keys.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1029\"]h = {[b]:name[/b]=>\"Dave\", [b]:age[/b]=>28, [b]:gender[/b]=>\"male\"}\r\n\r\nputs h[[b]:age[/b]][/code]\r\nIn the code above, symbols are used as keys for our hash. \r\nA shorter way of writing the same code as above is the following:[code format=\"rb\" codeId=\"1030\"]h = {name:\"Dave\", age:28, gender:\"male\"}\r\n\r\nputs h[:age][/code]\r\n[note]In other programming languages hashes are called associative arrays or dictionaries.[/note]"},{"id":5892,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113064,"text":"b","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nh = {a:\"b\", b:\"a\"}\r\nh = h.invert\r\nres = h.keys\r\nputs res[0]","textContent":"[h1]Hashes[/h1]\r\n\r\nThere are useful methods available for manipulating hashes:\r\nhash.[b]delete[/b](key) removes the key-value pair from hash by key.\r\nhash.[b]index[/b](value) returns the key for the given value in hash, nil if no matching value is found.\r\nhash.[b]invert [/b]creates a new hash, reversing keys and values from hash; that is, in the new hash, the keys from hash become values and values become keys.\r\nhash.[b]keys [/b]returns a new array with keys from hash. \r\nhash.[b]values [/b]returns a new array containing all the values of hash.\r\nhash.[b]length [/b]returns the length of hash as an integer. \r\n\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1031\"]car = {brand:\"BMW\", year:2016, color:\"red\", length:205}\r\ncar.delete(:length)\r\nputs car.values\r\n\r\n# outputs:\r\n# BMW\r\n# 2016\r\n# red[/code]"}]}}