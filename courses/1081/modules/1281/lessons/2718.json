{"lesson":{"id":2718,"name":"Iterators","type":0,"mode":1,"videoID":null,"tags":"iterators","quizzes":[{"id":5688,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113079,"text":"each","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113080,"text":"|z|","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113081,"text":"end","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to calculate the product of all elements in the array.\r\n[!raw!]\r\narr = [8, 11, 4]\r\nres = 1\r\narr.{0} do {1}\r\n  res *= z\r\n{2}","textContent":"[h1]Iterators[/h1]\r\n\r\nAs we have seen in the previous lessons, we can loop over arrays and hashes using [b]for [/b]loops. \r\nRuby provides more elegant looping methods called [b]iterators[/b]. Iterators are used to create loops. \r\nThe [b]each [/b]iterator is one of the most used ones: [code format=\"rb\" codeId=\"1034\"]arr = [2, 4, 6]\r\n\r\narr.[b]each [/b]do |x|\r\n  puts x\r\nend[/code]\r\nThe syntax might seem confusing at first, but you just need to remember the [b]pipe [/b]symbols around the variable. The [b]each [/b]iterator loops through all elements of the array and assigns the corresponding element to the variable inside the pipes with each iteration. This variable is called the[b] block parameter[/b].\r\nWe can, for example, calculate the sum of all elements:[code format=\"rb\" codeId=\"1035\"]arr = [2, 4, 6]\r\nsum = 0\r\narr.each do |x|\r\n  sum += x\r\nend\r\n\r\nputs sum # 12[/code]"},{"id":5689,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113084,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113085,"text":"val","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to calculate the sum of all values in the hash.\r\n[!raw!]\r\nh = {a:8, b:9, c:18}\r\nsum = 0\r\nh.each {0} |key, val| sum+={1}}\r\nputs sum","textContent":"[h1]Iterators[/h1]\r\n\r\nThe [b]each [/b]iterator can also be used with hashes:[code format=\"rb\" codeId=\"1036\"]sizes = {svga:800, hd:1366, uhd:3840}\r\n\r\nsizes.[b]each [/b]do |key, value|\r\n  puts \"#{key}=>#{value}\"\r\nend[/code]\r\n[note]In the example above, [b]key [/b]and [b]value [/b]are variables that get assigned to the corresponding values of the hash elements at each iteration. You can use any name for your variables.[/note]\r\nThe [b]do [/b]and [b]end [/b]keywords specify a [b]block [/b]of code in Ruby. \r\nAfter the opening of the block, we have the block parameters within pipes ( | | ).\r\nRuby provides a shorthand way of writing blocks: you can use [b]curly braces[/b] to start and end code blocks.\r\nSo the above example can be written shorter as: [code format=\"rb\" codeId=\"1038\"]sizes = {svga:800, hd:1366, uhd:3840}\r\n\r\nsizes.each { |key, value| puts \"#{key}=>#{value}\" }[/code]\r\n[note]The [b]each [/b]iterator can also be used on ranges. \r\nFor strings, you can use the [b]each_char [/b]iterator to iterate over the characters.[/note]"},{"id":5690,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":108860,"text":"9","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nx = 8\r\nx /= 2\r\ny = 1\r\nx.times {y+=2}\r\nputs y","textContent":"[h1]Iterators[/h1]\r\n\r\nThere are also iterators available for numbers.\r\nThe [b]times [/b]iterator executes a loop the specified number of times: [code format=\"rb\" codeId=\"1037\"]10.[b]times [/b]do\r\n  puts \"Hi\"\r\nend[/code]\r\n[note]The code above will print \"Hi\" 10 times.[/note]"}]}}