{"lesson":{"id":2775,"name":"Class Methods & Variables","type":0,"mode":1,"videoID":null,"tags":"classes methods","quizzes":[{"id":5905,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113307,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113308,"text":"self","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113309,"text":".sqr","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a class method called \"sqr\" for the Calc class and call it with the argument 8.\r\n[!raw!]\r\n{0} Calc\r\n  def {1}.sqr x\r\n    x*x\r\n  end\r\nend\r\nputs Calc{2} 8","textContent":"[h1]Class Methods[/h1]\r\n\r\nClass methods are methods we can call directly on the class itself, without having to instantiate any objects.\r\nThis can be useful when there is no logical need to create an object of the class, such as when a class is used to group similar methods and functionality (like mathematical operations). \r\nOne example is a [b]Math [/b]class that includes a [b]square [/b]method for returning the square of its parameter. There is no logical need to create an object of the [b]Math [/b]class just to call the method. This is where class methods come into play.\r\nClass methods are defined using the [b]self [/b]keyword: [code format=\"rb\" ]class Person\r\n  def [b]self.info[/b]\r\n    puts \"A Person\"\r\n  end\r\nend[/code]\r\nNow, the method is a class method and can be called directly from the class, without the need of an object: [code format=\"rb\" codeId=\"1065\"][b]Person.info[/b]\r\n# outputs \"A Person\"[/code]\r\n[note]Remember, when used inside of instance methods, [b]self [/b]is representing the current instance (object) of that class.\r\nWhen defining class methods, [b]self [/b]is referring to the class itself, and not to an instance of the class.[/note]"},{"id":5906,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113314,"text":"@@number","isCorrect":false,"properties":{"prefix":"","postfix":"=2"}}],"question":"Fill in the blank to define a class variable called \"number\" and assign it the value 2.","textContent":"[h1]Class Variables[/h1]\r\n\r\nClass variables are accessible to every object of a class. A class variable belongs to the class, not the objects.\r\nYou declare a class variable using [b]two @ signs[/b], for example [b]@@name[/b].\r\nWe can, for example, keep count of all Person objects created using a class variable: [code format=\"rb\" codeId=\"1066\"]class Person\r\n  [b]@@count = 0[/b]\r\n  def initialize\r\n    @@count += 1\r\n  end\r\n  def self.get_count\r\n    @@count\r\n  end\r\nend\r\n\r\np1 = Person.new\r\np2 = Person.new\r\n\r\nputs Person.get_count\r\n# outputs 2[/code]\r\nIn the code above, [b]@@count[/b] is a class variable. Since the [b]initialize [/b]method is called for every object that is created, incrementing the [b]@@count[/b] variable will keep track of the number of objects created.\r\nWe also defined a class method called [b]get_count [/b]to return the value of the class variable.\r\nIn the code above, we have created two objects of the Person class so the value of the [b]@@count [/b]variable is 2.\r\n[note]Class variables are usually used when you need information about the class, not the individual objects.[/note]"},{"id":5907,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113320,"text":"Test","isCorrect":true,"properties":{}},{"id":113321,"text":"ID","isCorrect":true,"properties":{}},{"id":113322,"text":"const","isCorrect":false,"properties":{}},{"id":113323,"text":"<<","isCorrect":false,"properties":{}},{"id":113324,"text":"self","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to output the constant ID of the Test class.\r\n[!raw!]\r\nputs {0}::{1}","textContent":"[h1]Class Constants[/h1]\r\n\r\nA class can also contain constants. Remember, constant variables do not change their value and start with a capital letter. It is common to have uppercase names for constants, as in: [code format=\"rb\" ]class Calc\r\n  PI = 3.14\r\nend[/code]\r\nYou can access constants using the class name, followed by [b]two colon symbols[/b] (::) and the constant name, for example: [code format=\"rb\" codeId=\"1067\"]puts Calc::PI\r\n# outputs 3.14[/code]"}]}}