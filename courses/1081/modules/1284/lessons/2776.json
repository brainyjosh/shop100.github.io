{"lesson":{"id":2776,"name":"Accessor Methods","type":0,"mode":1,"videoID":null,"tags":"accessors","quizzes":[{"id":5903,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113287,"text":"attr_reader","isCorrect":true,"properties":{}},{"id":113288,"text":":age","isCorrect":true,"properties":{}},{"id":113289,"text":"@age","isCorrect":false,"properties":{}},{"id":113290,"text":"attr_writer","isCorrect":false,"properties":{}},{"id":113291,"text":"def","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to automatically generate the getter accessor for the @age variable:\r\n[!raw!]\r\nclass Dog\r\n  {0} {1}\r\nend","textContent":"[h1]Accessors[/h1]\r\n\r\nImagine having a lot of instance variables and their setter and getter methods. The code would be really long.\r\nRuby has a built-in way to automatically create these getter and setter methods using the [b]attr_accessor [/b]method.\r\nThe [b]attr_accessor [/b]method takes a symbol of the instance variable name as an argument, which it uses to create getter and setter methods. \r\nWe can do the following: [code format=\"rb\" codeId=\"1063\"]class Person\r\n\r\n  [b]attr_accessor :name[/b]\r\n  \r\n  def initialize(name)\r\n    @name = name\r\n  end\r\nend\r\n\r\np = Person.new(\"David\")\r\np.name = \"Bob\"\r\nputs p.name[/code]\r\nThat one line replaced two accessor method definitions. \r\nRuby also provides the [b]attr_reader [/b]and [b]attr_writer [/b]methods in case only a getter or setter method is needed for the instance variable.\r\n[note]We can pass multiple symbols to the attr_accessor, attr_reader and attr_writer methods. For example: [b]attr_accessor :name, :height, :weight[/b][/note]"},{"id":5904,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113300,"text":"2","isCorrect":false,"properties":{}},{"id":113301,"text":"4","isCorrect":false,"properties":{}},{"id":113302,"text":"error","isCorrect":false,"properties":{}},{"id":113303,"text":"8","isCorrect":true,"properties":{}}],"question":"What is the output of this code?\r\nclass Test\r\n  def initialize x\r\n    self.calc x\r\n  end\r\n  def calc y\r\n    puts y*4\r\n  end\r\nend\r\nt = Test.new 2","textContent":"[h1]Accessors[/h1]\r\n\r\nThe accessor methods can also be called inside the class by using the [b]self [/b]keyword.\r\n[b]For example:[/b] [code format=\"rb\" codeId=\"1064\"]class Person\r\n  attr_accessor :name, :age\r\n  def initialize(name, age)\r\n    @name = name\r\n    @age = age\r\n  end\r\n  def change(n, a)\r\n    [b]self[/b].name = n\r\n    [b]self[/b].age = a\r\n  end\r\n  def show_info\r\n    puts \"#{[b]self[/b].name} is #{[b]self[/b].age}\"\r\n  end\r\nend\r\n\r\np = Person.new(\"David\", 28)\r\np.change(\"Bob\", 42)\r\np.show_info\r\n\r\n# outputs \"Bob is 42\"[/code]\r\nIn the code above, we define a method called [b]change [/b]that changes the instance variables via their accessor methods. The [b]show_info [/b]method outputs the values of the instance variables.\r\n[note][b]self [/b]represents the current object and is used to call the instance methods and accessors of the object. \r\nOne of the benefits of using [b]self [/b]is for disambiguation. For example, if you have a variable and a method both called [b]name[/b], [b]self.name[/b] would make it clear that you are referring to the method.[/note]"}]}}