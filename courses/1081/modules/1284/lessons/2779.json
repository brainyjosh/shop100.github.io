{"lesson":{"id":2779,"name":"A Simple Game","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":5912,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113401,"text":"protected","isCorrect":true,"properties":{}},{"id":113402,"text":"attr_accessor","isCorrect":true,"properties":{}},{"id":113403,"text":"private","isCorrect":false,"properties":{}},{"id":113404,"text":"class","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to make the accessor methods protected.\r\n[!raw!]\r\nclass Enemy\r\n  {0}\r\n  {1} :name, :age\r\nend","textContent":"[h1]A Simple Game[/h1]\r\n\r\nObject Oriented Programming is very useful when it comes to creating complex applications, such as games.\r\nLet's create a simple fighting game, where two opponents will fight until one of them loses. \r\nWe start by creating our Player class: [code format=\"rb\" ]class Player\r\n  attr_accessor :name, :health, :power\r\n  def initialize(n, h, pow)\r\n    @name = n\r\n    @health = h\r\n    @power = pow\r\n  end\r\n  def isAlive\r\n    @health > 0\r\n  end\r\n  def hit(opponent)\r\n    opponent.health -= self.power\r\n  end\r\n  def to_s\r\n    \"#{name}: Health: #{health}, Power: #{power}\"\r\n  end\r\nend[/code]\r\nThe Player class has 3 instance variables, [b]name[/b], [b]health [/b]and [b]power[/b], and 3 instance methods:\r\n[b]isAlive [/b]shows whether the player is still alive.\r\n[b]hit[/b] hits the opponent (decreases the opponent's health by the amount of player's power)\r\n[b]to_s [/b]outputs the player information.\r\n[note]We have also defined getter and setter accessors for the instance variables using the [b]attr_accessor [/b]method.[/note]"},{"id":5913,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113408,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\na, b = 8, 3\r\nwhile a > 2\r\n  a -= b\r\nend\r\nputs a","textContent":"[h1]A Simple Game[/h1]\r\n\r\nWith the Player class defined, we can now define a method to make two opponents fight:[code format=\"rb\" ]def fight(p1, p2)\r\n  while p1.isAlive && p2.isAlive\r\n    p1.hit(p2)\r\n    p2.hit(p1)\r\n    show_info(p1, p2)\r\n  end\r\n    \r\n  if p1.isAlive \r\n    puts \"#{p1.name} WON!\" \r\n  elsif p2.isAlive\r\n    puts \"#{p2.name} WON!\" \r\n  else\r\n    puts \"TIE!\"\r\n  end\r\nend\r\n\r\ndef show_info(*p)\r\n  p.each { |x| puts x}\r\nend[/code]\r\nThe [b]fight [/b]method uses a loop to make the players hit each other until the [b]isAlive [/b]method returns false for one of them. After each iteration, the information of both players is output to the screen using the [b]show_info[/b] method we defined.\r\n[note]Once the loop is over (meaning one of the opponents has lost), we check and output the corresponding result.[/note]"},{"id":5914,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113417,"text":"rand","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":113418,"text":"100","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to generate a random number in the range 1 to 100.\r\n[!raw!]\r\nnum = 1+{0}({1})","textContent":"[h1]A Simple Game[/h1]\r\n\r\nAll that is left is to create two Player objects and call the fight method. To make the game interesting, we can use random values for health and power of our players using the [b]rand [/b]method, which returns a random value in the range of 0 to its argument. [code format=\"rb\" ]p1 = Player.new(\"Player 1\", 1+rand(100), 1+rand(20))\r\np2 = Player.new(\"Player 2\", 1+rand(100), 1+rand(20))\r\n\r\n#show Player info\r\nshow_info(p1, p2)\r\n\r\nputs \"LETS FIGHT!\"\r\nfight(p1, p2)[/code]\r\nWe used 100 as the maximum value for health, and 20 as a maximum value for power. We add 1 to the rand method to avoid the value 0.\r\nNow, each time you run the program, two Players with random health and power will be created and will fight!\r\n[b]The final code:[/b] [code format=\"rb\" codeId=\"1074\"]class Player\r\n  attr_accessor :name, :health, :power\r\n  def initialize(n, h, pow)\r\n    @name = n\r\n    @health = h\r\n    @power = pow\r\n  end\r\n  def isAlive\r\n    @health > 0\r\n  end\r\n  def hit(opponent)\r\n    opponent.health -= self.power\r\n  end\r\n  def to_s\r\n    \"#{name}: Health: #{health}, Power: #{power}\"\r\n  end\r\nend\r\n\r\ndef fight(p1, p2)\r\n  while p1.isAlive && p2.isAlive\r\n    p1.hit(p2)\r\n    p2.hit(p1)      \r\n    show_info(p1, p2)\r\n  end\r\n    \r\n  if p1.isAlive \r\n    puts \"#{p1.name} WON!\" \r\n  elsif p2.isAlive\r\n    puts \"#{p2.name} WON!\" \r\n  else\r\n    puts \"TIE!\"\r\n  end\r\nend\r\n\r\ndef show_info(*p)\r\n  p.each { |x| puts x}\r\nend\r\n\r\n#initialize Players\r\nputs \"PLAYERS INFO\"\r\np1 = Player.new(\"Player 1\", 1+rand(100), 1+rand(20))\r\np2 = Player.new(\"Player 2\", 1+rand(100), 1+rand(20))\r\n\r\n#show Player info\r\nshow_info(p1, p2)\r\n\r\nputs \"LETS FIGHT!\"\r\nfight(p1, p2)[/code]\r\n[note]This was just a simplified version.\r\nYou can easily create different subclasses of players, add more properties, define weapons, get user input to make different decisions, and so on.[/note]"}]}}