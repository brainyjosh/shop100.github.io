{"lesson":{"id":2777,"name":"super","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":5910,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113367,"text":"superclass","isCorrect":true,"properties":{}},{"id":113368,"text":"subclass","isCorrect":false,"properties":{}},{"id":113369,"text":"current class","isCorrect":false,"properties":{}}],"question":"super calls the corresponding method of the:","textContent":"[h1]super[/h1]\r\n\r\nRuby has a built-in method called [b]super[/b], which is used to call methods from the superclass.\r\nWhen you call [b]super [/b]in a method of the subclass, the method of the same name gets called from the superclass.\r\n[b]For example:[/b][code format=\"rb\" ]class Animal\r\n  def speak\r\n    puts \"Hi\"\r\n  end\r\nend\r\n\r\nclass Cat < Animal\r\n  def speak\r\n    [b]super[/b]\r\n    puts \"Meow\"\r\n  end\r\nend[/code]\r\n[b]super [/b] calls the speak method of the Animal class.\r\nNow, if we create an object of class Cat and call its speak method, we will get the following: [code format=\"rb\" codeId=\"1072\"]c = Cat.new\r\nc.speak\r\n# Outputs\r\n# Hi\r\n# Meow[/code]\r\n[note]The use of [b]super [/b]allows us to remove duplicate code by using and extending the behavior of the superclass in our subclasses.[/note]"},{"id":5911,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":113372,"text":"4","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nclass A\r\n  def initialize(x)\r\n    puts x/2\r\n  end\r\nend\r\nclass B < A\r\n  def initialize(y)\r\n    super(y+2)\r\n  end\r\nend\r\nob = B.new(6)","textContent":"[h1]super[/h1]\r\n\r\n[b]super [/b]is more commonly used in the [b]initialize [/b]method.\r\nFor example, our superclass has a initialize method that takes one argument and initializes an instance variable:[code format=\"rb\" ]class Animal\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\nend[/code]\r\nNow, we need a subclass Cat that also has an [b]@age[/b] instance variable, and we need to define its own [b]initialize[/b] method. Instead of repeating ourselves, and setting the name instance variable in the Cat class, we can use its superclass with the [b]super [/b]method as follows: [code format=\"rb\" ]class Cat  < Animal\r\n  def initialize(name, age)\r\n    [b]super(name)[/b]\r\n    @age = age\r\n  end\r\n  def to_s\r\n    \"#{@name} is #{@age} years old.\"\r\n  end\r\nend[/code]\r\nWe passed one of the arguments to the [b]super [/b]method, which calls the [b]initialize [/b]method of the Animal class and sets the [b]@name[/b] instance variable.\r\nNow we can instantiate an object and output its info:[code format=\"rb\" codeId=\"1073\"]c = Cat.new(\"Bob\", 3)\r\nputs c\r\n\r\n# outputs \"Bob is 3 years old.\"[/code]\r\n[note]In the example we used super for a simple assignment. Imagine having a complex program with complex calculations and operations being carried out. That's where the real benefits of \"not repeating yourself\" comes in, and calling the super where applicable is one way of achieving it.[/note]"}]}}