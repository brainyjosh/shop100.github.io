{"lesson":{"id":2371,"name":"Connect the UI to Code","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4862,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59912,"text":"actions","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"The additional connections to define interactions in the app are called outlets and...","textContent":"[h1]View Controllers[/h1]\r\n\r\nElements in a storyboard are linked to source code. It's important to understand the relationship between storyboard and code.\r\n\r\nIn a storyboard, a scene represents one screen of content and, typically, one [b]view controller[/b]. A view controller implements the app's behavior, managing a single content view with its hierarchy of subviews. \r\nXcode has already created one, [b]ViewController.swift[/b], which was connected to the scene you're currently working on in your storyboard. In the future, as you add more scenes, you'll make this connection yourself in the [b]Identity inspector[/b]. The Identity inspector lets you edit properties of an object in your storyboard, in relation to that object's identity, such as the object's class. [img id=\"1017\" width=\"50%\"]\r\nAt runtime, your storyboard will create an instance of [b]ViewController[/b], your custom view controller subclass. The app screen will show the UI defined in this scene in your storyboard and any behavior defined in [i]ViewController.swift[/i].\r\n[note]The scene is connected to [i]ViewController.swift[/i], but there are other connections to be made, as well. To define interaction in your app, your view controller source code needs to be able to communicate with your storyboard views. This is accomplished by defining additional connections - called [b]outlets [/b]and [b]actions -[/b] that go between the views in the storyboard and the view controller source code files.[/note]"},{"id":4863,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96752,"text":"weak","isCorrect":false,"properties":{"prefix":"","postfix":" var myLabel: UILabel!"}}],"question":"Define a property for a label element that at some point in its life can have no value.","textContent":"[h1]Creating Outlets[/h1]\r\n\r\n[b]Outlets [/b]offer a way to reference the interface objects that you added to your storyboard from source code files. For example, you'll need to create outlets for the text field and label them in your UI to be able to reference them.\r\n\r\nTo connect the text field to the [i]ViewController.swift [/i]code, open your storyboard, called [b]Main.storyboard[/b].\r\nClick the [b]Assistant [/b]button in the Xcode toolbar near the top right corner of Xcode to open the assistant editor. \r\n[img id=\"1018\" width=\"80%\"]\r\n[i]ViewController.swift[/i] displays in the editor on the right.\r\nIn your storyboard, select the text field. While holding the [b]Control [/b]button, drag from the text field on your [i]canvas [/i]to the code display in the editor on the right, stopping the drag at the line below the class definition. [img id=\"1020\" width=\"100%\"] \r\nA dialog appears. For [b]Name[/b], type the desired name for your text field. In our example, we've named it [i]nameTextField[/i]. [img id=\"1019\" width=\"70%\"] \r\nClick [b]Connect[/b].\r\n\r\nXcode adds code to [i]ViewController.swift[/i] that will store a pointer to the text field and configures the storyboard to set up that connection:[code format=\"swift\"]@IBOutlet weak var [b]nameTextField[/b]: UITextField![/code]\r\nThe [b]weak [/b]keyword means that it's possible for that property to have no value (to be [b]nil[/b]) at some point in its life. The rest of the declaration declares a variable of type [b]UITextField [/b]named [i]nameTextField[/i].\r\n\r\nRepeat the process for the label, and name it [i]nameLabel[/i].\r\n[note]You now have a way to refer to the interface elements from code. Now, you'll need to define a user-initiated event that triggers interaction between those elements.[/note]"},{"id":4864,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96753,"text":"method","isCorrect":true,"properties":{}},{"id":96754,"text":"class","isCorrect":false,"properties":{}},{"id":96755,"text":"struct","isCorrect":false,"properties":{}},{"id":96756,"text":"dictionary","isCorrect":false,"properties":{}}],"question":"The action connection is a...","textContent":"[h1]Define an Action to Perform[/h1]\r\n\r\nAn [b]action [/b]is a piece of code that is linked to an event that can take place at some point in your app. When that event takes place, the code is executed. An action method can be declared to accomplish anything from manipulating a piece of data to updating the UI. \r\nAn action is created in the same way as an outlet. That is, [b]control-drag[/b] from a particular object in your storyboard to a view controller file.\r\nLet's create an action for our button, to set the label's text to the text the user inputs in the text field.\r\n\r\nControl-drag from the [b]Submit[/b] button on your canvas to the code display in the editor on the right.\r\nIn the dialog that appears, for Connection, select [b]Action[/b].\r\nFor [b]Name[/b], type a name, for example: [i]setLabelText[/i].\r\nFor [b]Type[/b], select [b]UIButton[/b].\r\nYour dialog should look like this:  [img id=\"1021\" width=\"70%\"]\r\nClick [b]Connect[/b].\r\n[note]The  [b]Type [/b]field value defaults to [b]AnyObject[/b], a type used in Swift to describe an object that can belong to any class.[/note]\r\nXcode adds the necessary code to ViewController.swift to set up the action method. [code format=\"swift\"]@IBAction func [b]setLabelText[/b](sender: UIButton) {\r\n\r\n}[/code]\r\nThe [b]sender [/b]parameter points to the object responsible for triggering the action - in this case, a button. The rest of the declaration declares a method named [i]setLabelText[/i].[i][/i]\r\n[note]The [b]IBAction [/b]attribute indicates that the method is an action to which you can connect from your storyboard in Interface Builder.[/note]"},{"id":4865,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96757,"text":".text","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96758,"text":"=","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to assign \"Some value\" to the label.\r\n[!raw!]\r\nmyLbl{0} {1} \"Some value\"","textContent":"[h1]Defining an Action[/h1]\r\n\r\nIn the method implementation, add this line of code: [code format=\"swift\"]nameLabel.text = nameTextField.text[/code]\r\nThe above code sets the label's [i]text [/i]property to the text field's [i]text [/i]property.We refer to the label and text field by the names we defined while creating the corresponding outlets.\r\n\r\nNow, run your app on the Simulator, type a name in the text field and press the Submit button. The typed name should appear as the Label. [img id=\"1022\" width=\"50%\"]\r\n[note]Congratulations! You've created your first action![/note]"}]}}