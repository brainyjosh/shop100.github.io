{"lesson":{"id":2379,"name":"Implement Edit","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4885,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":60257,"text":"Identifier","isCorrect":true,"properties":{}},{"id":60258,"text":"Name","isCorrect":false,"properties":{}},{"id":60259,"text":"Instance","isCorrect":false,"properties":{}},{"id":60260,"text":"Module","isCorrect":false,"properties":{}}],"question":"In Attributes inspector, which field allows for setting a name to use to reference the object?","textContent":"[h1]Allow Editing[/h1]\r\n\r\nNext, give users the ability to edit an existing item. When the user taps on an item, the item scene will pop up with information that the user can edit and save.\r\nOpen your storyboard and select the [b]table view cell[/b].\r\nControl-drag from the table view cell to the item scene.\r\nChoose [i]show [/i]from the [b]Selection Segue menu[/b].\r\nSelect the newly created segue and, in the Attributes inspector, type [i]ShowDetail [/i]in the [b]Identifier [/b]field. Press Return. [img id=\"1055\" width=\"50%\"]\r\n[note]Run the app. In the list scene, you should be able to tap a table view cell to navigate to the item scene. The content area in the scene is blank.[/note]"},{"id":4886,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96785,"text":"prepare","isCorrect":false,"properties":{"prefix":"func ","postfix":"ForSegue()"}}],"question":"Which function passes data between view controllers?","textContent":"[h1]Allow Editing [/h1]\r\n\r\nThere are now two segues to transition to the same scene, so you need to have a way to identify whether the user is adding a new item or editing an existing one.\r\nYou can differentiate the segues based on the identifiers you assigned to them earlier: [b]AddItem [/b]and [b]ShowDetail[/b].\r\nOpen [i]ItemTableViewController.swift[/i].\r\nFind and uncomment the [b]prepareForSegue[/b] method: [code format=\"swift\"]override func [b]prepareForSegue[/b](segue: UIStoryboardSegue, sender: AnyObject?) {\r\n   // Get the new view controller using segue.destinationViewController.\r\n   // Pass the selected object to the new view controller.\r\n}[/code]\r\nEdit the code as follows:[code format=\"swift\"]override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\r\n  if segue.identifier == \"ShowDetail\" {\r\n    let detailVC = segue.destinationViewController as! ViewController\r\n        \r\n    // Get the cell that generated this segue.\r\n    if let selectedCell = sender as? ItemTableViewCell {\r\n      let indexPath = tableView.indexPathForCell(selectedCell)!\r\n      let selectedItem = items[indexPath.row]\r\n      detailVC.item = selectedItem\r\n     }\r\n   }\r\n  else if segue.identifier == \"AddItem\" {\r\n    \r\n   }\r\n}[/code]\r\nThe code passes the value of the clicked cell to the ViewController.\r\nNow, we need to update the ViewController for the item.\r\nOpen [i]ViewController.swift [/i]and edit the [b]viewDidLoad[/b]() method. [code format=\"swift\"]override func viewDidLoad() {\r\n  super.viewDidLoad()\r\n\r\n[b]  if let item = item {\r\n     nameTextField.text   = item.name\r\n  }[/b]\r\n\r\n}[/code]\r\nThis code sets the name in ViewController to display data from the item property if it's non-nil. This only happens when editing an existing item.\r\n[note]Run your app. You should be able to click a table view cell and navigate to the item scene, which is prepopulated with data about the item. However, if you click Save instead of overwriting the existing item, the app adds a new item.[/note]"},{"id":4887,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96786,"text":"append","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to add an item to an array.\r\n[!raw!]\r\narray.{0}(item)","textContent":"[h1]Allow Editing[/h1]  \r\n\r\nWe need to update the implementation of [b]unwindToList[/b]() to add or replace items:\r\nModify the method:[code format=\"swift\"]@IBAction func unwindToList(sender: UIStoryboardSegue) {\r\n let srcViewCon = sender.sourceViewController as? ViewController\r\n let item = srcViewCon?.item\r\n if  (srcViewCon != nil && item?.name != \"\") {\r\n [b]  if let selectedIndexPath = tableView.indexPathForSelectedRow {\r\n    [/b] // Update an existing meal.\r\n     items[selectedIndexPath.row] = item!\r\n     tableView.reloadRowsAtIndexPaths([selectedIndexPath], withRowAnimation: .None)\r\n[b]   }[/b]\r\n[b]   else {[/b]\r\n[b]    [/b] // Add a new meal.\r\n     let newIndexPath = NSIndexPath(forRow: items.count, inSection: 0)\r\n     items.append(item)\r\n     tableView.insertRowsAtIndexPaths([newIndexPath], withRowAnimation: .Bottom)\r\n[b]    }[/b]\r\n  }\r\n}\r\n[/code]\r\nThis code determines whether a row in the table view is selected. If it is, that means a user tapped one of the table view cells to edit an item. In other words, this [b]if [/b]statement gets executed when an existing item is being edited.\r\n[note]Run your app and ensure that the [b]Save [/b]functionality is working properly, both for new and existing items.[/note]"},{"id":4888,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96787,"text":"pop","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Remove the view controller from the navigation controller.\r\n[!raw!]\r\nnavigationController!. \r\n      {0}ViewControllerAnimated(true)","textContent":"[h1]Cancel[/h1]\r\n\r\nIn order to work for the Edit mode, the [b]Cancel [/b]button requires some additional modification. To do this, find the [b]cancel()[/b] action method in [i]ViewController.swift[/i], and modify it to look like this:[code format=\"swift\"]@IBAction func cancel(sender: UIBarButtonItem) {\r\n   [b]let isInAddMode = presentingViewController is UINavigationController[/b]\r\n    \r\n   [b]if[/b] isInAddMode {\r\n     dismissViewControllerAnimated(true, completion: nil)\r\n   }\r\n   [b]else[/b] {\r\n     [b]navigationController!.popViewControllerAnimated(true)[/b]\r\n   }\r\n}[/code]\r\nThis creates a Boolean value that indicates whether the view controller presenting this scene is of type [i]UINavigationController[/i]. As indicated by the constant name [b]isInAddMode[/b], this means that the Add button was used to present the scene. This is because the scene is embedded in its own navigation controller when presented in this manner, meaning that navigation controller presents it.\r\n[note]Run the app to be sure that the Cancel button in Add and Edit modes is working as it should. [/note]"}]}}