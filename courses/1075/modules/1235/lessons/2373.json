{"lesson":{"id":2373,"name":"A ToDo List App","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4867,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59947,"text":"UITableView","isCorrect":true,"properties":{}},{"id":59948,"text":"UITableClass","isCorrect":false,"properties":{}},{"id":59949,"text":"UIScroll","isCorrect":false,"properties":{}},{"id":59950,"text":"UIItems","isCorrect":false,"properties":{}}],"question":"Which class is specifically designed to display a scrolling list of items in iOS?","textContent":"[h1]Creating a ToDo List App[/h1]\r\n\r\nNow that you've become familiar with the basic concepts involved in creating iOS apps, let's create a [b]real-world ToDo List App[/b]. In the app, there will be a list of to-do items, which can be removed and edited. New items can also be added to the list.\r\nWe have modified our scene from the previous lessons, so that it has the following UI, which represents the add/edit page for a ToDo item: [img id=\"1024\" width=\"100%\"]\r\nWe have just changed the stack's alignment, renamed the label and button, changed the placeholder for the text field, and removed the action from the button. \r\n[note]You can see and modify the connections (outlets and actions) by selecting the UI element in the storyboard and going to the [b]Connection Inspector[/b] window.[/note]\r\nNow it's time to create the scene that shows the entire list of to-do items. We'll use table view ([b]UITableView[/b]), a powerful built-in iOS that is specifically designed to create and display a scrolling item list.\r\nFirst, open [i]Main.storyboard[/i].\r\nNext, go to the Utility area to open the [b]Object library[/b]. Drag a [b]Table View Controller[/b] object from the list and drop it on the canvas to the left of the existing scene.\r\nYou now have two scenes, one for displaying the list and one for adding a new item.\r\n\r\n[note]If nothing happens when dragging a table view with content to the canvas, you are most likely attempting to drag a table view. Make sure that you select a [b]table view controller[/b] when dragging, rather than a table view. [/note]"},{"id":4868,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":93573,"text":"--->","isCorrect":true,"properties":{}},{"id":93574,"text":"X","isCorrect":false,"properties":{}},{"id":93575,"text":"<--","isCorrect":false,"properties":{}}],"question":"Set the storyboard entry point to the Table View Controller.\r\n[!raw!]\r\n| ViewCont. |  {0}  | Table View Cont. |","textContent":"[h1]Create the Opening Scene[/h1]\r\n\r\nWhen the app is launched the list should be the first thing your users see. We need to set the table view controller as your first scene in Xcode.\r\nDrag the [b]storyboard entry point[/b] from the opening scene to the table view controller. [img id=\"1025\" width=\"100%\"]\r\nWith the table view controller set as the initial view controller in your storyboard, this will be the first scene that loads upon launching the app.[img id=\"1027\" width=\"100%\"]\r\n[note]When you run your app, you'll see an empty table view, which is a screen with a number of horizontal dividers separating it into rows that contain no content.[/note]"},{"id":4869,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":76789,"text":"custom classes","isCorrect":true,"properties":{}},{"id":76790,"text":"data file","isCorrect":false,"properties":{}},{"id":76791,"text":"view model","isCorrect":false,"properties":{}}],"question":"In order to be able to control the table cells, you need to implement:","textContent":"[h1]Modifying the Table View[/h1]\r\n\r\nIn the [i]outline [/i]view, find and select [b]Table View[/b], which is nested under Table View Controller Scene > Table View Controller: [img id=\"1029\" width=\"100%\"] \r\nWith the table view selected, go to the Utility area and open the [b]Size inspector[/b].[img id=\"1028\" width=\"70%\"] \r\nIn the Size inspector, type 90 in the [b]Row Height[/b] field. [b]Press Return[/b].\r\n\r\nNow, run your app. The row height has increased.[img id=\"1031\" width=\"60%\"][note]Now we need to add [b]custom classe[/b]s for our table view cells and table view controller, in order to control them and be able to add [b]outlets[/b].[/note]"}]}}