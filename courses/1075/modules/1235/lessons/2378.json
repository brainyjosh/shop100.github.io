{"lesson":{"id":2378,"name":"Adding Items","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4882,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96775,"text":"?","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blank to make the test variable optional.\r\n[!raw!]\r\nvar test = Item{0}()","textContent":"[h1]Store New Items[/h1]\r\n\r\nNow we need to implement the [b]Save[/b] functionality in our ViewController.\r\nOpen [i]ViewController.swift[/i] and add an [b]Item[/b] property: [code format=\"swift\"]var item = Item?()[/code]\r\nThis is an optional Item, meaning that it may be [b]nil [/b]at any point.\r\n\r\nThe Save button requires an [b]outlet [/b]in order to work. \r\nOpen Assistant Editor, and control-drag from the [b]Save [/b]button on your canvas to the code display in the editor on the right. \r\nIn the dialog that appears, type [i]saveButton [/i]in the [b]Name [/b]field and click [b]Connect[/b]: [img id=\"1052\" width=\"50%\"] \r\nNow, when a user presses the Save button,  we need to display the items list with the new item added. An [b]unwind segue[/b] moves backward through one or more segues to return the user to an existing instance of a view controller. Reverse navigation is accomplished by using an [b]unwind segue[/b]. \r\nWhenever a segue is triggered, you're provided with a place to add your own code, which is then gets executed. This method is called [b]prepareForSegue().[/b]\r\nOpen [i]ViewController.swift[/i] and add the following method: [code format=\"swift\"]override func [b]prepareForSegue[/b](segue: UIStoryboardSegue, sender: AnyObject?) {\r\n   if saveButton === sender {\r\n     let name = nameTextField.text ?? \"\"\r\n     item = Item(name: name)\r\n   }\r\n}[/code]\r\nThis method determines whether the [b]Save [/b]button has been tapped and then creates the appropriate item object.\r\n[note]This code uses the identity operator (===) to check that the object referenced by the saveButton outlet is the same object instance as sender.\r\nNotice the [b]nil coalescing operator (??)[/b] in the name line. It is used to return the value of an optional if the optional has a value, or return a default value otherwise.[/note]"},{"id":4883,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96776,"text":"sender","isCorrect":true,"properties":{}},{"id":96777,"text":"as?","isCorrect":true,"properties":{}},{"id":96778,"text":"as","isCorrect":false,"properties":{}},{"id":96779,"text":"event","isCorrect":false,"properties":{}},{"id":96780,"text":"func","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to get the destination view controller, and try to use the optional type cast operator to cast it to myViewController.\r\n[!raw!]\r\n let a = {0}.sourceViewController\r\n    {1} myViewController","textContent":"[h1]Store New Items[/h1] \r\n\r\nThe next step in creating the unwind segue is to add an action method to the [b]destination [/b]view controller.\r\nIn this method, you'll write the logic to add the new item (that's passed from [i]ViewController[/i], the source view controller) to the items list data and add a new row to the table view in the items list scene.\r\nOpen [i]ItemTableViewController.swift [/i]and add the following method: [code format=\"swift\"]@IBAction func unwindToList(sender: UIStoryboardSegue) {\r\n   let srcViewCon = sender.sourceViewController as? ViewController\r\n   let item = srcViewCon?.item\r\n   if  (srcViewCon != nil && item?.name != \"\") {\r\n     // Add a new item\r\n     let newIndexPath = NSIndexPath(forRow: items.count, inSection: 0)\r\n     items.append(item!)\r\n     tableView.insertRowsAtIndexPaths([newIndexPath], withRowAnimation: .Bottom)\r\n   }\r\n}[/code]\r\n[note]This code uses the [b]optional type cast operator (as?)[/b] to try to downcast the segue's source view controller to type [i]ViewController[/i].[/note]\r\nThis adds the new item to the existing list of items in the data model. It also animates the addition of a new row to the table view for the cell containing information about the new item.\r\n\r\nTo trigger this action method, you need to create the actual unwind segue. To do this, first open your storyboard. Control-drag from the [b]Save [/b]button to the [b]Exit item[/b] at the top of the scene. [img id=\"1053\" width=\"60%\"] \r\nChoose [b]unwindToList:[/b] from the shortcut menu.\r\nNow, when users tap the [b]Save [/b]button, they navigate back to the items list scene, during which process the [b]unwindToList(_:)[/b] action method is called.\r\n[note]Run the app. Now, when you click the Add button (+), create a new item, and click Save, you should see the new item in your list.[/note]"},{"id":4884,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96781,"text":"dismissViewControllerAnimated()","isCorrect":true,"properties":{}},{"id":96782,"text":"dismissViewControllerNow()","isCorrect":false,"properties":{}},{"id":96783,"text":"exitViewControllerAnimated()","isCorrect":false,"properties":{}},{"id":96784,"text":"closeViewControllerAnimated()","isCorrect":false,"properties":{}}],"question":"Which method dismisses the scene without storing any information?","textContent":"[h1]Cancel[/h1]\r\n\r\nTo implement the behavior of the [b]Cancel[/b] button, select the Cancel button in your storyboard, then Control-drag from the Cancel button on your canvas to the code display in the editor on the right. In the dialog, select [b]Action [/b]in the Connection field.\r\nFor [b]Name[/b], type [i]cancel[/i].\r\nFor [b]Type[/b], select [b]UIBarButtonItem[/b].\r\nYour dialog should look like this: [img id=\"1054\" width=\"60%\"] \r\nClick [b]Connect[/b].\r\nIn the [b]cancel()[/b] action method, add the following line of code to dismiss the scene without storing any information:[code format=\"swift\"]@IBAction func [b]cancel[/b](sender: UIBarButtonItem) {\r\n  [b] dismissViewControllerAnimated(true, completion: nil)[/b]\r\n}[/code]\r\n[note]Run your app. When you click the Add button (+) and click Cancel instead of Save, you should navigate back to the list without adding a new item.[/note]"}]}}