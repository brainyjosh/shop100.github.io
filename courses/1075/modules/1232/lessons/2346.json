{"lesson":{"id":2346,"name":"Dictionaries","type":0,"mode":1,"videoID":null,"tags":"dictionaries","quizzes":[{"id":4778,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96615,"text":"Int","isCorrect":true,"properties":{}},{"id":96616,"text":"String","isCorrect":true,"properties":{}},{"id":96617,"text":"()","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to declare a dictionary with Integers as the key and Strings as the values.\r\n[!raw!]\r\nvar sample = [{0}: {1}]{2}","textContent":"[h1]Dictionaries[/h1]\r\n\r\nA [b]dictionary [/b]stores associations between keys of the same type and values of the same type, in a collection with no defined ordering. Each value is associated with a unique key, which acts as an [b]identifier [/b]for that value within the dictionary. A dictionary is used to look up values based on their identifiers, in much the same way that a real-world dictionary is used to look up the definition of a particular word.\r\n\r\nWritten in its entirety, a Swift dictionary's type is [b]Dictionary<Key, Value>[/b]. Key indicates which type of value can be used as a dictionary key, and Value indicates which type of value the dictionary stores for those keys. The shorthand form for the type of a dictionary is [b][Key: Value][/b].\r\n\r\nAs with arrays, initializer syntax is used to create an empty Dictionary of a specified type: [code format=\"swift\"]var airports = [Int: String]()[/code]\r\n[note]In the dictionary [b]airports[/b], the keys are of type [b]Int[/b], and the values are of type [b]String[/b].[/note]"},{"id":4779,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96618,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96619,"text":"[","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96620,"text":",","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96621,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to result in a valid dictionary declaration.\r\n[!raw!]\r\nvar s: [Int{0} String] = {1}1: \"A\", 2:\"B\"{2} 3{3}\"C\"]","textContent":"[h1]The Dictionary Literal[/h1]\r\n\r\nA dictionary literal provides a way to write in shorthand one or more [b]key-value[/b] pairs as a Dictionary collection.\r\nThe key and value in each key-value pair are separated by a [b]colon[/b]. The key-value pairs are written as a list, separated by commas, surrounded by a pair of square brackets.\r\nThe example below creates a dictionary in which the keys are three-letter codes, and the values are airport names:\r\n[code format=\"swift\"]var airports: [String: String] = [\"TOR\": \"Toronto\", \"NY\": \"New York\"][/code]\r\nAs with arrays, it isn't necessary to write the type of the dictionary when initializing it with a dictionary literal whose keys and values have consistent types. The initialization of airports could have been written in a shorter form instead.[code format=\"swift\"]var airports = [\"TOR\": \"Toronto\", \"NY\": \"New York\"][/code]\r\n[note]Because all keys and values in the literal share the same type, Swift can infer that [b][String: String] [/b]is the correct type to use for the airports dictionary.[/note]"},{"id":4780,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96623,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nvar test = [1:\"A\", 2:\"B\", 3:\"C\"]\r\ntest[3] = nil\r\nprint(test.count)","textContent":"[h1]Accessing and Modifying a Dictionary[/h1]\r\n\r\nThe [b]count [/b]and [b]isEmpty [/b]properties also work for the dictionary. \r\nAdd a new item to a dictionary using subscript syntax: [code format=\"swift\"]airports[\"LHR\"] = \"London\"[/code]\r\nSubscript syntax can be used to change the value associated with a particular key:[code format=\"swift\"]airports[\"LHR\"] = \"London Heathrow\"\r\n// the value for \"LHR\" has been changed[/code]\r\nUse a dictionary's [b]updateValue [/b]method as an alternative to subscripting when setting or updating a key's value. The updateValue method returns the old value after performing an update: [code format=\"swift\"]let oldValue = airports.updateValue(\"New York\", forKey: \"NY\")[/code]\r\nSubscript syntax is also used to retrieve a value for a particular key from the dictionary. [code format=\"swift\"]let airportName = airports[\"NY\"][/code]\r\n[note]If the value for the requested key does not exist, Swift returns a value of [b]nil[/b].[/note]\r\nUse subscript syntax to assign a value of [b]nil [/b]to a key in order to remove a key-value pair from a dictionary. [code format=\"swift\"]airports[\"APL\"] = \"Apple\"\r\nairports[\"APL\"] = nil[/code]\r\nAlternatively, the [b]removeValueForKey [/b]method removes a key-value pair from a dictionary, if the pair exists, and returns the removed value. [i]nil [/i]is returned if no value exists. [code format=\"swift\"]if let removedValue = airports.removeValueForKey(\"NY\") {\r\n   print(\"The removed airport's name is \\(removedValue).\")\r\n} else {\r\n   print(\"The airports dictionary does not contain a value for NY.\")\r\n}[/code]"},{"id":4781,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96624,"text":"for","isCorrect":true,"properties":{}},{"id":96625,"text":"values","isCorrect":true,"properties":{}},{"id":96626,"text":"keys","isCorrect":false,"properties":{}},{"id":96627,"text":"in","isCorrect":false,"properties":{}},{"id":96628,"text":"sort()","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to iterate over the values of the dictionary.\r\n[!raw!]\r\n{0} name in airports.{1} {\r\n   print(name)\r\n}","textContent":"[h1]Iterating Over a Dictionary[/h1]\r\n\r\nUse a [b]for-in loop [/b]to iterate over the key-value pairs in a dictionary. Each item in the dictionary is returned as a [b](key, value)[/b] tuple, which you can decompose into temporary constants or variables as part of the iteration:[code format=\"swift\"]for [b](airportCode, airportName)[/b] in airports {\r\n   print(\"\\(airportCode): \\(airportName)\")\r\n}[/code]\r\nIn addition, accessing a dictionary's [b]keys [/b]and [b]values [/b]properties will retrieve an iterable collection of the dictionary's keys or values.[code format=\"swift\"] for airportCode in airports.[b]keys [/b]{\r\n   print(\"Airport code: \\(airportCode)\")\r\n}\r\n \r\nfor airportName in airports.[b]values [/b]{\r\n   print(\"Airport name: \\(airportName)\")\r\n}[/code]\r\n[note]Since Swift's Dictionary type does not have a defined ordering, use the [b]sort()[/b] method on the dictionary's keys or values property to iterate over the keys or values in a specific order.[/note]"}]}}