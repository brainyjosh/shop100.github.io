{"lesson":{"id":2340,"name":"Conditional Statements","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":4750,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96542,"text":"b","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96543,"text":"a","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96544,"text":"else","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to print the greater value of two variables, a and b.\r\n[!raw!]\r\nif a > {0}{\r\n   print({1})\r\n} {2} {\r\n  print(b)\r\n}","textContent":"[h1]Conditional Statements[/h1]\r\n\r\nA conditional statement executes certain code under certain conditions. For example, you can run a particular code when an error occurs, or display a message when a value exceeds a certain baseline. To set conditions, use [b]if [/b]or [b]switch statements[/b].\r\n\r\n[h2]The if Statement[/h2]\r\nThe most basic [b]if statement[/b] contains a single if condition, and executes a set of statements only if that condition is true:[code format=\"swift\"]var temp = 25\r\nif temp <= 30 {\r\n   print(\"It's cold.\")\r\n}[/code]\r\nYou can specify additional conditions by chaining together multiple if statements.[code format=\"swift\"]if cardValue == 11 {\r\n   print(\"Jack\")\r\n} else if cardValue == 12 { \r\n      print(\"Queen\")\r\n   } \r\n   else {\r\n   print(\"Not found\") \r\n}[/code]\r\n[note]You can add as many else-if statements as needed.[/note]"},{"id":4751,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96545,"text":"switch","isCorrect":true,"properties":{}},{"id":96546,"text":"case","isCorrect":true,"properties":{}},{"id":96547,"text":"default:","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to create a valid switch statement.\r\n[!raw!]\r\n{0} distance { \r\n   case 0: \r\n      print(\"not a valid distance\")\r\n   {1} 1...10: \r\n      print(\"near\") \r\n   case 10...100: \r\n     print(\"far\")\r\n   {2} \r\n      print(\"too far\")\r\n}","textContent":"[h1]The switch Statement[/h1]\r\n \r\nUse the [b]switch statement[/b] as an alternative to the if statement for [b]multiple [/b]potential states. The switch statement compares a value with several possible matching patterns, executing a block of code using the first matching pattern.\r\n\r\nEach case begins with the keyword [b]case[/b]:[code format=\"swift\"]switch distance { \r\ncase 0:\r\n   print(\"not a valid distance\") \r\ncase 1,2,3,4,5: \r\n   print(\"near\")\r\ndefault: \r\n   print(\"too far\")\r\n }[/code]\r\nA single case can contain multiple values, as in our example above. It can also contain ranges, using the range operators.\r\n\r\nEvery switch statement must be [i]exhaustive[/i], i.e. take every possible value into consideration. In cases in which it is not appropriate to provide a switch case for every possible value, you can define a [b]default[/b] catch-all case to cover any values that are not explicitly addressed. Indicate the catch-all case by using the keyword [b]default[/b]. This always appears last.\r\n[note]Swift doesn't require [b]break [/b]statements, but will still accept one to match and ignore a particular case, or to break out of a matched case before that case has completed its execution.[/note]"},{"id":4752,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117884,"text":"A","isCorrect":false,"properties":{}},{"id":117885,"text":"B","isCorrect":false,"properties":{}},{"id":117886,"text":"C","isCorrect":true,"properties":{}}],"question":"What is the output of the following code?\r\nlet currentPoint = (1, 2)\r\nswitch currentPoint {\r\n   case let (x, y) where x > y:\r\n      print(\"A\")\r\n   case let (x, y) where x == y:\r\n      print(“B\")\r\n   case let (x, y):\r\n      print(“C\")\r\n}","textContent":"[h1]Where[/h1]\r\n\r\nThe [b]where [/b]clause checks for additional conditions.[code format=\"swift\" ]let myPoint = (1, -1)\r\nswitch myPoint {\r\n   case let (x, y) [b]where [/b]x == y:\r\n      print(\"(\\(x), \\(y)) is on the line x == y\")\r\n   case let (x, y) [b]where [/b]x == -y:\r\n     print(\"(\\(x), \\(y)) is on the line x == -y\")\r\n   case let (x, y):\r\n     print(\"(\\(x), \\(y)) is just some arbitrary point\")\r\n}[/code]\r\nThe three switch cases declare placeholder constants [b]x[/b] and [b]y[/b], which temporarily take on the two values from [i]myPoint[/i], creating a dynamic filter as part of a [b]where [/b]clause. The switch case matches the current value of point only if the where clause's condition evaluates to true for that value.\r\n[note]The final case matches all possible remaining values; a default case is not necessary to have an exhaustive switch statement.[/note]"}]}}