{"lesson":{"id":2386,"name":"Working with Strings","type":0,"mode":1,"videoID":null,"tags":"strings","quizzes":[{"id":4762,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96574,"text":"var","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96575,"text":"+","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96576,"text":"s2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to put the two String variables together.\r\n[!raw!]\r\nvar s1 = \"I love\"\r\n{0} s2 = \" Swift\"\r\nvar message = s1 {1} {2}","textContent":"[h1]Concatenation[/h1]\r\n\r\nString values can be added together (or concatenated) with the[b] addition operator (+)[/b] to create a new String value: [code format=\"swift\"]let string1 = \"Hello\"\r\nlet string2 = \" World\"\r\nvar welcome = string1 + string2\r\n// welcome now equals \"Hello World\"[/code]\r\nThe [b]addition assignment operator (+=)[/b] appends a String value to an existing String variable. [code format=\"swift\"]var msg = \"Hi\"\r\nmsg += \" David\"\r\n// msg is now \"Hi David\"[/code]"},{"id":4763,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":105180,"text":"Yes","isCorrect":false,"properties":{}},{"id":105181,"text":"No","isCorrect":true,"properties":{}}],"question":"Can you include a backslash within the expressions appearing inside of parentheses when constructing an interpolated string?","textContent":"[h1]String Interpolation[/h1]\r\n\r\nString [b]interpolation [/b]includes the values of a mix of constants, variables, literals, and expressions inside a string literal to form a new String value. Prefix each item with a backslash, place the item in parentheses, and insert it into the string literal.[code format=\"swift\" ]let mult = 4\r\nlet message = \"\\(mult) times 1.5 is \\(Double(mult) * 1.5)\"\r\n// message is \"4 times 1.5 is 6\"[/code]\r\nIn the above example, the multiplier value is inserted into the string literal as \\(mult). When the string interpolation is evaluated prior to creating the actual string, this placeholder is replaced with the actual value of [i]mult[/i].\r\n\r\nLater in the string, the value of [i]mult [/i]appears within a larger expression within the string literal: \\(Double(mult) * 1.5). The expression calculates the value of Double(mult) * 1.5 and then inserts the result (6) into the string. \r\n[note]The expressions appearing inside of parentheses within an interpolated string cannot contain an unescaped double quote (\"), backslash (\\), carriage return, or line feed.[/note]"},{"id":4764,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96579,"text":"9","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nvar word = \"SoloLearn\"\r\nprint(word.characters.count)","textContent":"[h1]Counting Characters[/h1]\r\n\r\nTo retrieve a count of the [b]Character [/b]values in a string, use the count property of the string's [b]characters[/b] property: [code format=\"swift\"]let someString = \"I am learning with SoloLearn\"\r\nprint(\"someString has \\(someString.[b]characters.count[/b]) characters\")\r\n[b]// prints \"someString has 28 characters\"[/b][/code]\r\n[note]When using the [b]characters [/b]property, the character count does not always match the length property of an NSString containing the same characters. The length of an NSString is based on the number of 16-bit code units within the string's UTF-16 representation, as opposed to the number of Unicode extended grapheme clusters within the string. [/note]"},{"id":4765,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96580,"text":"==","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96581,"text":"s2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to see if the strings are equal.\r\n[!raw!]\r\nvar s1 = \"test\"\r\nvar s2 = \"test\"\r\nif s1 {0} {1} {\r\n   print(\"Equal!\")\r\n}","textContent":"[h1]Comparing Strings[/h1]\r\n\r\nSwift offers three options for comparing textual values: string and character equality, prefix equality, and suffix equality.\r\nUse the \"[b]equal to[/b]\" operator (==) and the \"[b]not equal to[/b]\" operator (!=) to determine string and character equality. [code format=\"swift\"]let s1 = \"We are alike\"\r\nlet s2 = \"We are alike\"\r\nif s1 == s2 {\r\n   print(\"These two strings are equal\")\r\n}\r\n// prints \"These two strings are equal\"[/code]\r\n[note]Use the string's [b]hasPrefix [/b]and [b]hasSuffix[/b] methods to determine whether a string has a particular string prefix or suffix. Both methods take a single argument of type String and return a Boolean value.[/note]"}]}}