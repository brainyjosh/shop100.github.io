{"lesson":{"id":2345,"name":"Sets","type":0,"mode":1,"videoID":null,"tags":"sets","quizzes":[{"id":4773,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96606,"text":"[","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96607,"text":"]","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to declare a set of three letters.\r\n[!raw!]\r\nvar mySet: Set = {0} \"A\", \"B\", \"C\" {1}","textContent":"[h1]Sets[/h1]\r\n\r\nA [b]set [/b]stores distinct values of the same type in a collection with no defined ordering. Sets are used as an alternative to arrays when item order is not a concern or when you need to ensure that an item appears only once.\r\nFor a Swift set, write the type as [b]Set<T>[/b] where [b]T[/b] is the type that the set is allowed to store. Unlike arrays, there is no equivalent shorthand for sets.\r\nYou can create an empty set of a certain type using initializer syntax:\r\n[code format=\"swift\"]var letters = [b]Set[/b]<[b]Character[/b]>()[/code]\r\n[note]Based on the initializer type, Swift infers the type of the letters to be [b]Set<Character>[/b].[/note]\r\nAn array literal will also work as shorthand when initializing a set with one or more values as a set collection.[code format=\"swift\"]var names: Set<String> = [\"David\", \"Susan\", \"Robert\"][/code]\r\nWhen initializing the type of set with an array literal that contains values of the same type, it is not necessary to write the type of set. The initialization could have been written in a shorter form:[code format=\"swift\"]var names: Set = [\"David\", \"Susan\", \"Robert\"][/code]\r\n[note]Because all values in the array literal are of the same type, Swift infers that[b] Set<String>[/b] is the correct type to use for the names variable.[/note]"},{"id":4774,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96608,"text":"if mySet.contains(\"42\") {","isCorrect":false,"properties":{}},{"id":96609,"text":"mySet.removeAll()","isCorrect":false,"properties":{}},{"id":96610,"text":"} else {","isCorrect":false,"properties":{}},{"id":96611,"text":"print(mySet.count)","isCorrect":false,"properties":{}},{"id":96612,"text":"}","isCorrect":false,"properties":{}}],"question":"Reorder the code to remove all items in the set if the set contains the element 42. If 42 is absent, print the number of items in the set.","textContent":"[h1]Accessing and Modifying a Set[/h1]\r\n\r\nThe [b]count [/b]and [b]isEmpty [/b]properties work the same way with a set as they do with an array.\r\nCalling the set's [b]insert [/b]method adds a new item to a set. [code format=\"swift\"]names.[b]insert[/b](\"Paul\")[/code]\r\nYou can remove an item from a set by calling the set's [b]remove [/b]method. The item is removed if it's a member of the set, and the removed value is returned. It returns [i]nil [/i]if the item is not contained in the set. Alternatively, use the set's [b]removeAll()[/b] method to remove all of the items in a set.\r\n\r\nThe [b]contains [/b]method tells you whether or not a particular item is present in the set. [code format=\"swift\"]if names.[b]contains[/b](\"James\") {\r\n    print(\"James is here.\")\r\n} else {\r\n    print(\"James is not with us.\")\r\n}[/code]"},{"id":4775,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96613,"text":"sort","isCorrect":false,"properties":{"prefix":"","postfix":"()"}}],"question":"Which method puts a set collection in order?","textContent":"[h1]Iterating Over a Set[/h1]\r\n\r\nYou can iterate over the values in a set with a[b] for-in[/b] loop. [code format=\"swift\"][b]for [/b]name [b]in [/b]names {\r\n   print(\"\\(name)\")\r\n}\r\n[/code]\r\nSince Swift's Set type does not provide defined ordering, use the [b]sort()[/b] method to iterate over the values of a set in a specific order. [code format=\"swift\"]for name in names.[b]sort()[/b] {\r\n   print(\"\\(name)\")\r\n}[/code]"}]}}