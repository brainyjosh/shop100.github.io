{"lesson":{"id":2358,"name":"Methods","type":0,"mode":1,"videoID":null,"tags":"methods","quizzes":[{"id":4825,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96720,"text":"class","isCorrect":true,"properties":{}},{"id":96721,"text":"func","isCorrect":true,"properties":{}},{"id":96722,"text":"st","isCorrect":true,"properties":{}},{"id":96723,"text":"printAge()","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to define the class with its function, initialize an instance of that class, and call the function.\r\n[!raw!]\r\n{0} Student {\r\n   var age = 0\r\n   {1} printAge() {\r\n     print(age)\r\n   }\r\n}\r\nvar st = Student()\r\n{2}.{3}","textContent":"[h1]Methods[/h1]\r\n\r\n[b]Methods [/b]are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods.\r\n[b]Instance methods[/b] are functions that belong to instances of a particular class, structure, or enumeration. Instance methods have exactly the same syntax as functions:[code format=\"swift\"]class Counter {\r\n   var count = 0\r\n   [b]func [/b]increment() {\r\n      ++count\r\n   }\r\n  [b]func [/b]incrementBy(amount: Int) {\r\n      count += amount\r\n  }\r\n  [b]func [/b]reset() {\r\n      count = 0\r\n   }\r\n}[/code]\r\nYou call instance methods with the same [b]dot [/b]syntax used for properties:[code format=\"swift\"]let counter = Counter()\r\n// the initial counter value is 0\r\ncounter.increment()\r\n// the counter's value is now 1\r\ncounter.incrementBy(5)\r\n// the counter's value is now 6\r\ncounter.reset()\r\n// the counter's value is now 0[/code]"},{"id":4826,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96724,"text":"self","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Which keyword refers to the current instance?","textContent":"[h1]The self Property[/h1]\r\n\r\nThe [b]self [/b]property refers to the current instance within its own instance methods.\r\nThe increment() method in the previous example could have been written like this: [code format=\"swift\"]func increment() {\r\n   [b]self[/b].count++\r\n}[/code]\r\nIn practice, you rarely need to write self in your code.\r\nYou can use the [b]self [/b]property to distinguish between the parameter name and the property name.\r\nHere, self disambiguates between a method parameter called [b]x[/b] and an instance property that is also called [b]x[/b]:[code format=\"swift\"]struct Point {\r\n   var x = 0.0, y = 0.0\r\n   func isToTheRight(x: Double) -> Bool {\r\n     return [b]self[/b].x > x\r\n   }\r\n}[/code]\r\n[note]Without the [b]self [/b]prefix, Swift would assume that both uses of x referred to the method parameter called x.[/note]"},{"id":4827,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106561,"text":"mutating","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blank to enable the method to change the struct's property value:\r\n[!raw!]\r\nstruct Person {\r\n   var age = 0\r\n   {0} func AddOne() {\r\n     age += 1\r\n   }\r\n}","textContent":"[h1]Modifying Value Types[/h1]\r\n\r\nStructures and enumerations are value types. By default, the properties of a value type [b]cannot[/b] be modified from within its instance methods.\r\nThe [b]mutating [/b]keyword is added to the method's definition so it can modify its properties.[code format=\"swift\" ]struct Point {\r\n   var x = 0.0, y = 0.0\r\n   [b]mutating [/b]func moveByX(dX: Double, dY: Double) {\r\n     x += dX\r\n     y += dY\r\n   }\r\n}[/code]\r\nYou cannot call a mutating method on a constant of structure type, because its properties cannot be changed.\r\n[note]Mutating methods can assign an entirely new instance to the implicit [b]self [/b]property.[/note]"},{"id":4828,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96726,"text":"static","isCorrect":false,"properties":{"prefix":"","postfix":" func someFunc()"}}],"question":"Define a type method:","textContent":"[h1]Type Methods[/h1]\r\n\r\nInstance methods are called on an instance of a particular type. A [b]type method[/b] is called on the type itself, and is indicated by writing the keyword [b]static [/b]before the method's [i]func [/i]keyword:[code format=\"swift\"]class SomeClass {\r\n   [b]static [/b]func someTypeMethod() {\r\n      // type method implementation goes here\r\n   }\r\n}\r\nSomeClass.someTypeMethod()[/code]\r\nAs with instance methods, type methods are called with dot syntax. However, type methods are called on the type, not on an instance of that type.\r\n[note]Within the body of a type method, the implicit [b]self [/b]property refers to the type itself, rather than an instance of that type. [/note]"}]}}