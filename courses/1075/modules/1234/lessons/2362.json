{"lesson":{"id":2362,"name":"Deinitialization","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":4837,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96745,"text":"init","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96746,"text":"deinit","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define an initializer and a deinitializer for the ''Mother'' class.\r\n[!raw!]\r\nclass Mother {\r\n   {0}() {\r\n     print(\"Init\")\r\n   }\r\n   {1} {\r\n     print(\"Deinit\")\r\n   }\r\n}","textContent":"[h1]Deinitialization[/h1]\r\n\r\nA [b]deinitializer [/b]is called immediately before a class instance is deallocated, and is useful when you work with your own resources.\r\nFor example, if you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.\r\n[note]Class definitions can have at most [b]one [/b]deinitializer per class. [/note]\r\nRather than providing you with the ability to call a deinitializer, Swift automatically calls it, just prior to instance deallocation. Superclass deinitializers are inherited by their subclasses, and the superclass deinitializer is called automatically at the end of a subclass deinitializer implementation. Superclass deinitializers are always called, even in cases in which subclasses do not provide their own deinitializers.\r\n\r\nThe [b]deinit [/b]keyword is used to write a deinitializer, which is similar to writing an initializer using the [b]init[/b] keyword. The deinitializer does not take any parameters and is written with no parentheses: [code format=\"swift\"][b]deinit [/b]{\r\n   // perform the deinitialization\r\n}[/code]\r\n[note]Deinitializers are only available on class types.[/note]"}]}}