{"lesson":{"id":2355,"name":"Classes and Structures","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":4813,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":65758,"text":"instance","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"In Swift, an object of a class is called an:","textContent":"[h1]Classes and Structures[/h1]\r\n\r\nClasses and structures are general-purpose, flexible constructs that become the building blocks of your program's code. You define properties and methods to add functionality to your classes and structures by using exactly the same syntax as for constants, variables, and functions.\r\n\r\nSwift does not require that you create separate interface and implementation files for custom classes and structures. Rather, they are defined in a single file. The external interface to that class or structure is automatically made available for other code to use.\r\n[note]In other languages, an [b]instance [/b]of a class is traditionally known as an [b]object[/b]. However, because classes and structures in Swift are much closer in functionality than in other languages, the more general term [b]instance [/b]is used.[/note]"},{"id":4814,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96695,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96696,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a class called Student.\r\n[!raw!]\r\n{0} Student {1}\r\n   var name: String = \"\"\r\n   var age = 0\r\n}","textContent":"[h1]Definition[/h1]\r\n\r\nClasses and structures have a similar definition syntax. \r\nYou introduce classes with the [b]class [/b]keyword and structures with the [b]struct [/b]keyword. Each places its entire definition within a pair of braces.[code format=\"swift\"][b]struct [/b]Resolution {\r\n   var width = 0\r\n   var height = 0\r\n}\r\n\r\n[b]class [/b]VideoMode { \r\n   var resolution = Resolution()\r\n   var interlaced = false\r\n   var frameRate = 0.0\r\n}[/code]\r\nThe example above defines a new structure called [b]Resolution[/b], with two stored properties called [i]width[/i] and [i]height[/i]. \r\nIt also defines a new class called [b]VideoMode[/b], which has three variable stored properties. The first, [i]resolution[/i], is initialized with a new [b]Resolution [/b]structure instance, which infers a property type of [b]Resolution[/b].\r\n[note]When a new class or structure is defined, a brand new Swift type is defined.[/note]"},{"id":4815,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96697,"text":"struct","isCorrect":true,"properties":{}},{"id":96698,"text":"Size()","isCorrect":true,"properties":{}},{"id":96699,"text":"new","isCorrect":false,"properties":{}},{"id":96700,"text":"class","isCorrect":false,"properties":{}},{"id":96701,"text":"let","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to define a structure called Size. Also, create two instances of your newly created structure.\r\n[!raw!]\r\n{0} Size {\r\n   var width = 0\r\n   var height = 0\r\n}\r\nlet s1 = {1}\r\nlet s2 = Size()","textContent":"[h1]Class and Structure Instances[/h1]\r\n\r\nThe [b]Resolution [/b]structure definition and the [b]VideoMode [/b]class definition only describe what each one will look like. The definitions in themselves do not describe a specific resolution or video mode. To do that, you need to create an [b]instance [/b]of the structure or class.\r\n\r\nThe syntax for creating instances is very similar for both structures and classes:[code format=\"swift\"]let someResolution = Resolution()\r\nlet someVideoMode = VideoMode()[/code]\r\nWhen creating new instances, structures and classes both use initializer syntax. The simplest form of initializer syntax uses the type name of the class or structure, followed by empty parentheses.\r\n[note]This creates a new instance of the class or structure. Properties are initialized to their default values.[/note]"},{"id":4816,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96702,"text":"10","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nstruct Size {\r\n   var width = 10\r\n   var height = 42\r\n}\r\nlet mySize = Size()\r\nprint(mySize.width)","textContent":"[h1]Accessing Properties[/h1]\r\n\r\nAccess an instance's properties with [b]dot [/b]syntax. Write the property name immediately after the instance name, separated with a period (.), with no spaces:[code format=\"swift\"]print(\"The width is \\([b]someResolution.width[/b])\")[/code]\r\nIn this example, [b]someResolution.width[/b] refers to the width property of [b]someResolution[/b], and returns its value.\r\n\r\nYou can drill down into a sub-property, such as the [i]width [/i]property, which is in the [i]resolution [/i]property of a [b]VideoMode[/b].[code format=\"swift\"]print(someVideoMode.resolution.width)[/code]\r\nDot syntax is also used when assigning a new value to a variable property.[code format=\"swift\"]someVideoMode.resolution.width = 1280[/code]\r\n[note]In the last example, the [i]width [/i]property of the [i]resolution [/i]property of [b]someVideoMode [/b]is set directly, with no need to set the entire resolution property to a new value.[/note]\r\nAll structures have an automatically-generated [b]memberwise initializer[/b], which you can use to initialize the member properties of new structure instances. Initial values for the properties of the new instance can be passed to the memberwise initializer by name:[code format=\"swift\"]let vga = Resolution([b]width:[/b] 640, [b]height:[/b] 480)[/code]\r\n[note]Unlike structures, class instances do not receive a memberwise initializer by default.[/note]"}]}}