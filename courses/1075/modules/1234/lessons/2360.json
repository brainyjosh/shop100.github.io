{"lesson":{"id":2360,"name":"Inheritance","type":0,"mode":1,"videoID":null,"tags":"inheritance","quizzes":[{"id":4831,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96732,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blank to inherit ''Daughter'' from the ''Mother'' class.\r\n[!raw!]\r\nclass Daughter{0} Mother {\r\n}","textContent":"[h1]Inheritance[/h1]\r\n\r\nA class can [b]inherit [/b]methods, properties, and other characteristics from another class. The inheriting class is a [b]subclass[/b], and the class from which it inherits from is its [b]superclass[/b]. Inheritance is a fundamental behavior that differentiates classes from other types in Swift.\r\nAny class that does not inherit from another class is known as a [b]base class[/b].\r\n[b]Subclassing [/b]is the act of basing a new class on an existing class.\r\nTo understand inheritance in action, let's create an example: [code format=\"swift\"]class Vehicle {\r\n  var currentSpeed = 0.0\r\n  var desc: String {\r\n    return \"traveling at \\(currentSpeed) mph\"\r\n  }\r\n  func makeNoise() {\r\n    // do nothing\r\n  }\r\n}[/code]\r\nTo indicate that a subclass has a superclass, write the subclass name before the superclass name, separated by a colon: [code format=\"swift\"]class Bicycle: Vehicle {\r\n   var hasBasket = false\r\n}[/code]\r\nThe new [b]Bicycle [/b]class automatically takes on all of the characteristics of [b]Vehicle[/b], including properties such as [i]currentSpeed [/i]and [i]desc[/i], as well as methods like [i]makeNoise()[/i]. In addition to its inherited characteristics, the Bicycle class defines a new stored property, [b]hasBasket[/b].\r\nYou can also modify the inherited [i]currentSpeed [/i]property of a Bicycle instance, and query the instance's inherited [i]desc [/i]property: [code format=\"swift\"]let bicycle = Bicycle()\r\nbicycle.hasBasket = true\r\nbicycle.currentSpeed = 25.0\r\nprint(\"Bicycle: \\(bicycle.desc)\")[/code]\r\nSubclasses can themselves be subclassed. The next example creates a subclass of [i]Bicycle [/i]for a two-seater bicycle, or a tandem.[code format=\"swift\"]class Tandem: Bicycle {\r\n   var currNumOfPassengers = 0\r\n}[/code]\r\nIf you create an instance of [b]Tandem[/b], you can work with any of its properties, both new and inherited. You can also query the read-only [i]desc [/i]property it inherited from [b]Vehicle[/b]:[code format=\"swift\"]let tandem = Tandem()\r\ntandem.hasBasket = true\r\ntandem.currNumOfPassengers = 2\r\ntandem.currentSpeed = 20.0\r\nprint(\"Tandem: \\(tandem.desc)\")[/code]"},{"id":4833,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96733,"text":"class ","isCorrect":true,"properties":{}},{"id":96734,"text":"Student","isCorrect":true,"properties":{}},{"id":96735,"text":"Person","isCorrect":true,"properties":{}},{"id":96736,"text":"override","isCorrect":true,"properties":{}},{"id":96737,"text":"func","isCorrect":true,"properties":{}}],"question":"Fill in the blanks to declare a \"Person\" class with the ''hello()'' method. Then declare a ''Student'' class that inherits from the ''Person'' class and overrides its ''hello()'' method.\r\n[!raw!]\r\n{0} Person {\r\n  var name = \"\"\r\n  func hello() {\r\n    print(\"Hi from Person\")\r\n  }\r\n}\r\nclass {1}: {2} {\r\n  var year = 0\r\n  {3} {4} hello() {\r\n    print(\"Hi from Student\")\r\n  }\r\n}","textContent":"[h1]Overriding[/h1]\r\n\r\nA subclass can provide its own custom implementation of an instance method, type method, instance property, type property, or subscript that it would otherwise inherit from a superclass. This is known as [b]overriding[/b].\r\nTo override a characteristic that would otherwise be inherited, prefix the overriding definition with the [b]override [/b]keyword.\r\n\r\nThe [i]superclass [/i]version of a method, property, or subscript is accessed by using the [b]super [/b]prefix.\r\nFor example:\r\n - An overridden method named [b]someMethod[/b]() can call the superclass version of someMethod() by calling [b]super.someMethod()[/b] within the overriding method implementation.\r\n - An overridden property called someProperty can access the superclass version of someProperty as [b]super.someProperty[/b] within the overriding getter or setter implementation.\r\n - An overridden subscript for someIndex can access the superclass version of the same subscript as [b]super[someIndex][/b] from within the overriding subscript implementation.\r\n\r\nThe following example defines a new subclass of [b]Vehicle[/b], called [b]Train[/b], which overrides the [b]makeNoise()[/b] method that Train inherits from Vehicle:\r\n[code format=\"swift\"]class Train: Vehicle {\r\n   [b]override [/b]func makeNoise() {\r\n     print(\"Choo Choo\")\r\n   }\r\n}[/code]\r\nThe following example defines a new class called [i]Car[/i], which is a subclass of [i]Vehicle[/i]. The Car class introduces a new stored property called [i]gear[/i], which has a default integer value of 1. The Car class also overrides the [i]description [/i]property inherited from Vehicle to provide a custom description that includes the current gear:[code format=\"swift\"]class Car: Vehicle {\r\n  var gear = 1\r\n  [b]override [/b]var desc: String {\r\n    return super.desc + \" in gear \\(gear)\"\r\n  }\r\n}[/code]\r\n[note]You can prevent a method, property, or subscript override by marking it as [b]final [/b](such as [i]final var[/i], [i]final func[/i], [i]final class func,[/i] and [i]final subscript[/i]).\r\nYou can mark an entire class as final by placing the final modifier before the class keyword in its class definition ([b]final [/b]class).[/note]"}]}}