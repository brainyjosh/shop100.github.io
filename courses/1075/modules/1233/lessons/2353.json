{"lesson":{"id":2353,"name":"Enumerations","type":0,"mode":1,"videoID":null,"tags":"enums","quizzes":[{"id":4807,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96690,"text":"One","isCorrect":false,"properties":{}},{"id":96691,"text":"Two","isCorrect":false,"properties":{}},{"id":96692,"text":"Multiple","isCorrect":true,"properties":{}}],"question":"How many values can an enum have?","textContent":"[h1]Enumerations[/h1]\r\n\r\nAn [b]enumeration [/b]defines a common type for a group of related values. It enables you to work with those values in a type-safe way within your code.\r\nUse the [b]enum [/b]keyword to introduce an enumeration, and place their entire definition within a pair of braces:[code format=\"swift\"]enum Compass {\r\n   case North\r\n   case South\r\n   case East\r\n   case West\r\n}[/code]\r\nAn enumeration's member values, or members, are the values that are defined within the enumeration, such as North, South, East, and West. The [b]case [/b]keyword indicates that a new line of member values is about to be defined.\r\n[note]Unlike C and Objective-C, Swift enumeration members are not assigned a default integer value when they are created. \r\nIn the Compass example above, North, South, East and West do not implicitly equal 0, 1, 2 and 3. Instead, the different enumeration members are fully-fledged values in their own right, with an explicitly defined type of Compass.[/note]"},{"id":4808,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96693,"text":"enum","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96694,"text":"case","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Create a valid enumeration by filling in the blanks.\r\n[!raw!]\r\n{0} Status {\r\n  {1} None, Online, Offline\r\n}","textContent":"[h1]Enumerations[/h1]\r\n\r\nMultiple member values can appear on a single line, separated by commas: [code format=\"swift\"]enum Planet {\r\n  case Mercury, Venus, Earth, Mars, Jupiter\r\n}[/code]\r\nEach enumeration definition specifies a brand new type. As with other types in Swift, their names (such as Compass and Planet) should be [b]capitalized[/b]. \r\n\r\nThe values in an enumeration can be accessed using the dot syntax.[code format=\"swift\"]var direction = Compass[b].West[/b][/code]\r\n[note]Give enumeration types singular rather than plural names, so that they read as self-evident.[/note]"}]}}