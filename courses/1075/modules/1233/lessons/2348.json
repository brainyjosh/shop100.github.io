{"lesson":{"id":2348,"name":"Functions","type":0,"mode":1,"videoID":null,"tags":"functions","quizzes":[{"id":4788,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":59586,"text":"Yes","isCorrect":true,"properties":{}},{"id":59587,"text":"No","isCorrect":false,"properties":{}}],"question":"Can a function be written within another function in Swift?","textContent":"[h1]Functions[/h1]\r\n\r\n[b]Functions [/b]are self-contained chunks of code that perform a specific task. Name a function in a way that identifies what it does, and then use the name to call the function to perform its task when needed.\r\n\r\nIn Swift, every function has a type that contains the function's [b]parameter types[/b] and [b]return type[/b]. This type can be used like any other type in Swift, and this makes passing functions as parameters to other functions and returning functions from functions easier. \r\n[note]Functions can also be written within other functions to encapsulate useful functionality within a nested function scope.[/note]"},{"id":4789,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96629,"text":"func","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96630,"text":"->","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":96631,"text":"return","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function that takes an Integer as its parameter and returns its square. Then call the function.\r\n[!raw!]\r\n{0} sq(num: Int) {1} Int { \r\n{2} num*num\r\n}\r\nprint(sq(2))","textContent":"[h1]Defining and Calling Functions[/h1]\r\n\r\nWhen you define a function, you have the option of defining one or more named and typed values that the function takes as input ([b]parameters[/b]), and/or a type of value that the function passes back as output ([b]return type[/b]).\r\n\r\nTo use a function, call it using its [b]name [/b]and pass to it input values ([b]arguments[/b]) that match the types of the function's parameters. Arguments must always be provided in the same order as in the function's parameter list.\r\n\r\nThe example below defines a function [b]sayHello[/b], which takes a String ([b]personName[/b]) as a parameter and then returns another [b]String[/b]: [code format=\"swift\"][b]func [/b]sayHello(personName: String) [b]->[/b] String {\r\n   let greeting = \"Hello, \" + personName + \"!\"\r\n   [b]return [/b]greeting\r\n}[/code]\r\nThe function definition begins with the [b]func [/b]keyword. The keyword is followed with a return arrow [b]->[/b] that indicates the function's return type, and the name of the type to return ends the definition.\r\nThe [b]return [/b]statement indicates the value to be returned by the function.\r\nOnce the function has been defined, it can be called in other parts of your code. [code format=\"swift\"]print(sayHello(\"David\"))[/code]\r\n[note]You can call the defined function multiple times, and with different input values.[/note]"},{"id":4790,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":8,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96632,"text":"func mysum(n1: Int, n2: Int) -> Int {","isCorrect":false,"properties":{}},{"id":96633,"text":"   var sum = n1 + n2","isCorrect":false,"properties":{}},{"id":96634,"text":"   return sum","isCorrect":false,"properties":{}},{"id":96635,"text":"}","isCorrect":false,"properties":{}}],"question":"Rearrange the code to define a function that returns the sum of its parameters:","textContent":"[h1]Multiple Input Parameters[/h1]\r\n\r\nMultiple input parameters can be written within the function's parentheses. Use commas to separate the parameters.\r\nThis function takes a [i]start [/i]and an [i]end [/i]index for a half-open range, and works out how many elements are contained in the range. [code format=\"swift\"]func rangeLength(start: Int, end: Int) -> Int {\r\n   return end - start\r\n}\r\nprint(rangeLength(start: 2, end: 7))\r\n// prints \"5\"[/code]\r\n[note]When calling a function with more than one parameter, any argument after the first one is labeled according to its corresponding parameter name.[/note]\r\n[h2]Functions Without Parameters[/h2]\r\n\r\nDefining input parameters within a function is not a requirement. It is possible to have a function with no input parameters. That function will return the same String message every time it's called:[code format=\"swift\"]func sayHelloWorld() -> String {\r\n   return \"Hello, world\"\r\n}[/code]\r\n[note]The function definition still needs parentheses after the function's name, even though there may be no parameters. The parentheses following the function name are simply empty when the function is called.[/note]"},{"id":4791,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96636,"text":"Only one","isCorrect":false,"properties":{}},{"id":96637,"text":"One or two","isCorrect":false,"properties":{}},{"id":96638,"text":"As many as you want","isCorrect":true,"properties":{}}],"question":"How many parameters can a function have?","textContent":"[h1]Functions Without Return Values[/h1]\r\n\r\nWhen defining a function it's not mandatory to define a return type. In the example below, the function [b]sayHi()[/b] prints its own String value, rather than returning it.[code format=\"swift\"]func sayHi(name: String) {\r\n   print(\"Hi, \\(name)!\")\r\n}\r\nsayHi(\"Dave\")\r\n// prints \"Hi, Dave!\"[/code]\r\nBecause it does not need to return a value, the function's definition does not include the return arrow (->) or a return type.\r\n[note]The sayHi() function does still return a value, even though it has no defined return value. Functions without a defined return type return a special value of type [b]Void[/b]. \r\nReturn values [b]can be ignored[/b], but a function that says it will return a value must always do so.[/note]"},{"id":4792,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106641,"text":"11","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nfunc test(n1: Int, n2:Int) -> (a: Int, b: Int) {\r\n   return ((n1-n2), (n1+n2))\r\n}\r\nlet tmp = test(8, 3)\r\nprint(tmp.b)","textContent":"[h1]Multiple Return Values[/h1]\r\n\r\nYou can use a tuple type as the return type for a function to return multiple values as part of one compound return value.\r\n\r\nThe example below defines a function that returns the smallest and largest numbers in an array of Int values:[code format=\"swift\" ]func minMax(array: [Int]) -> ([b]min: Int, max: Int[/b]) {\r\n   var currMin = array[0]\r\n   var currMax = array[0]\r\n   for value in array[1..<array.count] {\r\n      if value < currMin {\r\n        currMin = value\r\n      } else if value > currMax {\r\n         currMax = value\r\n      }\r\n   }\r\n  [b] return (currMin, currMax)[/b] \r\n}[/code]\r\nThe [b]minMax [/b]function returns a tuple containing two Int values. The values are labeled [i]min [/i]and [i]max[/i], to facilitate easy access when querying the function's return value.\r\n\r\nBecause the tuple's member values are named as part of the function's return type, they can be accessed using [b]dot [/b]syntax to retrieve the minimum and maximum found values: [code format=\"swift\" ]let bounds = minMax([4, -4, 1, 88, 7, 42])\r\nprint(\"min is \\(bounds.min) and max is \\(bounds.max)\")\r\n// prints \"min is -4 and max is 88\"[/code]\r\n[note]It's not necessary to name the tuple's members when the tuple is returned from the function, because their names have already been specified as part of the function's return type.[/note]"}]}}