{"lesson":{"id":2350,"name":"Function Types","type":0,"mode":1,"videoID":null,"tags":"functions","quizzes":[{"id":4797,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96655,"text":" -> ","isCorrect":true,"properties":{}},{"id":96656,"text":"Int","isCorrect":true,"properties":{}},{"id":96657,"text":"String","isCorrect":false,"properties":{}},{"id":96658,"text":"param","isCorrect":false,"properties":{}},{"id":96659,"text":"var","isCorrect":false,"properties":{}}],"question":"Construct a function type with two parameters, both of type String, that returns a value of type Int.\r\n[!raw!]\r\n(String, String) {0} {1}","textContent":"[h1]Function Types[/h1]\r\n\r\nEvery function has a specific function type that consists of the function's [b]parameter[/b] types and [b]return[/b] type. Here's an example:[code format=\"swift\"]func addInts(a: Int, b: Int) -> Int {\r\n   return a + b\r\n}\r\nfunc multiplyInts(a: Int, b: Int) -> Int {\r\n   return a * b\r\n}[/code]\r\nThis example defines two simple mathematical functions called [b]addInts [/b]and [b]multiplyInts[/b], which take two Int values, which return an Int value.\r\nFor both of these functions, the type is [b](Int, Int) -> Int[/b]. This can be interpreted as\r\n[i]\"A function type that has two parameters, both of type Int; and that returns a value of type Int.\"[/i]\r\n\r\nHere's another example. This one shows a function with no parameters or return value: [code format=\"swift\"]func printHelloWorld() {\r\n   print(\"Hello, world\")\r\n}[/code]\r\nThe type of this function is [b]() -> Void[/b], which translates into \"[i]a function that has no parameters, and returns Void.\"[/i]\r\n[note]Tap [b]Continue [/b]to learn how you can use function types![/note]"},{"id":4798,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":6,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96660,"text":"String","isCorrect":true,"properties":{}},{"id":96661,"text":"myFunc","isCorrect":true,"properties":{}},{"id":96662,"text":"Double","isCorrect":false,"properties":{}},{"id":96663,"text":"func","isCorrect":false,"properties":{}},{"id":96664,"text":"->","isCorrect":false,"properties":{}},{"id":96665,"text":"Int","isCorrect":false,"properties":{}}],"question":"Fill in the blanks to assign the function myFunc to the variable t.\r\n[!raw!]\r\nfunc myFunc(s1: String) -> Int {\r\n   return s1.characters.count\r\n}\r\nvar t: ({0}) -> Int = {1}","textContent":"[h1]Using Function Types[/h1]\r\n\r\nFunction types are used in the same way as any other Swift types.\r\nFor example, define a constant or a variable to be of a function type. Then assign an appropriate function to that variable: [code format=\"swift\"]var mathFunction: [b](Int, Int) -> Int[/b] = addInts[/code] \r\nYou can now call the assigned function using its name, [b]mathFunction[/b].[code format=\"swift\"]print(\"Result: \\(mathFunction(2, 3))\")[/code]\r\n[note]A different function with the same type can be assigned to the same variable, in the same way as for non-function types.[/note]"},{"id":4799,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96668,"text":"Yes","isCorrect":true,"properties":{}},{"id":96669,"text":"No","isCorrect":false,"properties":{}}],"question":"Can Swift functions return other functions?","textContent":"[h1]Function Types as Parameter Types[/h1]\r\n\r\nA function type, such as (Int, Int) -> Int, can act as a parameter type for a different function, allowing for leaving some aspects of a function's implementation for the function's caller to provide calling the function.\r\nThe following example defines a function called [b]printResult[/b], which takes another function as its parameter and calls it as it's implemented: [code format=\"swift\"]func printResult([b]mathFunc: (Int, Int) -> Int[/b], a: Int, b: Int) {\r\n   print(\"Result: \\(mathFunc(a, b))\")\r\n}\r\nprintResult([b]addInts[/b], 3, 5) [/code]\r\n[note]It doesn't matter what the called function's implementation actually does - it matters only that the function is of the correct type.[/note]\r\n[h1]Function Types as Return Types[/h1]\r\n\r\nA function type may be used as another function's return type, by writing a complete function type immediately following the return arrow (->) in the returning function.[code format=\"swift\"]func plus(input: Int) -> Int {\r\n   return input + 1\r\n}\r\nfunc minus(input: Int) -> Int {\r\n   return input - 1\r\n}\r\nfunc chooseFunc(flag: Bool) -> [b](Int) -> Int[/b] {\r\n   if(flag) {\r\n     return plus\r\n   }\r\n   else {\r\n     return minus\r\n   }\r\n}[/code]\r\n[note]In the above example, the [b]chooseFunc [/b]function returns another function of type [b](Int) -> Int[/b], based on the value of its [i]flag [/i]parameter.[/note]"},{"id":4800,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96670,"text":"One","isCorrect":false,"properties":{}},{"id":96671,"text":"None","isCorrect":false,"properties":{}},{"id":96672,"text":"Multiple","isCorrect":true,"properties":{}}],"question":"How many nested functions can be within a function?","textContent":"[h1]Nested Functions[/h1]\r\n\r\nYou also have the option of defining functions inside the bodies of other functions. These are called  [b]nested functions[/b].\r\n\r\nBy default, a nested function is hidden from the outside world. It can still be called and used by its enclosing function. An enclosing function can also return one of its nested functions, thus allowing the nested function to be used in another scope.\r\n\r\nFrom the previous lesson, the function  [b]chooseFunc [/b] can be rewritten to use and return nested functions:\r\n[code format=\"swift\"]func chooseFunc(flag: Bool) -> (Int) -> Int {\r\n   [b]func plus(input: Int) -> Int { return input + 1 }\r\n   func minus(input: Int) -> Int { return input - 1 }[/b]\r\n   if(flag) {\r\n     return plus\r\n   }\r\n   else {\r\n     return minus\r\n   }\r\n}[/code]"},{"id":4801,"number":5,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96673,"text":"2","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of the following code?\r\nfunc fib(n: Int) -> Int {\r\n   return n < 2 ? n : (fib(n-1) + fib(n-2))\r\n}\r\nprint(fib(3))","textContent":"[h1]Recursion[/h1]\r\n\r\nThe term [b]recursion [/b]is used to describe the situation in which a function calls itself:[code format=\"swift\"]func [b]factorial[/b](n: Int) -> Int {\u000b\r\n   return n == 0 ? 1 : n * [b]factorial[/b](n-1)\r\n\u000b}\r\n\u000bprint(factorial(5)) //prints 120[/code]\r\nThe function calls itself recursively, until n is equal to 0, at which point the recursion ends.\r\n[note]Be sure to always add a condition that ends the recursion. Otherwise, your recursion will continue [b]infinitely[/b].[/note]"}]}}