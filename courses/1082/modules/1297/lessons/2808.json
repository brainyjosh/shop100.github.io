{"lesson":{"id":2808,"name":"Handling Events","type":0,"mode":1,"videoID":null,"tags":null,"quizzes":[{"id":5993,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117331,"text":"function","isCorrect":true,"properties":{}},{"id":117332,"text":"variable","isCorrect":false,"properties":{}},{"id":117333,"text":"selector","isCorrect":false,"properties":{}},{"id":117334,"text":"HTML element","isCorrect":false,"properties":{}}],"question":"The event handler is a:","textContent":"[h1]Handling Events[/h1]\r\n\r\nJQuery provides an efficient way to handle events. Events occur when the user performs an action, such as clicking an element, moving the mouse, or submitting a form. \r\nWhen an event occurs on a target element, a [b]handler function[/b] is executed.\r\nFor example, let's say we want to handle the [b]click [/b]event on an element with id=\"demo\" and display the current date when the button is clicked. Using pure JavaScript, the code looks like: [code format=\"js\" codeId=\"1126\"]var x = document.getElementById(\"demo\");\r\nx.onclick = function () {\r\n  document.body.innerHTML = Date();\r\n}[/code]\r\nThe same event could be handled using jQuery with the following code: [code format=\"js\" codeId=\"1127\"]$(\"#demo\").click(function() {\r\n  $(\"body\").html(Date());\r\n});[/code]\r\nAs you can see, the jQuery code is shorter and easier to read and write. \r\nNotice, that the event name is provided without the \"on\" prefix (i.e., [b]onclick [/b]in JavaScript is [b]click [/b]in jQuery).\r\n[note]The function that is executed when an event is fired is called the [b]event handler[/b].[/note]"},{"id":6026,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117249,"text":"click","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":117250,"text":"function","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":117251,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to handle the click event on the paragraph tag.\r\n[!raw!]\r\n$(\"p\").{0}({1}() {\r\n  alert(\"Clicked!\");\r\n{2});","textContent":"[h1]Common Events[/h1]\r\n\r\nThe following are the most commonly used events:\r\n[b]Mouse Events\r\nclick [/b]occurs when an element is clicked.\r\n[b]dblclick [/b]occurs when an element is double-clicked.\r\n[b]mouseenter [/b]occurs when the mouse pointer is over (enters) the selected element.\r\n[b]mouseleave[/b] occurs when the mouse pointer leaves the selected element.\r\n[b]mouseover [/b]occurs when the mouse pointer is over the selected element.\r\n\r\n[b]Keyboard Events\r\n[/b][b]keydown [/b]occurs when a keyboard key is pressed down.\r\n[b]keyup [/b]occurs when a keyboard key is released.\r\n\r\n[b]Form Events[/b]:\r\n[b]submit [/b]occurs when a form is submitted.\r\n[b]change [/b]occurs when the value of an element has been changed.\r\n[b]focus [/b]occurs when an element gets focus.\r\n[b]blur [/b]occurs when an element loses focus.\r\n\r\n[b]Document Events[/b]: \r\n[b]ready [/b]occurs when the DOM has been loaded.\r\n[b]resize [/b]occurs when the browser window changes size.\r\n[b]scroll [/b]occurs when the user scrolls in the specified element.\r\n\r\nAs an example, let's change the content of a div when the user types in an input field. To do that, we need to handle the [b]keydown [/b]event, which occurs when a key on the keyboard is pressed:\r\n[b]HTML:[/b] [code format=\"html\" ] <input type=\"text\" id=\"name\" />\r\n<div id=\"msg\"></div>[/code]\r\n[b]JS:[/b] [code format=\"js\" codeId=\"1128\"]$(\"#name\").[b]keydown[/b](function() {\r\n  $(\"#msg\").html($(\"#name\").val());\r\n});[/code]\r\nThe code above handles the [b]keydown [/b]event for the element with id=\"name\" and assigns the content of the div with id=\"msg\" the value of the input field.\r\n[note]The event names are self-explanatory, so just experiment to see them in action.[/note]"},{"id":5994,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":117255,"text":"$","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":117256,"text":"on","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":117257,"text":"submit","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to handle the submit event for the form element using the on() method:\r\n[!raw!]\r\n{0}(\"form\").{1}(\"{2}\", function() {\r\n  // some code\r\n});","textContent":"[h1]Handling Events[/h1]\r\n\r\nAnother way to handle events in jQuery is by using the [b]on[/b]() method. \r\nThe [b]on()[/b] method is used to attach an event to the selected element. For example: [code format=\"js\" codeId=\"1129\"]$( \"p\" ).[b]on[/b]( \"click\", function() {\r\n  alert(\"clicked\");\r\n});[/code]\r\nAs you can see, the event name is passed as the first argument to the [b]on()[/b] method. The second argument is the handler function.\r\n[note]The [b]on() [/b]method is useful for binding the same handler function to multiple events. You can provide multiple event names separated by [b]spaces [/b]as the first argument. For example, you could use the same event handler for the [b]click [/b]and [b]dblclick [/b]events.[/note]"},{"id":5997,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":116655,"text":"#test","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":116656,"text":"off","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":116657,"text":"focus","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to remove the event handler for the focus event on the element with id=\"test\".\r\n[!raw!]\r\n$(\"{0}\").{1}(\"{2}\");","textContent":"[h1]off()[/h1]\r\n\r\nYou can remove event handlers using the [b]off()[/b] method.\r\nFor example:[code format=\"js\" codeId=\"1130\"]$(\"div\").on(\"click\", function() { \r\n  alert('Hi there!'); \r\n}); \r\n$(\"div\").[b]off[/b](\"click\");[/code]\r\n[note]The argument of the [b]off[/b]() method is the event name you want to remove the handler for.[/note]"}]}}