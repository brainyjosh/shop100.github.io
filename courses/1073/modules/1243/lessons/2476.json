{"lesson":{"id":2476,"name":"Simple Metacharacters","type":0,"mode":1,"videoID":null,"tags":"regular-expressions","quizzes":[{"id":5159,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104533,"text":"r","isCorrect":false,"properties":{"prefix":"str = ","postfix":"\"I am \\r\\a\\w!\""}}],"question":"Fill in the blanks to create a raw string.","textContent":"[h1]Metacharacters[/h1]\r\n\r\n[b]Metacharacters [/b]are what make regular expressions more powerful than normal string methods.\r\nThey allow you to create regular expressions to represent concepts like \"one or more repetitions of a vowel\". \r\n\r\nThe existence of metacharacters poses a problem if you want to create a regular expression (or [b]regex[/b]) that matches a literal metacharacter, such as \"$\". You can do this by escaping the metacharacters by putting a [b]backslash [/b]in front of them. \r\nHowever, this can cause problems, since backslashes also have an escaping function in normal Python strings. This can mean putting three or four backslashes in a row to do all the escaping. \r\n[note]To avoid this, you can use a raw string, which is a normal string with an \"r\" in front of it. We saw usage of raw strings in the previous lesson.[/note]"},{"id":5160,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104650,"text":"Strings with four digits only","isCorrect":false,"properties":{}},{"id":104651,"text":"Any four character string with no newlines","isCorrect":true,"properties":{}},{"id":104652,"text":"Any string with only dots","isCorrect":false,"properties":{}}],"question":"What would '....' match?","textContent":"[h1]Metacharacters[/h1]\r\n\r\nThe first metacharacter we will look at is [b].[/b] (dot). \r\nThis matches [b]any character[/b], other than a new line.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"425\"]import re\r\n\r\n[b]pattern = r\"gr.y\"[/b]\r\n\r\nif re.match(pattern, \"grey\"):\r\n   print(\"Match 1\")\r\n\r\nif re.match(pattern, \"gray\"):\r\n   print(\"Match 2\")\r\n\r\nif re.match(pattern, \"blue\"):\r\n   print(\"Match 3\")[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nMatch 1\r\nMatch 2\r\n>>>[/code]"},{"id":5161,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104653,"text":"..!","isCorrect":false,"properties":{"prefix":"r\"","postfix":"$\""}}],"question":"Fill in the blanks to create a pattern that matches strings that contain 3 characters, out of which the last character is an exclamation mark.","textContent":"[h1]Metacharacters[/h1]\r\n\r\nThe next two metacharacters are [b]^[/b] and [b]$[/b].\r\nThese match the [b]start [/b]and [b]end [/b]of a string, respectively.\r\n[b]Example:[/b][code format=\"py\" codeId=\"426\"]import re\r\n\r\n[b]pattern = r\"^gr.y$\"[/b]\r\n\r\nif re.match(pattern, \"grey\"):\r\n   print(\"Match 1\")\r\n\r\nif re.match(pattern, \"gray\"):\r\n   print(\"Match 2\")\r\n\r\nif re.match(pattern, \"stingray\"):\r\n   print(\"Match 3\")[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nMatch 1\r\nMatch 2\r\n>>>[/code]\r\n[note]The pattern \"[b]^gr.y$[/b]\" means that the string should start with [b]gr[/b], then follow with any character, except a newline, and end with [b]y[/b].[/note]"}]}}