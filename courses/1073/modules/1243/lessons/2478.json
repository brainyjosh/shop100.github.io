{"lesson":{"id":2478,"name":"Character Classes","type":0,"mode":1,"videoID":null,"tags":"regular-expressions","quizzes":[{"id":5162,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104654,"text":"Any three letters out of \"abc\", then any three from \"def\"","isCorrect":false,"properties":{}},{"id":104655,"text":"Any letter out of \"abc\", then any out of \"def\"","isCorrect":true,"properties":{}},{"id":104656,"text":"Either \"abc\" or \"def\"","isCorrect":false,"properties":{}}],"question":"What would [abc][def] match?","textContent":"[h1]Character Classes[/h1]\r\n\r\n[b]Character classes[/b] provide a way to match only one of a specific set of characters.\r\nA character class is created by putting the characters it matches inside [b]square brackets[/b].\r\n[b]Example:[/b] [code format=\"py\" codeId=\"427\"]import re\r\n\r\n[b]pattern = r\"[aeiou]\"[/b]\r\n\r\nif re.search(pattern, \"grey\"):\r\n   print(\"Match 1\")\r\n\r\nif re.search(pattern, \"qwertyuiop\"):\r\n   print(\"Match 2\")\r\n\r\nif re.search(pattern, \"rhythm myths\"):\r\n   print(\"Match 3\")[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\nMatch 1\r\nMatch 2\r\n>>>[/code]\r\n[note]The pattern [b][aeiou][/b] in the [b]search [/b]function matches all strings that contain any one of the characters defined.[/note]"},{"id":5163,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104657,"text":"10, 19, 50, or 90","isCorrect":false,"properties":{}},{"id":104658,"text":"Any two-digit number","isCorrect":false,"properties":{}},{"id":104659,"text":"Any two-digit number from 10 to 59","isCorrect":true,"properties":{}}],"question":"What would [1-5][0-9] match?","textContent":"[h1]Character Classes[/h1]\r\n\r\nCharacter classes can also match ranges of characters. \r\nSome examples:\r\nThe class [b][a-z][/b] matches any lowercase alphabetic character.\r\nThe class [b][G-P][/b] matches any uppercase character from G to P.\r\nThe class [b][0-9][/b] matches any digit. \r\nMultiple ranges can be included in one class. For example, [b][A-Za-z][/b] matches a letter of any case.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"428\"]import re\r\n\r\n[b]pattern = r\"[A-Z][A-Z][0-9]\"[/b]\r\n\r\nif re.search(pattern, \"LS8\"):\r\n   print(\"Match 1\")\r\n\r\nif re.search(pattern, \"E3\"):\r\n   print(\"Match 2\")\r\n\r\nif re.search(pattern, \"1ab\"):\r\n   print(\"Match 3\")[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\nMatch 1\r\n>>>[/code]\r\n[note]The pattern in the example above matches strings that contain two alphabetic uppercase letters followed by a digit.[/note]"},{"id":5164,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106827,"text":"^","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106828,"text":"]","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to match strings that are not entirely composed of digits.\r\n[!raw!]\r\nimport re\r\n\r\npattern = r\"[{0}0-9{1}\"\r\n\r\nm = re.search(pattern, \"Hi there!\")","textContent":"[h1]Character Classes[/h1]\r\n\r\nPlace a [b]^[/b] at the start of a character class to [b]invert [/b]it. \r\nThis causes it to match any character other than the ones included. \r\nOther metacharacters such as [b]$[/b] and [b].[/b], have no meaning within character classes. \r\nThe metacharacter [b]^[/b] has no meaning unless it is the first character in a class.\r\n\r\n[b]Example:[/b] [code format=\"py\" codeId=\"429\"]import re\r\n\r\n[b]pattern = r\"[^A-Z]\"[/b]\r\n\r\nif re.search(pattern, \"this is all quiet\"):\r\n   print(\"Match 1\")\r\n\r\nif re.search(pattern, \"AbCdEfG123\"):\r\n   print(\"Match 2\")\r\n\r\nif re.search(pattern, \"THISISALLSHOUTING\"):\r\n   print(\"Match 3\")[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nMatch 1\r\nMatch 2\r\n>>>[/code]\r\n[note]The pattern [b][^A-Z][/b] excludes uppercase strings.\r\nNote, that the ^ should be inside the brackets to invert the character class.[/note]"}]}}