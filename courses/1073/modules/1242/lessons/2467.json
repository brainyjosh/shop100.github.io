{"lesson":{"id":2467,"name":"Classes","type":0,"mode":1,"videoID":null,"tags":"classes","quizzes":[{"id":5125,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96079,"text":"Integer","isCorrect":false,"properties":{}},{"id":96080,"text":"Class","isCorrect":false,"properties":{}},{"id":96081,"text":"Function","isCorrect":true,"properties":{}}],"question":"What type of object is a method?","textContent":"[h1]Classes[/h1]\r\n\r\nWe have previously looked at two paradigms of programming - [b]imperative [/b](using statements, loops, and functions as subroutines), and [b]functional [/b](using pure functions, higher-order functions, and recursion).\r\n\r\nAnother very popular paradigm is [b]object-oriented programming[/b] (OOP).\r\nObjects are created using [b]classes[/b], which are actually the focal point of OOP.\r\nThe [b]class [/b]describes what the object will be, but is separate from the object itself. In other words, a class can be described as an object's blueprint, description, or definition.\r\nYou can use the same class as a blueprint for creating multiple different objects. \r\n\r\nClasses are created using the keyword [b]class[/b] and an indented block, which contains class [b]methods [/b](which are functions). \r\nBelow is an example of a simple class and its objects.[code format=\"py\"][b]class [/b]Cat:\r\n  def __init__(self, color, legs):\r\n    self.color = color\r\n    self.legs = legs\r\n\r\nfelix = [b]Cat[/b](\"ginger\", 4)\r\nrover = [b]Cat[/b](\"dog-colored\", 4)\r\nstumpy = [b]Cat[/b](\"brown\", 3)[/code]\r\n[note]This code defines a class named [b]Cat[/b], which has two attributes: [b]color [/b]and [b]legs[/b].\r\nThen the class is used to create 3 separate objects of that class.\r\nTap [b]Continue [/b]to learn more![/note]"},{"id":5126,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98246,"text":"class","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98247,"text":"__init__","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98248,"text":".name","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98249,"text":")","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a class and its constructor, taking one argument and assigning it to the \"name\" attribute. Then create an object of the class.\r\n[!raw!]\r\n{0} Student:\r\n  def {1}(self, name):\r\n    self{2} = name\r\n\r\ntest = Student(\"Bob\"{3}","textContent":"[h1]__init__[/h1]\r\n\r\nThe [b]__init__[/b] method is the most important method in a class. \r\nThis is called when an instance (object) of the class is created, using the class name as a function.\r\n\r\nAll methods must have [b]self[/b] as their first parameter, although it isn't explicitly passed, Python adds the [b]self[/b] argument to the list for you; you do not need to include it when you call the methods. Within a method definition, [b]self [/b]refers to the instance calling the method.\r\n\r\nInstances of a class have [b]attributes[/b], which are pieces of data associated with them.\r\nIn this example, [b]Cat[/b] instances have attributes [b]color [/b]and [b]legs[/b]. These can be accessed by putting a [b]dot[/b], and the attribute name after an instance. \r\nIn an [b]__init__[/b] method, [b]self.attribute[/b] can therefore be used to set the initial value of an instance's attributes.\r\n[b]Example: [/b] [code format=\"py\" codeId=\"404\"]class Cat:\r\n  def __init__([b]self[/b], color, legs):\r\n    [b]self[/b].color = color\r\n    [b]self[/b].legs = legs\r\n\r\nfelix = Cat(\"ginger\", 4)\r\nprint(felix.color)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nginger\r\n>>>[/code]\r\n[note]In the example above, the [b]__init__[/b] method takes two arguments and assigns them to the object's attributes. The [b]__init__[/b] method is called the class [b]constructor[/b].[/note]"},{"id":5127,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104452,"text":":","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104453,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104454,"text":"self","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":104455,"text":"self","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a class with a method sayHi().\r\n[!raw!]\r\nclass Student{0}\r\n  def __init__(self, name):\r\n    self.name = name\r\n\r\n  {1} sayHi({2}):\r\n    print(\"Hi from \"+{3}.name)\r\n  \r\ns1 = Student(\"Amy\")\r\ns1.sayHi()","textContent":"[h1]Methods[/h1]\r\n\r\nClasses can have other [b]methods [/b]defined to add functionality to them. \r\nRemember, that all methods must have [b]self [/b]as their first parameter.\r\nThese methods are accessed using the same [b]dot [/b]syntax as attributes. \r\n[b]Example:[/b] [code format=\"py\" codeId=\"405\"]class Dog:\r\n  def __init__(self, name, color):\r\n    self.name = name\r\n    self.color = color\r\n\r\n  [b]def bark(self):\r\n    print(\"Woof!\")[/b]\r\n\r\nfido = Dog(\"Fido\", \"brown\")\r\nprint(fido.name)\r\n[b]fido.bark()[/b][/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\nFido\r\nWoof!\r\n>>>[/code]\r\nClasses can also have [b]class attributes[/b], created by assigning variables within the body of the class. These can be accessed either from instances of the class, or the class itself.\r\n[b]Example:[/b][code format=\"py\" codeId=\"406\"]class Dog:\r\n  [b]legs = 4[/b]\r\n  def __init__(self, name, color):\r\n    self.name = name\r\n    self.color = color\r\n\r\nfido = Dog(\"Fido\", \"brown\")\r\n[b]print(fido.legs)\r\nprint(Dog.legs)[/b][/code]\r\n[b]Result: [/b][code format=\"raw\" ]>>>\r\n4\r\n4\r\n>>>[/code]\r\n[note]Class attributes are shared by all instances of the class. [/note]"},{"id":5128,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":104465,"text":"NameError","isCorrect":false,"properties":{}},{"id":104466,"text":"AttributeError","isCorrect":true,"properties":{}},{"id":104467,"text":"ValueError","isCorrect":false,"properties":{}}],"question":"What error is caused by trying to access unknown attributes?","textContent":"[h1]Classes[/h1]\r\n\r\nTrying to access an attribute of an instance that isn't defined causes an [b]AttributeError[/b]. This also applies when you call an undefined method.\r\n\r\n[b]Example:[/b][code format=\"py\" codeId=\"407\"]class Rectangle: \r\n  def __init__(self, width, height):\r\n    self.width = width\r\n    self.height = height\r\n\r\nrect = Rectangle(7, 8)\r\nprint(rect.color)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n[b]AttributeError[/b]: 'Rectangle' object has no attribute 'color'\r\n>>>[/code]"}]}}