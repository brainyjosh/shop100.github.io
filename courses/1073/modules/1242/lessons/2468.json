{"lesson":{"id":2468,"name":"Object Lifecycle","type":0,"mode":1,"videoID":null,"tags":"objects","quizzes":[{"id":5137,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":87967,"text":"definition","isCorrect":false,"properties":{}},{"id":87968,"text":"instantiation","isCorrect":true,"properties":{}},{"id":87969,"text":"destruction","isCorrect":false,"properties":{}}],"question":"Which stage corresponds to the __init__ method being called?","textContent":"[h1]Object Lifecycle[/h1]\r\n\r\nThe lifecycle of an object is made up of its [b]creation[/b], [b]manipulation[/b], and [b]destruction[/b].\r\n\r\nThe first stage of the life-cycle of an object is the [b]definition [/b]of the class to which it belongs.\r\nThe next stage is the [b]instantiation [/b]of an instance, when [b]__init__ [/b]is called. Memory is allocated to store the instance. Just before this occurs, the [b]__new__ [/b]method of the class is called. This is usually overridden only in special cases.\r\nAfter this has happened, the object is ready to be used.\r\n[note]Other code can then interact with the object, by calling functions on it and accessing its attributes. \r\nEventually, it will finish being used, and can be [b]destroyed[/b].[/note]"},{"id":5138,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":96114,"text":"instance.del()","isCorrect":false,"properties":{}},{"id":96115,"text":"Class.del(instance)","isCorrect":false,"properties":{}},{"id":96116,"text":"del instance","isCorrect":true,"properties":{}}],"question":"What is __del__ the magic method for?","textContent":"[h1]Object Lifecycle[/h1]\r\n\r\nWhen an object is [b]destroyed[/b], the memory allocated to it is freed up, and can be used for other purposes.\r\nDestruction of an object occurs when its[b] reference count[/b] reaches zero. Reference count is the number of variables and other elements that refer to an object.\r\nIf nothing is referring to it (it has a reference count of zero) nothing can interact with it, so it can be safely deleted.\r\n\r\nIn some situations, two (or more) objects can be referred to by each other only, and therefore can be deleted as well. \r\nThe [b]del [/b]statement reduces the reference count of an object by one, and this often leads to its deletion.\r\nThe magic method for the [b]del [/b]statement is [b]__del__[/b].  \r\nThe process of deleting objects when they are no longer needed is called [b]garbage collection[/b].\r\nIn summary, an object's reference count increases when it is assigned a new  name or placed in a container (list, tuple, or dictionary). The object's reference count decreases when it's deleted with [b]del[/b], its reference is reassigned, or its reference goes out of scope. When an object's reference count reaches zero, Python automatically deletes it.\r\n[b]Example:[/b] [code format=\"py\"]a = 42  # Create object <42>\r\nb = a  # Increase ref. count  of <42> \r\nc = [a]  # Increase ref. count  of <42> \r\n\r\ndel a  # Decrease ref. count  of <42>\r\nb = 100  # Decrease ref. count  of <42> \r\nc[0] = -1  # Decrease ref. count  of <42>[/code]\r\n[note]Lower level languages like C don't have this kind of automatic memory management.[/note]"}]}}