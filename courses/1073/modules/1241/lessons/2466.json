{"lesson":{"id":2466,"name":"itertools","type":0,"mode":1,"videoID":null,"tags":"itertools","quizzes":[{"id":5116,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":106703,"text":"from","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":106704,"text":"cycle","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to import the cycle function from the itertools module.\r\n[!raw!]\r\n{0} itertools import {1}","textContent":"[h1]itertools[/h1]\r\n\r\nThe module [b]itertools[/b] is a standard library that contains several functions that are useful in functional programming. \r\nOne type of function it produces is infinite iterators. \r\nThe function [b]count[/b] counts up infinitely from a value. \r\nThe function [b]cycle[/b] infinitely iterates through an iterable (for instance a list or string). \r\nThe function [b]repeat [/b]repeats an object, either infinitely or a specific number of times.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"401\"]from [b]itertools [/b]import [b]count[/b]\r\n\r\nfor i in [b]count(3)[/b]:\r\n  print(i)\r\n  if i >=11:\r\n    break[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n>>>[/code]"},{"id":5117,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98242,"text":"import","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98243,"text":"takewhile","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98244,"text":"lambda","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to take the numbers from the list while they are even, using the takewhile function.\r\n[!raw!]\r\nfrom itertools {0} takewhile\r\nnums = [2, 4, 6, 7, 9, 8]\r\na = {1}({2} x: x%2==0, nums)\r\nprint(list(a))","textContent":"[h1]itertools[/h1]\r\n\r\nThere are many functions in [b]itertools[/b] that operate on iterables, in a similar way to [b]map [/b]and [b]filter[/b]. \r\nSome examples:\r\n[b]takewhile -[/b] takes items from an iterable while a predicate function remains true;\r\n[b]chain - [/b]combines several iterables into one long one; \r\n[b]accumulate -[/b] returns a running total of values in an iterable. [code format=\"py\" codeId=\"402\"]from itertools import [b]accumulate[/b], [b]takewhile[/b]\r\n\r\nnums = list([b]accumulate[/b](range(8)))\r\nprint(nums)\r\nprint(list([b]takewhile[/b](lambda x: x<= 6, nums)))[/code]\r\n[b]Result:[/b][code format=\"raw\" ]>>>\r\n[0, 1, 3, 6, 10, 15, 21, 28]\r\n[0, 1, 3, 6]\r\n>>>[/code]"},{"id":5118,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98245,"text":"6","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the output of this code?\r\nfrom itertools import product\r\na={1, 2}\r\nprint(len(list(product(range(3), a))))","textContent":"[h1]itertools[/h1]\r\n\r\nThere are also several combinatoric functions in [b]itertool[/b], such as [b]product [/b]and [b]permutation[/b].\r\nThese are used when you want to accomplish a task with all possible combinations of some items.\r\n[b]Example:[/b] [code format=\"py\" codeId=\"403\"]from itertools import product, permutations\r\n\r\nletters = (\"A\", \"B\")\r\nprint(list([b]product[/b](letters, range(2))))\r\nprint(list([b]permutations[/b](letters))) [/code]\r\n[b]Result: [/b][code format=\"raw\" ]>>>\r\n[('A', 0), ('A', 1), ('B', 0), ('B', 1)]\r\n[('A', 'B'), ('B', 'A')]\r\n>>>[/code]"}]}}