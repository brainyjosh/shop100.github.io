{"lesson":{"id":2464,"name":"Sets","type":0,"mode":1,"videoID":null,"tags":"sets","quizzes":[{"id":5113,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98232,"text":"1","isCorrect":true,"properties":{}},{"id":98233,"text":"2","isCorrect":false,"properties":{}},{"id":98234,"text":"1   2","isCorrect":false,"properties":{}}],"question":"What is the output of this code?\r\nletters = {\"a\", \"b\", \"c\", \"d\"}\r\nif \"e\" not in letters:\r\n  print(1)\r\nelse: \r\n  print(2)","textContent":"[h1]Sets[/h1]\r\n\r\n[b]Sets [/b]are data structures, similar to lists or dictionaries. They are created using curly braces, or the [b]set[/b] function. They share some functionality with lists, such as the use of [b]in [/b]to check whether they contain a particular item.[code format=\"py\" codeId=\"398\"]num_set = {1, 2, 3, 4, 5}\r\nword_set = set([\"spam\", \"eggs\", \"sausage\"])\r\n\r\nprint(3 [b]in [/b]num_set)\r\nprint(\"spam\" not [b]in [/b]word_set)[/code]\r\n[b]Result: [/b][code format=\"raw\" ]>>>\r\nTrue\r\nFalse\r\n>>>[/code]\r\n[note]To create an empty set, you must use [b]set()[/b], as [b]{}[/b] creates an empty dictionary.[/note]"},{"id":5114,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98235,"text":"{","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98236,"text":"}","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98237,"text":"add","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98238,"text":"len","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to create a set, add the letter \"z\" to it, and print its length.\r\n[!raw!]\r\nnums = {0}\"a\", \"b\", \"c\", \"d\"{1}\r\nnums.{2}(\"z\")\r\nprint({3}(nums))","textContent":"[h1]Sets[/h1]\r\n\r\nSets differ from lists in several ways, but share several list operations such as [b]len[/b]. \r\nThey are unordered, which means that they can't be indexed. \r\nThey [b]cannot [/b]contain duplicate elements. \r\nDue to the way they're stored, it's [b]faster [/b]to check whether an item is part of a set, rather than part of a list.\r\nInstead of using [b]append [/b]to add to a set, use [b]add[/b]. \r\nThe method [b]remove [/b]removes a specific element from a set; [b]pop [/b]removes an arbitrary element.[code format=\"py\" codeId=\"399\"]nums = {1, 2, 1, 3, 1, 4, 5, 6}\r\nprint(nums)\r\nnums.add(-7)\r\nnums.remove(3)\r\nprint(nums)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n{1, 2, 3, 4, 5, 6}\r\n{1, 2, 4, 5, 6, -7}\r\n>>>[/code]\r\n[note]Basic uses of [b]sets [/b]include membership testing and the elimination of duplicate entries.[/note]"},{"id":5115,"number":3,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98239,"text":"3","isCorrect":false,"properties":{"prefix":"{","postfix":"}"}}],"question":"What is the output of this code?\r\na = {1, 2, 3}\r\nb = {0, 3, 4, 5}\r\nprint(a & b)","textContent":"[h1]Sets[/h1]\r\n\r\nSets can be combined using mathematical operations.\r\nThe [b]union [/b]operator [b]|[/b] combines two sets to form a new one containing items in either. \r\nThe [b]intersection [/b]operator [b]&[/b] gets items only in both. \r\nThe [b]difference [/b]operator [b]-[/b] gets items in the first set but not in the second. \r\nThe [b]symmetric difference[/b] operator [b]^[/b] gets items in either set, but not both. [code format=\"py\" codeId=\"400\"]first = {1, 2, 3, 4, 5, 6}\r\nsecond = {4, 5, 6, 7, 8, 9}\r\n\r\nprint(first | second)\r\nprint(first & second)\r\nprint(first - second)\r\nprint(second - first)\r\nprint(first ^ second)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n{1, 2, 3, 4, 5, 6, 7, 8, 9}\r\n{4, 5, 6}\r\n{1, 2, 3}\r\n{8, 9, 7}\r\n{1, 2, 3, 7, 8, 9}\r\n>>>[/code]"},{"id":5342,"number":4,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":1,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":87892,"text":"Sets","isCorrect":true,"properties":{}},{"id":87893,"text":"Lists","isCorrect":false,"properties":{}},{"id":87894,"text":"Tuples","isCorrect":false,"properties":{}},{"id":87895,"text":"Dictionaries","isCorrect":false,"properties":{}}],"question":"Which of the following data types does not allow duplicate values?","textContent":"[h1]Data Structures[/h1]\r\n\r\nAs we have seen in the previous lessons, Python supports the following data structures: [b]lists[/b], [b]dictionaries[/b], [b]tuples[/b], [b]sets[/b].\r\n\r\n[b]When to use a dictionary:[/b]\r\n- When you need a logical association between a [b]key:value[/b] pair.\r\n- When you need fast lookup for your data, based on a custom key.\r\n- When your data is being constantly modified. Remember, dictionaries are mutable.\r\n\r\n[b]When to use the other types:[/b]\r\n- Use [b]lists [/b]if you have a collection of data that does not need random access. Try to choose lists when you need a simple, iterable collection that is modified frequently.\r\n- Use a [b]set [/b]if you need uniqueness for the elements. \r\n- Use [b]tuples [/b]when your data cannot change. \r\n[note]Many times, a [b]tuple [/b]is used in combination with a [b]dictionary[/b], for example, a [b]tuple [/b]might represent a key, because it's immutable. [/note]"}]}}