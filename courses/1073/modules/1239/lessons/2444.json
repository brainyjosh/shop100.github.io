{"lesson":{"id":2444,"name":"Assertions","type":0,"mode":1,"videoID":null,"tags":"assertions","quizzes":[{"id":5047,"number":1,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":2,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98107,"text":"1","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"What is the highest number printed by this code?\r\nprint(0)\r\nassert \"h\" != \"w\"\r\nprint (1)\r\nassert False\r\nprint(2)\r\nassert True\r\nprint(3)","textContent":"[h1]Assertions[/h1]\r\n\r\nAn [b]assertion [/b]is a sanity-check that you can turn on or turn off when you have finished testing the program.\r\nAn expression is tested, and if the result comes up false, an exception is raised.\r\nAssertions are carried out through use of the [b]assert [/b]statement.[code format=\"py\" codeId=\"352\"]print(1)\r\n[b]assert [/b]2 + 2 == 4\r\nprint(2)\r\n[b]assert [/b]1 + 1 == 3\r\nprint(3)[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\n1\r\n2\r\n[b]AssertionError[/b]\r\n>>>[/code]\r\n[note]Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.[/note]"},{"id":5048,"number":2,"videoStart":0.0,"videoEnd":0.0,"linkedVideoID":null,"type":3,"linkedQuizID":null,"tip":null,"hint":null,"time":0,"answers":[{"id":98108,"text":"def","isCorrect":false,"properties":{"prefix":"","postfix":""}},{"id":98109,"text":"assert","isCorrect":false,"properties":{"prefix":"","postfix":""}}],"question":"Fill in the blanks to define a function that takes one argument. Assert the argument to be positive.\r\n[!raw!]\r\n{0} my_func(x):\r\n  {1} x > 0, \"Error!\"\r\n  print(x)","textContent":"[h1]Assertions[/h1]\r\n\r\nThe [b]assert [/b]can take a second argument that is passed to the AssertionError raised if the assertion fails. [code format=\"py\" codeId=\"353\"]temp = -10\r\nassert (temp >= 0), \"Colder than absolute zero!\"[/code]\r\n[b]Result:[/b] [code format=\"raw\" ]>>>\r\nAssertionError: Colder than absolute zero!\r\n>>>[/code]\r\n[note]AssertionError exceptions can be caught and handled like any other exception using the [b]try-except[/b] statement, but if not handled, this type of exception will terminate the program.[/note]"}]}}